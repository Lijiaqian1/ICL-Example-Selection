{"dialogue_id":"bf40c2ea-dbba-41e0-8773-82ad766c96cf","turns":[{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"please remind me on the activity today afternoon","tokens":["please","remind","me","on","the","activity","today","afternoon"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}}],"tags":{}}
{"dialogue_id":"a057ac36-6f62-4d39-a27f-5a3c1cf1d53f","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeekend))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeekend))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Do I have anything scheduled for this coming weekend?","tokens":["Do","I","have","anything","scheduled","for","this","coming","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events this weekend.","tokens":["No",",","I","did","n't","find","any","events","this","weekend","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (ThisWeekend))))) #(Number 0)))","do-not-train":""}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (NextWeekend))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NextWeekend))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"What about next weekend?","tokens":["What","about","next","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have one event on your calendar. Your party at the Knopes is on Saturday the 29th from 7:00 PM to 1:00 AM.","tokens":["You","have","one","event","on","your","calendar",".","Your","party","at","the","Knopes","is","on","Saturday","the","29","th","from","7",":","00","PM","to","1",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (NextWeekend))))","do-not-train":""}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Can you delete everything on my calendar in January?","tokens":["Can","you","delete","everything","on","my","calendar","in","January","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 11L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tina\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 11L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tina\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Please schedule a meeting with Tina tomorrow at 11 AM.","tokens":["Please","schedule","a","meeting","with","Tina","tomorrow","at","11","AM","."]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Tina in your address book.","tokens":["I","did","n't","find","anyone","named","Tina","in","your","address","book","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tina\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 11))))))))"}}],"tags":{}}
{"dialogue_id":"a27aae91-dae8-4181-b9af-1bd9b69c9a3c","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hello, what do I have on my agenda for today?","tokens":["Hello",",","what","do","I","have","on","my","agenda","for","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events today.","tokens":["I","did","n't","find","any","events","today","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event]))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"discuss this weeks hiring event\")) (Event.duration_? (?= (toMinutes 10)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Emily Braun\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"discuss this weeks hiring event\")) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 10)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Emily Braun\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Okay. Can you schedule a 10 minute meeting with Emily Braun to discuss this weeks hiring event please?","tokens":["Okay",".","Can","you","schedule","a","10","minute","meeting","with","Emily","Braun","to","discuss","this","weeks","hiring","event","please","?"]},"agent_utterance":{"described_entities":["entity@1040257033"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Emily Braun\")))))) :duration (?= (toMinutes #(Number 10.0))) :subject (?= #(String \"discuss this weeks hiring event\"))))))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Why am i not able to do that?","tokens":["Why","am","i","not","able","to","do","that","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"How may you help?","tokens":["How","may","you","help","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Dallas\"))) (DateTime.date_? (?= (Today)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Dallas\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"What is the weather like in Dallas today?","tokens":["What","is","the","weather","like","in","Dallas","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a high of 0.00 °F and a low of 0.00 °F today.","tokens":["It","is","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","today","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Dallas\"))) :time (Constraint[DateTime] :date (?= (Today)))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (temperature) (Execute (refer (extensionConstraint (^(WeatherTable) AlwaysTrueConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Temperature) Yield :output ^Temperature (^(Temperature) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Temperature) (temperature) :table ^WeatherTable (^(WeatherTable) Execute :intension ^(CalflowIntension WeatherTable) (^(WeatherTable) refer :constraint ^(Constraint (CalflowIntension WeatherTable)) (^(WeatherTable) extensionConstraint :constraint ^(Constraint WeatherTable) (^(WeatherTable) AlwaysTrueConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"What is the temperature","tokens":["What","is","the","temperature"]},"agent_utterance":{"described_entities":[],"original_text":"The temperature is 0.00 °F today.","tokens":["The","temperature","is","0",".","00","°","F","today","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"temperature\") :quantifier #(WeatherQuantifier \"Summarize\") :table (Execute :intension (refer (extensionConstraint (AlwaysTrueConstraint[WeatherTable]))))))"}},{"lispress":"(Yield (Today))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Date) Yield :output ^Date (Today))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"What is today's date","tokens":["What","is","today","'s","date"]},"agent_utterance":{"described_entities":[],"original_text":"Today's date is March 13 2019.","tokens":["Today","'s","date","is","March","13","2019","."]},"tags":{"original_lispress":"(Yield :output (Today))"}},{"lispress":"(Yield (IsSunny (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Dallas\"))) (DateTime.date_? (?= (Today))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (IsSunny :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Dallas\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"will today be sunny in Dallas","tokens":["will","today","be","sunny","in","Dallas"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The average cloud cover is 0.00% today.","tokens":["Yes",".","The","average","cloud","cover","is","0",".","00","%","today","."]},"tags":{"original_lispress":"(Yield :output (IsSunny :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Dallas\"))) :time (Constraint[DateTime] :date (?= (Today))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"thank you. good bye","tokens":["thank","you",".","good","bye"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"59658403-1f0b-450b-89cf-bf456f5b4dc5","turns":[{"lispress":"(Yield (FindNumNextEvent (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) 3L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :number ^Long 3L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is my third event tomorrow?","tokens":["What","is","my","third","event","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"The 3rd event tomorrow is \"Woofers\" from 6:00 to 6:30 PM.","tokens":["The","3","rd","event","tomorrow","is","\"","Woofers","\"","from","6",":","00","to","6",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindNumNextEvent :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :number #(Number 3)))"}},{"lispress":"(Yield (Event.location (FindNumNextEvent (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) 3L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :number ^Long 3L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What is the location for my third event tomorrow?","tokens":["What","is","the","location","for","my","third","event","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"The 3rd tomorrow is a Walmart.","tokens":["The","3","rd","tomorrow","is","a","Walmart","."]},"tags":{"original_lispress":"(Yield :output (:location (FindNumNextEvent :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :number #(Number 3))))"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) 3L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :number ^Long 3L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"When does my third event tomorrow start?","tokens":["When","does","my","third","event","tomorrow","start","?"]},"agent_utterance":{"described_entities":[],"original_text":"The 3rd event tomorrow is at 1:00 PM.","tokens":["The","3","rd","event","tomorrow","is","at","1",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :number #(Number 3))))"}}],"tags":{}}
{"dialogue_id":"583badd1-41e4-484f-8a6d-109e447e08bb","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"pragarism debate\")) (Event.start_? (DateTimeConstraint (Night) (Today)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"pragarism debate\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Night) :date ^Date (Today)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create pragarism debate tonight","tokens":["Create","pragarism","debate","tonight"]},"agent_utterance":{"described_entities":["entity@1427437527"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Night) :date (Today)) :subject (?= #(String \"pragarism debate\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar today from 8:00 to 8:30 PM.","tokens":["I","'ve","put","that","on","your","calendar","today","from","8",":","00","to","8",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thank you","tokens":["Thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"No","tokens":["No"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Thank you","tokens":["Thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"e85d7026-8a8c-49dc-ad1b-cd4bb3d55dc0","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is scheduled for next Tuesday?","tokens":["What","is","scheduled","for","next","Tuesday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 2 events Tuesday the 27th.","tokens":["I","found","2","events","Tuesday","the","27","th","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (FindNumNextEvent (^(Event) EmptyStructConstraint) 1L)) (Event.start_? (DateTime.time_? (?= (NumberPM 2L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :number ^Long 1L)) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 2L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Please move my first event to 2:00 PM.","tokens":["Please","move","my","first","event","to","2",":","00","PM","."]},"agent_utterance":{"described_entities":["entity@1498879092"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (FindNumNextEvent :constraint (Constraint[Event]) :number #(Number 1))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 2))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That is better.","tokens":["That","is","better","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Lituation of Lithuania\" to be at 2:00.","tokens":["I","'ve","changed","\"","Lituation","of","Lithuania","\"","to","be","at","2",":","00","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (FindNumNextEvent (EventOnDate (MD 27L (August)) (^(Event) EmptyStructConstraint)) 1L)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (MD :day ^Long 27L :month ^Month (August)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :number ^Long 1L)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Something came up. Delete the first event on August 27.","tokens":["Something","came","up",".","Delete","the","first","event","on","August","27","."]},"agent_utterance":{"described_entities":["entity@1232343108"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (FindNumNextEvent :constraint (EventOnDate :date (MD :day #(Number 27) :month #(Month \"AUGUST\")) :event (Constraint[Event])) :number #(Number 1))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yea thats it","tokens":["yea","that","s","it"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your next event.","tokens":["I","'ve","deleted","your","next","event","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"67958571-719b-4c8e-85ca-ff9f518f099c","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dentist appointment\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dentist appointment\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"cancel the dentist appointment","tokens":["cancel","the","dentist","appointment"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events.","tokens":["I","did","n't","find","any","events","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dentist appointment\"))))))))))"}}],"tags":{}}
{"dialogue_id":"37722f3e-7806-4995-b631-a693b1d4bc7a","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (NextDOW (Monday)) (^(Event) EmptyStructConstraint)) (Afternoon)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Afternoon)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Delete my meeting on Monday afternoon","tokens":["Delete","my","meeting","on","Monday","afternoon"]},"agent_utterance":{"described_entities":["entity@1210556911"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event])) :timeRange (Afternoon)))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That's correct.","tokens":["That","'s","correct","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"5022261f-5f98-4b2f-bbf3-1f60f9188a02","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayStartingDateForPeriod (Event.subject_? (?= \"visit from in-laws\")) (NextDOW (Tuesday)) (toDays 8)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayStartingDateForPeriod :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"visit from in-laws\")) :startDate ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :period ^Period (toDays :days ^Number 8)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"8 day visit from in-laws. They arrive next Tuesday.","tokens":["8","day","visit","from","in","-","laws",".","They","arrive","next","Tuesday","."]},"agent_utterance":{"described_entities":["entity@1703084321"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayStartingDateForPeriod :event (Constraint[Event] :subject (?= #(String \"visit from in-laws\"))) :period (toDays #(Number 8)) :startDate (NextDOW :dow #(DayOfWeek \"TUESDAY\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes that is perfect","tokens":["Yes","that","is","perfect"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayStartingDateForPeriod (Event.subject_? (?= \"leaving for the beach\")) (MD 17L (October)) (toDays 5)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayStartingDateForPeriod :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"leaving for the beach\")) :startDate ^Date (MD :day ^Long 17L :month ^Month (October)) :period ^Period (toDays :days ^Number 5)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I am leaving for the beach on October 17th and will be gone for 5 days.","tokens":["I","am","leaving","for","the","beach","on","October","17","th","and","will","be","gone","for","5","days","."]},"agent_utterance":{"described_entities":["entity@1205688866"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayStartingDateForPeriod :event (Constraint[Event] :subject (?= #(String \"leaving for the beach\"))) :period (toDays #(Number 5)) :startDate (MD :day #(Number 17) :month #(Month \"OCTOBER\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes please add this to the calendar.","tokens":["Yes","please","add","this","to","the","calendar","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.location_? (?= (LocationKeyphrase.apply \"mountains\"))) (EventAllDayStartingDateForPeriod (Event.subject_? (?= \"hiking trip\")) (MD 1L (January)) (toDays 3))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"mountains\"))) :c2 ^(Constraint Event) (EventAllDayStartingDateForPeriod :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"hiking trip\")) :startDate ^Date (MD :day ^Long 1L :month ^Month (January)) :period ^Period (toDays :days ^Number 3))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I need a hiking trip in the mountains January 1 for 3 days.","tokens":["I","need","a","hiking","trip","in","the","mountains","January","1","for","3","days","."]},"agent_utterance":{"described_entities":["entity@1252107368"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"mountains\")) :nonEmptyBase (EventAllDayStartingDateForPeriod :event (Constraint[Event] :subject (?= #(String \"hiking trip\"))) :period (toDays #(Number 3)) :startDate (MD :day #(Number 1) :month #(Month \"JANUARY\")))))))"}}],"tags":{}}
{"dialogue_id":"031e8bed-a731-487a-9025-2bd7001cc156","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Monday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is on monday","tokens":["What","is","on","monday"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events on your calendar.","tokens":["I","did","n't","find","any","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (CurrentUser))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (CurrentUser))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Who am I logged in as?","tokens":["Who","am","I","logged","in","as","?"]},"agent_utterance":{"described_entities":[],"original_text":"You are logged in as Damon Straeter.","tokens":["You","are","logged","in","as","Damon","Straeter","."]},"tags":{"original_lispress":"(Yield :output (CurrentUser))"}},{"lispress":"(Yield (ForwardEventWrapper (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))) (append (^(Recipient) List.Nil) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Susan\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit) Yield :output ^Unit (ForwardEventWrapper :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))) :recipients ^(List Recipient) (^(Recipient) append :list ^(List Recipient) (^(Recipient) List.Nil) :value ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Susan\"))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Send this information to Susan","tokens":["Send","this","information","to","Susan"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"None of the events mentioned are on your calendar.","tokens":["None","of","the","events","mentioned","are","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (ForwardEventWrapper :event (Execute :intension (refer (extensionConstraint (Constraint[Event])))) :recipients (append #(List[Recipient] []) (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Susan\"))))))))","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"It's ok","tokens":["It","'s","ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (NextWeekList))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NextWeekList))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"what is my next week events in my calender","tokens":["what","is","my","next","week","events","in","my","calender"]},"agent_utterance":{"described_entities":[],"original_text":"I found 3 events next week.","tokens":["I","found","3","events","next","week","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (NextWeekList))))"}}],"tags":{}}
{"dialogue_id":"e26d707b-7422-4929-aabe-919014f2cbb1","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (^(Recipient) EmptyStructConstraint))) (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofMonth (March))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint))) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (March))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what do I have going on in March with attendees?","tokens":["what","do","I","have","going","on","in","March","with","attendees","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event with attendees next month. It's \"Ides of March Party\" on March 15th from 1:00 to 1:30 PM.","tokens":["I","found","one","event","with","attendees","next","month",".","It","'s","\"","Ides","of","March","Party","\"","on","March","15","th","from","1",":","00","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (Constraint[Recipient])) :nonEmptyBase (EventDuringRange :event (Constraint[Event]) :range (FullMonthofMonth :month #(Month \"MARCH\"))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (^(Recipient) EmptyStructConstraint))) (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofMonth (February))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint))) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (February))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"is there anything in February with attendees?","tokens":["is","there","anything","in","February","with","attendees","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with attendees this month.","tokens":["No",",","I","did","n't","find","any","events","with","attendees","this","month","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (Constraint[Recipient])) :nonEmptyBase (EventDuringRange :event (Constraint[Event]) :range (FullMonthofMonth :month #(Month \"FEBRUARY\"))))))) #(Number 0)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (^(Recipient) EmptyStructConstraint))) (EventOnDate (MD 28L (March)) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (MD :day ^Long 28L :month ^Month (March)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Oh, that's frustrating. Okay. Can you see if I have any meetings that include other people on March 28th?","tokens":["Oh",",","that","'s","frustrating",".","Okay",".","Can","you","see","if","I","have","any","meetings","that","include","other","people","on","March","28","th","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events with attendees on March 28th.","tokens":["I","did","n't","find","any","events","with","attendees","on","March","28","th","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (Constraint[Recipient])) :nonEmptyBase (EventOnDate :date (MD :day #(Number 28) :month #(Month \"MARCH\")) :event (Constraint[Event])))))"}}],"tags":{}}
{"dialogue_id":"7dabaa46-3fa8-46fc-a64d-c69ee342fd7d","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (MD 9L (March)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (MD :day ^Long 9L :month ^Month (March)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what do i have planned on saturday march 9th?","tokens":["what","do","i","have","planned","on","saturday","march","9","th","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here's what I found:","tokens":["Here","'s","what","I","found",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (MD :day #(Number 9) :month #(Month \"MARCH\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.end_? (DateTime.time_? (?= (NumberPM 6L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 6L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That's probably going to go to 6 pm.","tokens":["That","'s","probably","going","to","go","to","6","pm","."]},"agent_utterance":{"described_entities":["entity@813774308"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 6))))))))"}}],"tags":{}}
{"dialogue_id":"055749b2-5511-4209-b668-e5697d2f3525","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi I need help adding an event to my calender.","tokens":["Hi","I","need","help","adding","an","event","to","my","calender","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I would like to create an event","tokens":["I","would","like","to","create","an","event"]},"agent_utterance":{"described_entities":["entity@278362266"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event]))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (MD 20L (April)) (NumberPM 5L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 20L :month ^Month (April)) :time ^Time (NumberPM :number ^Long 5L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I would like to create an event for April 20th, 5 PM","tokens":["I","would","like","to","create","an","event","for","April","20","th",",","5","PM"]},"agent_utterance":{"described_entities":["entity@1080881796"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 20.0) :month #(Month \"APRIL\")) :time (NumberPM :number #(Number 5))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"6ea4e099-3b52-4d50-882d-d1623f064090","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"kid's birthday\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"kid's birthday\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What time is my kid's birthday?","tokens":["What","time","is","my","kid","'s","birthday","?"]},"agent_utterance":{"described_entities":[],"original_text":"It starts on May 11th at 2:00 PM.","tokens":["It","starts","on","May","11","th","at","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"kid's birthday\"))))))))"}},{"lispress":"(Yield (== (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventAfterDateTime (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jill\")))) (Now)))))) (LocationKeyphrase.apply \"applebees\")))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(LocationKeyphrase) == :x ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventAfterDateTime :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jill\")))) :dateTime ^DateTime (Now)))))) :y ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"applebees\")))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is my meeting with Jill at applebees?","tokens":["Is","my","meeting","with","Jill","at","applebees","?"]},"agent_utterance":{"described_entities":[],"original_text":"No. The event with Jill after right now is located at Applebee's.","tokens":["No",".","The","event","with","Jill","after","right","now","is","located","at","Applebee","'s","."]},"tags":{"original_lispress":"(Yield :output (== (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventAfterDateTime :dateTime (Now) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jill\"))))))))) #(LocationKeyphrase \"applebees\")))"}}],"tags":{}}
{"dialogue_id":"c35b61c5-c462-4cd6-a2a8-126be0a1d69a","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (FindNumNextEvent (^(Event) EmptyStructConstraint) 1L)) (Event.start_? (DateTime.time_? (?= (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :number ^Long 1L)) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make a change to my next meeting to start at 4","tokens":["Make","a","change","to","my","next","meeting","to","start","at","4"]},"agent_utterance":{"described_entities":["entity@1296782353"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (FindNumNextEvent :constraint (Constraint[Event]) :number #(Number 1))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Dental Appointment\" to be at 4:00.","tokens":["I","'ve","changed","\"","Dental","Appointment","\"","to","be","at","4",":","00","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dental appintment\")))))) (Event.start_? (DateTime.time_? (?= (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dental appintment\")))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I've changed \"dental appintment\"to be at 4:00PM","tokens":["I","'ve","changed","\"","dental","appintment\"to","be","at","4",":","00","PM"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"dental appintment\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","dental","appintment","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dental appintment\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 4))))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"It was \"dental appointment\". I am a bad speller.","tokens":["It","was","\"","dental","appointment","\"",".","I","am","a","bad","speller","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dental appointment\")))))) (Event.duration_? (?= (toMinutes 45))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dental appointment\")))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 45))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Make the dental appointment 45 minutes.","tokens":["Make","the","dental","appointment","45","minutes","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"dental appointment\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","dental","appointment","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dental appointment\"))))))) :update (Constraint[Event] :duration (?= (toMinutes #(Number 45)))))))"}}],"tags":{}}
{"dialogue_id":"c12c8b4e-01e6-44ea-9cc2-cf6c43323d38","turns":[{"lispress":"(Yield (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Johnson\")))) (FullMonthofMonth (Date.month (Today))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Long) Yield :output ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Johnson\")))) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (Date.month :obj ^Date (Today))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"How many meetings do I have with Johnson this month?","tokens":["How","many","meetings","do","I","have","with","Johnson","this","month","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events with Johnson this month.","tokens":["I","did","n't","find","any","events","with","Johnson","this","month","."]},"tags":{"original_lispress":"(Yield :output (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Johnson\")))) :range (FullMonthofMonth :month (:month (Today))))))))"}}],"tags":{}}
{"dialogue_id":"4d3ae1b0-1393-406e-a907-3c58759335db","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.subject_? (?~= \"singing lesson\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"singing lesson\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Cancel my singing lesson next Friday.","tokens":["Cancel","my","singing","lesson","next","Friday","."]},"agent_utterance":{"described_entities":["entity@75904983"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :subject (?~= #(String \"singing lesson\")))))))))))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.date_? (?= (ClosestDayOfWeek (DateTime.date (Event.start x0)) (Thursday)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :dow ^DayOfWeek (Thursday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you reschedule it for Thursday?","tokens":["Can","you","reschedule","it","for","Thursday","?"]},"agent_utterance":{"described_entities":["entity@337300159"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (ClosestDayOfWeek :date (:date (:start x0)) :dow #(DayOfWeek \"THURSDAY\")))))))))"}}],"tags":{}}
{"dialogue_id":"1aa6c54d-98db-4000-9d4e-4dc303d129c9","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"work picnic\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L))))) (Event.duration_? (?= (toHours 2)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"work picnic\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"book 2 hours for work picnic tomorrow at 3 pm","tokens":["book","2","hours","for","work","picnic","tomorrow","at","3","pm"]},"agent_utterance":{"described_entities":["entity@1682935261"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 2))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"work picnic\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes book that please","tokens":["Yes","book","that","please"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"1669f280-7ea4-4c6c-9ad1-c7c8466a156b","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (& (Event.subject_? (?~= \"study date\")) (Event.location_? (?= (LocationKeyphrase.apply \"Starbucks\")))) (ThisWeek))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"study date\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Starbucks\")))) :range ^(Constraint Date) (ThisWeek))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have a study date at Starbucks this week?","tokens":["Do","I","have","a","study","date","at","Starbucks","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events this week.","tokens":["No",",","I","did","n't","find","any","events","this","week","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :location (?= #(LocationKeyphrase \"Starbucks\")) :subject (?~= #(String \"study date\"))) :range (ThisWeek))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"luncheon\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberPM 12L))))) (Event.location_? (?= (LocationKeyphrase.apply \"Pizza Ranch\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"luncheon\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberPM :number ^Long 12L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Pizza Ranch\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"set up a luncheon at Pizza Ranch next Monday at 12 pm","tokens":["set","up","a","luncheon","at","Pizza","Ranch","next","Monday","at","12","pm"]},"agent_utterance":{"described_entities":["entity@529341500"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Pizza Ranch\")) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberPM :number #(Number 12)))) :subject (?= #(String \"luncheon\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That is exactly correct.","tokens":["That","is","exactly","correct","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (WeatherForEvent (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherForEvent :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"what will the weather be like then?","tokens":["what","will","the","weather","be","like","then","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a temperature of about 0.00 °F for \"luncheon\" in Lieu-dit Saint-Roch, Luri, Corsica 20228, France on Monday the 29th from 12:00 to 12:30.","tokens":["It","will","be","clear","with","a","temperature","of","about","0",".","00","°","F","for","\"","luncheon","\"","in","Lieu","-","dit","Saint","-","Roch",",","Luri",",","Corsica","20228",",","France","on","Monday","the","29","th","from","12",":","00","to","12",":","30","."]},"tags":{"original_lispress":"(Yield :output (WeatherForEvent :event (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.location_? (?= (LocationKeyphrase.apply \"Hyatt Regency\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Hyatt Regency\"))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"when is my meeting at the Hyatt Regency?","tokens":["when","is","my","meeting","at","the","Hyatt","Regency","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I'm sorry. I didn't find any events.","tokens":["I","'m","sorry",".","I","did","n't","find","any","events","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Hyatt Regency\"))))))))"}}],"tags":{}}
{"dialogue_id":"a97def37-d700-4482-9f83-3caca3952e98","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"foe\")) (Event.start_? (DateTime.date_? (?= (Tomorrow))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"foe\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make a appoinment foe tomorrow","tokens":["Make","a","appoinment","foe","tomorrow"]},"agent_utterance":{"described_entities":["entity@1799465799"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (Tomorrow))) :subject (?= #(String \"foe\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"select first one","tokens":["select","first","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"foe\")))))) (Event.subject_? (?= \"doctor\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"foe\")))))) :update ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"doctor\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Change \"foe\" to doctor","tokens":["Change","\"","foe","\"","to","doctor"]},"agent_utterance":{"described_entities":["entity@1796193496"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"foe\"))))))) :update (Constraint[Event] :subject (?= #(String \"doctor\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.duration_? (?= (toHours 2))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yeah but make it 2 hours.","tokens":["Yeah","but","make","it","2","hours","."]},"agent_utterance":{"described_entities":["entity@2123766379"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :duration (?= (toHours #(Number 2)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Great","tokens":["Great"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"foe\" to be named \"doctor\" for 2 hours.","tokens":["I","'ve","changed","\"","foe","\"","to","be","named","\"","doctor","\"","for","2","hours","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"55088d75-1d42-4dab-adbc-c7543b389e5a","turns":[{"lispress":"(Yield (RecipientAvailability (& (Event.start_? (DateTime.date_? (?= (Tomorrow)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Lee Gu\")))))))) false))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(EventCandidatesWithAndWithoutConflicts) Yield :output ^EventCandidatesWithAndWithoutConflicts (RecipientAvailability :eventConstraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Lee Gu\")))))))) :includingMe ^Boolean false))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Is Lee Gu busy tomorrow?","tokens":["Is","Lee","Gu","busy","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here are some times when Lee Gu is free tomorrow.","tokens":["Here","are","some","times","when","Lee","Gu","is","free","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (RecipientAvailability :eventConstraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Lee Gu\")))))) :start (Constraint[DateTime] :date (?= (Tomorrow)))) :includingMe #(Boolean false)))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Lee Gu\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Lee Gu\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Please add a meeting with Lee Gu tomorrow at 3:00 PM","tokens":["Please","add","a","meeting","with","Lee","Gu","tomorrow","at","3",":","00","PM"]},"agent_utterance":{"described_entities":["entity@657943600"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Lee Gu\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"YEs","tokens":["YEs"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Wednesday)) (NumberPM 6L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Adam Wallen\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (NumberPM :number ^Long 6L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Adam Wallen\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Please add dinner with Adam Wallen next Wednesday night at 6:00 PM","tokens":["Please","add","dinner","with","Adam","Wallen","next","Wednesday","night","at","6",":","00","PM"]},"agent_utterance":{"described_entities":["entity@1696935152"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Adam Wallen\")))))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"dinner\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Great thank you","tokens":["Great","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Lee Gu\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Lee Gu\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Please remove my meeting with Lee Gu tomorrow.","tokens":["Please","remove","my","meeting","with","Lee","Gu","tomorrow","."]},"agent_utterance":{"described_entities":["entity@1052158959"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Lee Gu\"))))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event with Lee Gu tomorrow.","tokens":["I","'ve","deleted","your","event","with","Lee","Gu","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (& (Event.subject_? (?~= \"dinner\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Adam\"))))) (NextWeekList)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Adam\"))))) :range ^(Constraint Date) (NextWeekList)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"Please remove dinner with Adam next week","tokens":["Please","remove","dinner","with","Adam","next","week"]},"agent_utterance":{"described_entities":["entity@1131739896"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Adam\"))) :subject (?~= #(String \"dinner\"))) :range (NextWeekList)))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"dinner\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Adam Wallen\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Adam Wallen\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"Please remove dinner with Adam Wallen","tokens":["Please","remove","dinner","with","Adam","Wallen"]},"agent_utterance":{"described_entities":["entity@1131739896"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Adam Wallen\"))) :subject (?~= #(String \"dinner\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":9,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event matching \"dinner\" with Adam Wallen.","tokens":["I","'ve","deleted","your","event","matching","\"","dinner","\"","with","Adam","Wallen","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"19caeb4e-50c1-434b-afc6-f972290ce999","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Doctor's appointment\")))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTimeConstraint (Morning) (ClosestDayOfWeek (DateTime.date (Event.start x0)) (Friday))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Doctor's appointment\")))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :dow ^DayOfWeek (Friday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"could you please reschedule my Doctor's appointment to Friday morning?","tokens":["could","you","please","reschedule","my","Doctor","'s","appointment","to","Friday","morning","?"]},"agent_utterance":{"described_entities":["entity@1147765184"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Doctor's appointment\"))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (DateTimeConstraint :constraint (Morning) :date (ClosestDayOfWeek :date (:date (:start x0)) :dow #(DayOfWeek \"FRIDAY\"))))))))"}}],"tags":{}}
{"dialogue_id":"f92fe257-e5bc-4ad1-8967-1ff035644b98","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 4L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Elizabeth\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 4L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Elizabeth\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hey, can you mark down a meeting with Elizabeth for 4 pm tomorrow afternoon?","tokens":["Hey",",","can","you","mark","down","a","meeting","with","Elizabeth","for","4","pm","tomorrow","afternoon","?"]},"agent_utterance":{"described_entities":["entity@2016569042"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Elizabeth\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.end_? (DateTime.time_? (?= (NumberPM 5L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 5L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"It's ok. Extend the time until 5:00 PM.","tokens":["It","'s","ok",".","Extend","the","time","until","5",":","00","PM","."]},"agent_utterance":{"described_entities":["entity@1851593837"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 5))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Nigel Thornberry\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Nigel Thornberry\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Add Nigel Thornberry to the meeting","tokens":["Add","Nigel","Thornberry","to","the","meeting"]},"agent_utterance":{"described_entities":["entity@1351867335"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Nigel Thornberry\"))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.end_? (DateTime.time_? (?= (HourMinutePm 5L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 5L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Extend it to 5:30.","tokens":["Extend","it","to","5",":","30","."]},"agent_utterance":{"described_entities":["entity@1172679331"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 5) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.location_? (?= (LocationKeyphrase.apply \"Rain forest\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Rain forest\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Change the location to the Rain forest","tokens":["Change","the","location","to","the","Rain","forest"]},"agent_utterance":{"described_entities":["entity@2008197734"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :location (?= #(LocationKeyphrase \"Rain forest\"))))))"}}],"tags":{}}
{"dialogue_id":"137324e7-ff1d-472f-888c-5edcb5e367c9","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.subject_? (?~= \"sales meeting\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"sales meeting\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"remove the sales meeting on Friday","tokens":["remove","the","sales","meeting","on","Friday"]},"agent_utterance":{"described_entities":["entity@58729415"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :subject (?~= #(String \"sales meeting\")))))))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasPeopleAnyOf (FindTeamOf (toRecipient (CurrentUser))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasPeopleAnyOf :people ^(List Person) (FindTeamOf :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Sure is. Thanks. After deleting that I need you to search for all of next weeks scheduled events that include one or more of my co-workers please.","tokens":["Sure","is",".","Thanks",".","After","deleting","that","I","need","you","to","search","for","all","of","next","weeks","scheduled","events","that","include","one","or","more","of","my","co","-","workers","please","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that. I didn't find any events with Abby Gonano, with Jesse Rosenfeld, Dan Marton, or you.","tokens":["I","'ve","deleted","that",".","I","did","n't","find","any","events","with","Abby","Gonano",",","with","Jesse","Rosenfeld",",","Dan","Marton",",","or","you","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasPeopleAnyOf :people (FindTeamOf :recipient (toRecipient (CurrentUser))))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"sports session\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 8L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"sports session\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 8L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"put the sports session at tomorrow 8.00 am","tokens":["put","the","sports","session","at","tomorrow","8",".","00","am"]},"agent_utterance":{"described_entities":["entity@873743881"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"sports session\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you update it to reflect an hour?","tokens":["Can","you","update","it","to","reflect","an","hour","?"]},"agent_utterance":{"described_entities":["entity@221949391"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 1)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberAM 8L)))) (Event.end_? (DateTime.time_? (?= (NumberAM 10L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 8L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 10L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":4,"user_utterance":{"original_text":"Can you make it 8 to 10?","tokens":["Can","you","make","it","8","to","10","?"]},"agent_utterance":{"described_entities":["entity@1475730488"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberAM :number #(Number 10.0)))) :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 8))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"51ead74e-4c16-44d2-b9f1-63b095d76b33","turns":[{"lispress":"(FenceRecurring)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceRecurring)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create an event every Monday night with Gianna","tokens":["Create","an","event","every","Monday","night","with","Gianna"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I am not able to process recurring events right now.","tokens":["I","am","not","able","to","process","recurring","events","right","now","."]},"tags":{"original_lispress":"(FenceRecurring)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dinner\")) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"sunny\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"mia\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"sunny\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"mia\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"put dinner with sunny and mia","tokens":["put","dinner","with","sunny","and","mia"]},"agent_utterance":{"described_entities":["entity@1459783662"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"sunny\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"mia\"))))))) :subject (?= #(String \"dinner\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventAllDayOnDate (^(Event) EmptyStructConstraint) (ClosestDayOfWeek (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (Wednesday))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :date ^Date (ClosestDayOfWeek :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :dow ^DayOfWeek (Wednesday))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Make it all day Wednesday.","tokens":["Make","it","all","day","Wednesday","."]},"agent_utterance":{"described_entities":["entity@1492036278"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventAllDayOnDate :date (ClosestDayOfWeek :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :dow #(DayOfWeek \"WEDNESDAY\")) :event (Constraint[Event])))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?= \"Dinner Party\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Dinner Party\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Yes, but change the subject to Dinner Party.","tokens":["Yes",",","but","change","the","subject","to","Dinner","Party","."]},"agent_utterance":{"described_entities":["entity@1492036278"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (update (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event]))) #(Path \"subject\") #(String \"Dinner Party\")))","do-not-train":""}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.isAllDay_? (?= true)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.isAllDay_? :obj ^(Constraint Boolean) (^(Boolean) ?= :reference ^Boolean true)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":4,"user_utterance":{"original_text":"It should be an all day event.","tokens":["It","should","be","an","all","day","event","."]},"agent_utterance":{"described_entities":["entity@1492036278"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (update (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event]))) #(Path \"isAllDay\") #(Boolean true)))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"569ca31d-cbcf-4789-bd6e-da284a2d85ae","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ann\")))))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ann\")))))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Cancel the meeting with Ann's boss","tokens":["Cancel","the","meeting","with","Ann","'s","boss"]},"agent_utterance":{"described_entities":["entity@1852687330"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ann\")))))))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 2L)))) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Emmanuel\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Anderson\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 2L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Emmanuel\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Anderson\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I want to meet with Emmanuel and Anderson 2 pm at Friday.","tokens":["I","want","to","meet","with","Emmanuel","and","Anderson","2","pm","at","Friday","."]},"agent_utterance":{"described_entities":["entity@2107738664"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Emmanuel\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Anderson\"))))))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 2))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"its great thanks","tokens":["its","great","thanks"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"that's perfect","tokens":["that","'s","perfect"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Emmanuel\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Anderson\"))))))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ann\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Emmanuel\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Anderson\"))))))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ann\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Add Ann to my meeting with Emmanuel and Anderson","tokens":["Add","Ann","to","my","meeting","with","Emmanuel","and","Anderson"]},"agent_utterance":{"described_entities":["entity@1890394572"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Emmanuel\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Anderson\"))))))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ann\"))))))))))"}}],"tags":{}}
{"dialogue_id":"ac0309f6-a48c-40f1-b8b6-35bc6510e97f","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"put a meeting with my driver tomorrow","tokens":["put","a","meeting","with","my","driver","tomorrow"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}}],"tags":{}}
{"dialogue_id":"98f17973-f1cc-4c31-8a6b-7c6b0f2bd0af","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Monday)) (Event.subject_? (?~= \"team meeting\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"team meeting\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Delete the team meeting on Monday.","tokens":["Delete","the","team","meeting","on","Monday","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that from your calendar.","tokens":["I","'ve","deleted","that","from","your","calendar","."]},"tags":{"do-not-train":"","original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event] :subject (?~= #(String \"team meeting\")))))))))))"}}],"tags":{}}
{"dialogue_id":"3517450e-0d96-45de-a9db-59b0c5d19337","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (NextWeekList))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NextWeekList))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you tell me what appointments I have next week?","tokens":["Can","you","tell","me","what","appointments","I","have","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have 2 events on your calendar. Your \"ballet\" is on Tuesday the 22nd from 8:00 to 8:30 PM.","tokens":["You","have","2","events","on","your","calendar",".","Your","\"","ballet","\"","is","on","Tuesday","the","22","nd","from","8",":","00","to","8",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (NextWeekList))))"}},{"lispress":"(Yield (Execute (refer (cursorNext (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) cursorNext :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What is the other one?","tokens":["What","is","the","other","one","?"]},"agent_utterance":{"described_entities":[],"original_text":"Last is a \"rehearsal\" on Wednesday the 23rd from 4:30 to 5:00 PM.","tokens":["Last","is","a","\"","rehearsal","\"","on","Wednesday","the","23","rd","from","4",":","30","to","5",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (refer (cursorNext (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I think both should be about 90 minutes long.","tokens":["I","think","both","should","be","about","90","minutes","long","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}}],"tags":{}}
{"dialogue_id":"6d6dbca2-33e1-4814-9032-f094997c0f0b","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Tuesday)) (NumberAM 11L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Larry\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :time ^Time (NumberAM :number ^Long 11L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Larry\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create meeting with Larry at 11am Tuesday.","tokens":["Create","meeting","with","Larry","at","11","am","Tuesday","."]},"agent_utterance":{"described_entities":["entity@1945146416"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Larry\")))))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :time (NumberAM :number #(Number 11))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Looks great.","tokens":["Looks","great","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"sam\")))) (EventDuringRange (^(Event) EmptyStructConstraint) (NextWeekList)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"sam\")))) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NextWeekList)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have any meeting next week with sam?","tokens":["Do","I","have","any","meeting","next","week","with","sam","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with sam next week.","tokens":["No",",","I","did","n't","find","any","events","with","sam","next","week","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"sam\"))) :nonEmptyBase (EventDuringRange :event (Constraint[Event]) :range (NextWeekList)))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Wednesday))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"sam\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Wednesday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"sam\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"add a meeting with sam on Wednesday","tokens":["add","a","meeting","with","sam","on","Wednesday"]},"agent_utterance":{"described_entities":["entity@1944354703"],"original_text":"Here are some times when you and sam are free.","tokens":["Here","are","some","times","when","you","and","sam","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"sam\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"WEDNESDAY\"))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent (BottomResult) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long (BottomResult) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"The bottom one please.","tokens":["The","bottom","one","please","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index (BottomResult) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"805a96d9-5732-42ca-b6c8-9082902f5419","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"dental appointment\"))))))) (Event.start_? (DateTime.time_? (?= (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dental appointment\"))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you change my dental appointment tomorrow to start at 4 pm","tokens":["Can","you","change","my","dental","appointment","tomorrow","to","start","at","4","pm"]},"agent_utterance":{"described_entities":["entity@2063574532"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"dental appointment\")))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"dental appointment\" to be.","tokens":["I","'ve","changed","\"","dental","appointment","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"2f9cce96-6581-4c8e-a7ca-62db1fe9177b","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"performance appraisal process\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberAM 8L))))) (Event.attendees_? (AttendeeListHasRecipient (FindManager (toRecipient (CurrentUser)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"performance appraisal process\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberAM :number ^Long 8L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (toRecipient :person ^Person (CurrentUser)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need a meeting to talk about the performance appraisal process with my boss at 8am on Monday","tokens":["I","need","a","meeting","to","talk","about","the","performance","appraisal","process","with","my","boss","at","8","am","on","Monday"]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I could not find your manager.","tokens":["I","could","not","find","your","manager","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (toRecipient (CurrentUser)))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"performance appraisal process\"))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Mary\")))) (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 9L)) (^(Event) EmptyStructConstraint)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Mary\")))) :c2 ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 9L)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have anything on Friday at 9pm with my boss, Mary?","tokens":["Do","I","have","anything","on","Friday","at","9","pm","with","my","boss",",","Mary","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with Mary on Friday at 9:00 PM.","tokens":["No",",","I","did","n't","find","any","events","with","Mary","on","Friday","at","9",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Mary\"))) :nonEmptyBase (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 9))) :event (Constraint[Event])))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (MD 11L (July)) (NumberPM 10L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"mary\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 11L :month ^Month (July)) :time ^Time (NumberPM :number ^Long 10L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"mary\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you create a new event with mary on july 11th at 10pm?","tokens":["Can","you","create","a","new","event","with","mary","on","july","11","th","at","10","pm","?"]},"agent_utterance":{"described_entities":["entity@230348212"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"mary\")))))) :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 11) :month #(Month \"JULY\")) :time (NumberPM :number #(Number 10.0))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"It should be an hour long","tokens":["It","should","be","an","hour","long"]},"agent_utterance":{"described_entities":["entity@114538436"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 1)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"That looks good to me.","tokens":["That","looks","good","to","me","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"b584b1da-7193-4164-a051-acf7b6e7a8fe","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (Event.subject_? (?~= \"doctor's appointment\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctor's appointment\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What time is my doctor's appointment next Tuesday?","tokens":["What","time","is","my","doctor","'s","appointment","next","Tuesday","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event \"doctor's appointment\" is on Tuesday the 6th at 9:00 AM.","tokens":["The","event","\"","doctor","'s","appointment","\"","is","on","Tuesday","the","6","th","at","9",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event] :subject (?~= #(String \"doctor's appointment\")))))))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"change doctor's appointment at aug 7","tokens":["change","doctor","'s","appointment","at","aug","7"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"put meeting with doctor on aug 7","tokens":["put","meeting","with","doctor","on","aug","7"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book. Please use a full name and try again.","tokens":["I","can","only","look","up","names","in","your","address","book",".","Please","use","a","full","name","and","try","again","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dr. James\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dr. James\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add Dr. James to this event","tokens":["Add","Dr.","James","to","this","event"]},"agent_utterance":{"described_entities":["entity@1718466815"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dr. James\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"that looks good","tokens":["that","looks","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"doctor's appointment\" to be Dr. James.","tokens":["I","'ve","changed","\"","doctor","'s","appointment","\"","to","be","Dr.","James","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"5491f8b1-7330-4d6d-800d-2711125532af","turns":[{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"goodbye","tokens":["goodbye"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"farewell","tokens":["farewell"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I hope you enjoyed the shpw","tokens":["I","hope","you","enjoyed","the","shpw"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Give me some pictures of Emily Wilson. She looks like a fox","tokens":["Give","me","some","pictures","of","Emily","Wilson",".","She","looks","like","a","fox"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":4,"user_utterance":{"original_text":"come on, don't hold out on me","tokens":["come","on",",","do","n't","hold","out","on","me"]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"w0w","tokens":["w0","w"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Emily Wilson\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Emily Wilson\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"set up a meeting with Emily Wilson","tokens":["set","up","a","meeting","with","Emily","Wilson"]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Emily Wilson in your address book.","tokens":["I","did","n't","find","anyone","named","Emily","Wilson","in","your","address","book","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Emily Wilson\"))))))))))"}},{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"gj0joi4na;ereajfrbgs;uoerwijgtusoiawkrajgtsjarepjgtjaresjgjgtre","tokens":["gj0","joi4","na;ereajfrbgs;uoerwijgtusoiawkrajgtsjarepjgtjaresjgjgtre"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)"}},{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":8,"user_utterance":{"original_text":"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","tokens":["fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"b4c817cf-3db1-4cc2-9c6e-ec844cd28208","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Saturday)) (HourMinuteAm 8L 25L)) (^(Event) EmptyStructConstraint)))))) (Event.start_? (DateTime.time_? (?= (HourMinuteAm 9L 45L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (HourMinuteAm :hours ^Long 8L :minutes ^Long 25L)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteAm :hours ^Long 9L :minutes ^Long 45L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please update my 8.25 am appointment on saturday to start at 9.45 am","tokens":["Please","update","my","8",".","25","am","appointment","on","saturday","to","start","at","9",".","45","am"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events on Saturday at 8:25 AM.","tokens":["I","did","n't","find","any","events","on","Saturday","at","8",":","25","AM","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (HourMinuteAm :hours #(Number 8) :minutes #(Number 25))) :event (Constraint[Event])))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteAm :hours #(Number 9) :minutes #(Number 45))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (HourMinuteAm 9L 45L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (HourMinuteAm :hours ^Long 9L :minutes ^Long 45L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Really? Oh well, create an appointment on saturday for 9.45 am please","tokens":["Really","?","Oh","well",",","create","an","appointment","on","saturday","for","9",".","45","am","please"]},"agent_utterance":{"described_entities":["entity@1587811270"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (HourMinuteAm :hours #(Number 9) :minutes #(Number 45))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 3))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 3))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"extend the meeting to 3 hours","tokens":["extend","the","meeting","to","3","hours"]},"agent_utterance":{"described_entities":["entity@1116836236"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 3)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"yes, make it","tokens":["yes",",","make","it"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"c960770e-92ad-44b6-abd4-ba3caf37c44a","turns":[{"lispress":"(Yield (WillRain (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (ThisWeekend)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (ThisWeekend)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hello, Is it supposed to rain this weekend?","tokens":["Hello",",","Is","it","supposed","to","rain","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (ThisWeekend)))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (temperature) (Execute (refer (extensionConstraint (^(WeatherTable) AlwaysTrueConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Temperature) Yield :output ^Temperature (^(Temperature) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Temperature) (temperature) :table ^WeatherTable (^(WeatherTable) Execute :intension ^(CalflowIntension WeatherTable) (^(WeatherTable) refer :constraint ^(Constraint (CalflowIntension WeatherTable)) (^(WeatherTable) extensionConstraint :constraint ^(Constraint WeatherTable) (^(WeatherTable) AlwaysTrueConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you tell me what the temperature will be?","tokens":["Can","you","tell","me","what","the","temperature","will","be","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's 0.00 °F.","tokens":["It","'s","0",".","00","°","F","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"temperature\") :quantifier #(WeatherQuantifier \"Summarize\") :table (Execute :intension (refer (extensionConstraint (AlwaysTrueConstraint[WeatherTable]))))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (humidity) (Execute (refer (extensionConstraint (^(WeatherTable) AlwaysTrueConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dimensionless) Yield :output ^Dimensionless (^(Dimensionless) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Dimensionless) (humidity) :table ^WeatherTable (^(WeatherTable) Execute :intension ^(CalflowIntension WeatherTable) (^(WeatherTable) refer :constraint ^(Constraint (CalflowIntension WeatherTable)) (^(WeatherTable) extensionConstraint :constraint ^(Constraint WeatherTable) (^(WeatherTable) AlwaysTrueConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you also tell me the humidity?","tokens":["Can","you","also","tell","me","the","humidity","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's 77.15 %.","tokens":["It","'s","77",".","15","%","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"humidity\") :quantifier #(WeatherQuantifier \"Summarize\") :table (Execute :intension (refer (extensionConstraint (AlwaysTrueConstraint[WeatherTable]))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"ok, thanks anyways.","tokens":["ok",",","thanks","anyways","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"334d6ca0-158f-45af-a6db-68321ac7bbd5","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"doctors appointment\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctors appointment\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what time is my doctors appointment?","tokens":["what","time","is","my","doctors","appointment","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"doctors appointment\" on your calendar after right now.","tokens":["I","did","n't","find","any","events","named","\"","doctors","appointment","\"","on","your","calendar","after","right","now","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"doctors appointment\"))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.subject_? (?= \"doctors appointment\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"doctors appointment\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"schedule a doctors appointment.","tokens":["schedule","a","doctors","appointment","."]},"agent_utterance":{"described_entities":["entity@675984616"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :subject (?= #(String \"doctors appointment\"))))))"}}],"tags":{}}
{"dialogue_id":"793af1a9-3368-4463-be42-21050efa4276","turns":[{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Show me as working elsewhere all day Monday","tokens":["Show","me","as","working","elsewhere","all","day","Monday"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"6fb93beb-43b6-4ab7-bcfa-37cc512ab77e","turns":[{"lispress":"(FenceTriviaQa)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceTriviaQa)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"when will summer begin?","tokens":["when","will","summer","begin","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I don't know the answer to that.","tokens":["I","do","n't","know","the","answer","to","that","."]},"tags":{"original_lispress":"(FenceTriviaQa)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeekend))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeekend))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"actually, what do I have this weekned?","tokens":["actually",",","what","do","I","have","this","weekned","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 event this weekend. It's \"brunch\" on Sunday the 14th from 11:00 AM to 1:00 PM.","tokens":["I","found","1","event","this","weekend",".","It","'s","\"","brunch","\"","on","Sunday","the","14","th","from","11",":","00","AM","to","1",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (ThisWeekend))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"brunch\")))))) (Event.start_? (DateTime.time_? (?= (HourMinuteAm 11L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"brunch\")))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteAm :hours ^Long 11L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"change brunch to start at 11:30 am","tokens":["change","brunch","to","start","at","11",":","30","am"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"brunch\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","brunch","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"brunch\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteAm :hours #(Number 11) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"brunch\")))))) (Event.start_? (DateTime.time_? (?= (HourMinuteAm 11L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"brunch\")))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteAm :hours ^Long 11L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"change brunch to 11:30 am","tokens":["change","brunch","to","11",":","30","am"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"brunch\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","brunch","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"brunch\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteAm :hours #(Number 11) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"brunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (HourMinuteAm 11L 30L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"brunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (HourMinuteAm :hours ^Long 11L :minutes ^Long 30L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Schedule a brunch for 11:30 am tomorrow.","tokens":["Schedule","a","brunch","for","11",":","30","am","tomorrow","."]},"agent_utterance":{"described_entities":["entity@1222158101"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (HourMinuteAm :hours #(Number 11) :minutes #(Number 30.0)))) :subject (?= #(String \"brunch\"))))))"}}],"tags":{}}
{"dialogue_id":"52249af8-d0c8-4de6-a672-24e0e48db39f","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Tuesday))))) (Event.attendees_? (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"alice\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Tuesday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"alice\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"i want to meet alice's manager tuesday","tokens":["i","want","to","meet","alice","'s","manager","tuesday"]},"agent_utterance":{"described_entities":["entity@407414502"],"original_text":"Here are some times when you and Dan Schoffel are free.","tokens":["Here","are","some","times","when","you","and","Dan","Schoffel","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"alice\"))))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"TUESDAY\"))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"cancel the meeting","tokens":["cancel","the","meeting"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTime.date_? (?= (Tomorrow)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Make a appointment tomorrow","tokens":["Make","a","appointment","tomorrow"]},"agent_utterance":{"described_entities":["entity@1109152001"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (Tomorrow)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberAM 10L)))) (Event.end_? (DateTime.time_? (?= (NumberAM 10L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 10L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 10L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"the appointment 10.00 am -10","tokens":["the","appointment","10",".","00","am","-10"]},"agent_utterance":{"described_entities":["entity@1228713400"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberAM :number #(Number 10.0)))) :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 10.0))))))))"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Let me get back to you in a minute.","tokens":["Let","me","get","back","to","you","in","a","minute","."]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"that looks perfect, thank you","tokens":["that","looks","perfect",",","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (NextTime (NumberPM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Do the one at 1 pm.","tokens":["Do","the","one","at","1","pm","."]},"agent_utterance":{"described_entities":["entity@755690159"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberPM :number #(Number 1))))))))"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"Hold on one second.","tokens":["Hold","on","one","second","."]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}}],"tags":{}}
{"dialogue_id":"ea561107-4d72-4d95-b443-1e4624912779","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"run\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 8L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"run\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 8L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please schedule a run on my calendar tomorrow at 8:00am.","tokens":["Please","schedule","a","run","on","my","calendar","tomorrow","at","8",":","00","am","."]},"agent_utterance":{"described_entities":["entity@193206716"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"run\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (addDurations (Execute (refer (extensionConstraint (^(Duration) AlwaysTrueConstraint)))) (toMinutes 30)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (^(Duration) Execute :intension ^(CalflowIntension Duration) (^(Duration) refer :constraint ^(Constraint (CalflowIntension Duration)) (^(Duration) extensionConstraint :constraint ^(Constraint Duration) (^(Duration) AlwaysTrueConstraint)))) :y ^Duration (toMinutes :minutes ^Number 30)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"no, add 30 minutes","tokens":["no",",","add","30","minutes"]},"agent_utterance":{"described_entities":["entity@2054491310"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (addDurations (Execute :intension (refer (extensionConstraint (AlwaysTrueConstraint[Duration])))) (toMinutes #(Number 30.0))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"that is not what i wanted","tokens":["that","is","not","what","i","wanted"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberAM 8L)) (Event.subject_? (?~= \"run\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberAM :number ^Long 8L)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"run\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Cancel run on Friday at 8:00 am.","tokens":["Cancel","run","on","Friday","at","8",":","00","am","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"run\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","run","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberAM :number #(Number 8))) :event (Constraint[Event] :subject (?~= #(String \"run\")))))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"friendship circle\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"friendship circle\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"cancel friendship circle next Saturday","tokens":["cancel","friendship","circle","next","Saturday"]},"agent_utterance":{"described_entities":["entity@1380186886"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"friendship circle\")))))))))))"}}],"tags":{}}
{"dialogue_id":"e2ef9d8d-6df6-4eaa-ba8f-387e29ae39db","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Movie Night\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 8L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Harold\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Movie Night\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 8L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Harold\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I want a Movie Night scheduled for tomorrow at 8 pm with Harold.","tokens":["I","want","a","Movie","Night","scheduled","for","tomorrow","at","8","pm","with","Harold","."]},"agent_utterance":{"described_entities":["entity@1033904659"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Harold\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 8)))) :subject (?= #(String \"Movie Night\"))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Harold\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(Recipient) Yield :output ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Harold\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Looks good. Who is Harold's manager?","tokens":["Looks","good",".","Who","is","Harold","'s","manager","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Harold's manager is Dan Schoffel.","tokens":["I","'ve","put","that","on","your","calendar",".","Harold","'s","manager","is","Dan","Schoffel","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Harold\"))))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"movie night\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"movie night\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"cancel this movie night","tokens":["cancel","this","movie","night"]},"agent_utterance":{"described_entities":["entity@41316610"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"movie night\"))))))))))"}}],"tags":{}}
{"dialogue_id":"d0793c54-1815-4320-aa72-4ddf535b068c","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"concert\")) (Event.start_? (DateTime.date_? (?= (MD 6L (June)))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Stephanie\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"concert\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 6L :month ^Month (June)))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Stephanie\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add concert with Stephanie to my calendar on June 6th","tokens":["Add","concert","with","Stephanie","to","my","calendar","on","June","6","th"]},"agent_utterance":{"described_entities":["entity@946153047"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Stephanie\")))))) :start (Constraint[DateTime] :date (?= (MD :day #(Number 6) :month #(Month \"JUNE\")))) :subject (?= #(String \"concert\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (HourMinutePm 4L 30L)))) (Event.end_? (DateTime.time_? (?= (NumberPM 7L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 4L :minutes ^Long 30L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 7L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Set the time for 4:30PM to 7PM","tokens":["Set","the","time","for","4",":","30","PM","to","7","PM"]},"agent_utterance":{"described_entities":["entity@1615157508"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 7)))) :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 4) :minutes #(Number 30.0))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"No I don't like it","tokens":["No","I","do","n't","like","it"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Concert Rehearsal practice\")) (Event.start_? (DateTime.date_? (?= (Tomorrow))))) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alicia\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Brad\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"John\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Concert Rehearsal practice\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alicia\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Brad\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"John\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Schedule a Concert Rehearsal practice tomorrow with Alicia, Brad, and John.","tokens":["Schedule","a","Concert","Rehearsal","practice","tomorrow","with","Alicia",",","Brad",",","and","John","."]},"agent_utterance":{"described_entities":["entity@1141937070"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alicia\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Brad\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"John\"))))))) :start (Constraint[DateTime] :date (?= (Tomorrow))) :subject (?= #(String \"Concert Rehearsal practice\"))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"No, that's not it!","tokens":["No",",","that","'s","not","it","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}}],"tags":{}}
{"dialogue_id":"108d6554-2bf0-4212-adc7-33c3ad34f865","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alan\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alan\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my meeting on Saturday with Alan?","tokens":["When","is","my","meeting","on","Saturday","with","Alan","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event with Alan Smith on Saturday is at 4:00 PM.","tokens":["The","event","with","Alan","Smith","on","Saturday","is","at","4",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alan\"))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"drive down to San Jose to look at an SUV\")) (Event.start_? (?= (DateAtTimeWithDefaults (adjustByPeriod (DateTime.date (Event.start (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))) (toDays 1)) (NumberAM 11L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"drive down to San Jose to look at an SUV\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (adjustByPeriod :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :period ^Period (toDays :days ^Number 1)) :time ^Time (NumberAM :number ^Long 11L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Okay, then the day after that, can you put down that I need to drive down to San Jose to look at an SUV at 11am?","tokens":["Okay",",","then","the","day","after","that",",","can","you","put","down","that","I","need","to","drive","down","to","San","Jose","to","look","at","an","SUV","at","11","am","?"]},"agent_utterance":{"described_entities":["entity@1859697058"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (adjustByPeriod (:date (:start (Execute :intension (refer (extensionConstraint (Constraint[Event])))))) (toDays #(Number 1))) :time (NumberAM :number #(Number 11)))) :subject (?= #(String \"drive down to San Jose to look at an SUV\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"It looks good to me","tokens":["It","looks","good","to","me"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"4c1807c2-4820-4f3b-9284-65e3e8c05378","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch meeting\")) (Event.start_? (DateTime.date_? (FullYearofYear (NextYear))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (FullYearofYear :year ^Year (NextYear))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Put me in a lunch meeting next year","tokens":["Put","me","in","a","lunch","meeting","next","year"]},"agent_utterance":{"described_entities":["entity@170452932"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (FullYearofYear :year (NextYear))) :subject (?= #(String \"lunch meeting\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar on January 4, 2021 from 10:00 AM to 10:30 AM.","tokens":["I","'ve","put","that","on","your","calendar","on","January","4",",","2021","from","10",":","00","AM","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"concert\")) (Event.start_? (DateTime.date_? (FullYearofYear (Year.apply 2024L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"concert\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (FullYearofYear :year ^Year (Year.apply :value ^Long 2024L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"i need a concert for 2024","tokens":["i","need","a","concert","for","2024"]},"agent_utterance":{"described_entities":["entity@834643484"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (FullYearofYear :year #(Number 2024))) :subject (?= #(String \"concert\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"The first option works best","tokens":["The","first","option","works","best"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (FullYearofYear (Year.apply 2021L))))))) (Event.start_? (DateTime.date_? (FullYearofYear (Year.apply 2022L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullYearofYear :year ^Year (Year.apply :value ^Long 2021L))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (FullYearofYear :year ^Year (Year.apply :value ^Long 2022L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Postpone my 2021 all hands meeting to 2022","tokens":["Postpone","my","2021","all","hands","meeting","to","2022"]},"agent_utterance":{"described_entities":["entity@314735094"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (FullYearofYear :year #(Number 2021))))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (FullYearofYear :year #(Number 2022)))))))"}}],"tags":{}}
{"dialogue_id":"ea85fc95-d20e-460e-ba0f-2d9ce648428f","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventBetweenEvents (^(Event) EmptyStructConstraint) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Sally's birthday party\"))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Jacob's basketball game\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBetweenEvents :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Sally's birthday party\"))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Jacob's basketball game\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Is there anything I have to do between Sally's birthday party and Jacob's basketball game?","tokens":["Is","there","anything","I","have","to","do","between","Sally","'s","birthday","party","and","Jacob","'s","basketball","game","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 2 events between Tuesday the 10th at 12:30 PM and Friday the 20th at 5:00 PM. The first is \"Broker's Call\" on Sunday the 15th from 10:00 to 10:30 AM.","tokens":["Yes",",","I","found","2","events","between","Tuesday","the","10","th","at","12",":","30","PM","and","Friday","the","20","th","at","5",":","00","PM",".","The","first","is","\"","Broker","'s","Call","\"","on","Sunday","the","15","th","from","10",":","00","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventBetweenEvents :event (Constraint[Event]) :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Sally's birthday party\")))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Jacob's basketball game\")))))))))) #(Number 0)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (Event.start_? (DateTime.date_? (?= (MD 19L (December))))))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.date_? (?= (ClosestMonthDayToDate (Day.apply 20L) (December) (DateTime.date (Event.start x0))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 19L :month ^Month (December))))))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (ClosestMonthDayToDate :day ^Day (Day.apply :value ^Long 20L) :month ^Month (December) :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Change the Date from 19 Dec to 20 Dec","tokens":["Change","the","Date","from","19","Dec","to","20","Dec"]},"agent_utterance":{"described_entities":["entity@106149448"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 19) :month #(Month \"DECEMBER\"))))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (ClosestMonthDayToDate :date (:date (:start x0)) :day #(Number 20.0) :month #(Month \"DECEMBER\")))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Investments Meeting\" to be.","tokens":["I","'ve","changed","\"","Investments","Meeting","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (MD 11L (December))) (Yield (FindEventWrapperWithDefaults (EventBetweenEvents (^(Event) EmptyStructConstraint) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate x0 (Event.subject_? (?~= \"going to sleep\")))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate x0 (Event.subject_? (?~= \"waking up\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (MD :day ^Long 11L :month ^Month (December))) ^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBetweenEvents :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date x0 :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"going to sleep\")))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date x0 :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"waking up\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"What's on my schedule between going to sleep and waking up on December 11?","tokens":["What","'s","on","my","schedule","between","going","to","sleep","and","waking","up","on","December","11","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 2 events tomorrow between 6:30 AM and 11:00 PM.","tokens":["I","found","2","events","tomorrow","between","6",":","30","AM","and","11",":","00","PM","."]},"tags":{"original_lispress":"(let (x0 (MD :day #(Number 11) :month #(Month \"DECEMBER\"))) (Yield :output (FindEventWrapperWithDefaults :constraint (EventBetweenEvents :event (Constraint[Event]) :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date x0 :event (Constraint[Event] :subject (?~= #(String \"going to sleep\"))))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date x0 :event (Constraint[Event] :subject (?~= #(String \"waking up\")))))))))))"}}],"tags":{}}
{"dialogue_id":"e9a74c85-9b4c-4ca1-8cd2-39746b39d6d5","turns":[{"lispress":"(Yield (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"doctor\")) (FullMonthofLastMonth))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Long) Yield :output ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctor\")) :range ^(Constraint Date) (FullMonthofLastMonth))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you tell me how many times I went to the doctor last month?","tokens":["Can","you","tell","me","how","many","times","I","went","to","the","doctor","last","month","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event matching \"doctor\" last month. It was an \"Doctor's Appointment\".","tokens":["I","found","one","event","matching","\"","doctor","\"","last","month",".","It","was","an","\"","Doctor","'s","Appointment","\"","."]},"tags":{"original_lispress":"(Yield :output (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"doctor\"))) :range (FullMonthofLastMonth))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I'd like to cancel that.","tokens":["I","'d","like","to","cancel","that","."]},"agent_utterance":{"described_entities":["entity@1598007193"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Absolutely.","tokens":["Absolutely","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Thanks.","tokens":["Thanks","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"46b88ec8-cd53-49d2-8627-2550be5c318c","turns":[{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Haru in Reno\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Haru in Reno\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Does Haru in Reno serve a full bar?","tokens":["Does","Haru","in","Reno","serve","a","full","bar","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Haru in Reno\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Sweet Tooth Cafe in Skagway\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Sweet Tooth Cafe in Skagway\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Check if Sweet Tooth Cafe in Skagway has a bar please","tokens":["Check","if","Sweet","Tooth","Cafe","in","Skagway","has","a","bar","please"]},"agent_utterance":{"described_entities":["entity@1126513850"],"original_text":"I'm unable to find whether Sweet Tooth Cafe has a full bar. You'll have to contact them.","tokens":["I","'m","unable","to","find","whether","Sweet","Tooth","Cafe","has","a","full","bar",".","You","'ll","have","to","contact","them","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Sweet Tooth Cafe in Skagway\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Hy-Yee in Skiatook\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Hy-Yee in Skiatook\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Does Hy-Yee in Skiatook have a full bar?","tokens":["Does","Hy","-","Yee","in","Skiatook","have","a","full","bar","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Hy-Yee in Skiatook\"))))))"}}],"tags":{}}
{"dialogue_id":"c8a7ccec-7f56-439a-b95f-084ffcc71103","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake Farm\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake Farm\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"set up a meeting with my Jake Farm's manager","tokens":["set","up","a","meeting","with","my","Jake","Farm","'s","manager"]},"agent_utterance":{"described_entities":["entity@1051217187"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake Farm\")))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The second one is better thanks","tokens":["The","second","one","is","better","thanks"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar tomorrow from 10:00 to 10:30 AM.","tokens":["I","'ve","put","that","on","your","calendar","tomorrow","from","10",":","00","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\")))))))))))) (Event.end_? (DateTime.time_? (?= (HourMinuteAm 11L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\")))))))))))) :update ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteAm :hours ^Long 11L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Let's make meeting with Jake's manager until 11:30AM.","tokens":["Let","'s","make","meeting","with","Jake","'s","manager","until","11",":","30","AM","."]},"agent_utterance":{"described_entities":["entity@544114023"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\")))))))))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (HourMinuteAm :hours #(Number 11) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"dd9c189e-46d9-4016-b29d-ff53eb5b1804","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.subject_? (?~= \"traveling\"))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"traveling\"))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"On what days am I traveling?","tokens":["On","what","days","am","I","traveling","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events matching \"traveling\".","tokens":["I","did","n't","find","any","events","matching","\"","traveling","\"","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"traveling\")))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayOnDate (Event.subject_? (?= \"traveling\")) (NextDOW (Thursday))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"traveling\")) :date ^Date (NextDOW :dow ^DayOfWeek (Thursday))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Add traveling to Thursday all day","tokens":["Add","traveling","to","Thursday","all","day"]},"agent_utterance":{"described_entities":["entity@1220528696"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayOnDate :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :event (Constraint[Event] :subject (?= #(String \"traveling\")))))))"}}],"tags":{}}
{"dialogue_id":"ba434f8f-eb94-4b79-a6e6-0878bd04c8e9","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"lunch\")) (ThisWeek))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :range ^(Constraint Date) (ThisWeek))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have any lunch plans this week?","tokens":["Do","I","have","any","lunch","plans","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event this week. It's \"Lunch\" tomorrow from 2:00 to 2:30 PM.","tokens":["Yes",",","I","found","one","event","this","week",".","It","'s","\"","Lunch","\"","tomorrow","from","2",":","00","to","2",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"lunch\"))) :range (ThisWeek))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"61e27fd7-09f8-4fd9-9f65-0da6f4d29b29","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Wednesday)) (NumberPM 12L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (NumberPM :number ^Long 12L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"set up a lunch for 12pm on wednesday.","tokens":["set","up","a","lunch","for","12","pm","on","wednesday","."]},"agent_utterance":{"described_entities":["entity@1291193760"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (NumberPM :number #(Number 12)))) :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"It's not my diet","tokens":["It","'s","not","my","diet"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Veal Dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Tuesday)) (NumberPM 9L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Veal Dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :time ^Time (NumberPM :number ^Long 9L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Schedule Veal Dinner for Tuesday at 9 pm.","tokens":["Schedule","Veal","Dinner","for","Tuesday","at","9","pm","."]},"agent_utterance":{"described_entities":["entity@436053919"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :time (NumberPM :number #(Number 9)))) :subject (?= #(String \"Veal Dinner\"))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"veal pick up\")) (Event.end_? (?= (Event.start (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"veal pick up\")) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Event.start :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"have veal pick up before this event","tokens":["have","veal","pick","up","before","this","event"]},"agent_utterance":{"described_entities":["entity@93416926"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (:start (Execute :intension (refer (extensionConstraint (Constraint[Event])))))) :subject (?= #(String \"veal pick up\"))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"dinner plans\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Friday)))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"John\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner plans\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Friday)))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"John\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Make dinner plans with John for Friday.","tokens":["Make","dinner","plans","with","John","for","Friday","."]},"agent_utterance":{"described_entities":["entity@259372161"],"original_text":"Here are some times when you and John are free.","tokens":["Here","are","some","times","when","you","and","John","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"John\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"FRIDAY\")))) :subject (?= #(String \"dinner plans\"))))))"}}],"tags":{}}
{"dialogue_id":"55e558ea-27fa-49da-b44a-cb7fab8aa555","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What do I have tomorrow?","tokens":["What","do","I","have","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 5 events tomorrow.","tokens":["I","found","5","events","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath (BottomResult))) (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Event.start_? (DateTime.time_? (?= (HourMinutePm 1L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long (BottomResult))) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 1L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The last one will need to be moved to 1:30 PM.","tokens":["The","last","one","will","need","to","be","moved","to","1",":","30","PM","."]},"agent_utterance":{"described_entities":["entity@1636712447"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath (BottomResult)))) (extensionConstraint (Constraint[Event])))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 1) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That works.","tokens":["That","works","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with Boss\" to be at 1:30.","tokens":["I","'ve","changed","\"","Meeting","with","Boss","\"","to","be","at","1",":","30","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Thursday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What do I have planned on Thursday?","tokens":["What","do","I","have","planned","on","Thursday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 2 events tomorrow.","tokens":["I","found","2","events","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(let (x0 (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 2L)) (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (?= (adjustByPeriodDuration (Event.start x0) (PeriodDuration.apply (toDays 1)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 2L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.start :obj x0) :periodDuration ^PeriodDuration (PeriodDuration.apply :period ^Period (toDays :days ^Number 1)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I need to move the second option to the next day.","tokens":["I","need","to","move","the","second","option","to","the","next","day","."]},"agent_utterance":{"described_entities":["entity@1201778964"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 2)))) (extensionConstraint (Constraint[Event])))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (?= (adjustByPeriodDuration (:start x0) (PeriodDuration :period (toDays #(Number 1))))))))))"}}],"tags":{}}
{"dialogue_id":"3f68162f-4a06-4edb-90b4-a5153461db2e","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\")))))))) (Event.start_? (DateTime.date_? (?= (MD 20L (January))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\")))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 20L :month ^Month (January))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you push back my meeting with Kim to be on Jan 20th?","tokens":["Can","you","push","back","my","meeting","with","Kim","to","be","on","Jan","20","th","?"]},"agent_utterance":{"described_entities":["entity@545440373"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\")))))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 20.0) :month #(Month \"JANUARY\"))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.time_? (?= (NumberAM 11L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 11L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I also need the meeting to take place at 11AM instead.","tokens":["I","also","need","the","meeting","to","take","place","at","11","AM","instead","."]},"agent_utterance":{"described_entities":["entity@715795189"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 11))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.end_? (DateTime.time_? (?= (NumberAM 12L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 12L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I think it will last longer than this. Have it end at 12:00 AM.","tokens":["I","think","it","will","last","longer","than","this",".","Have","it","end","at","12",":","00","AM","."]},"agent_utterance":{"described_entities":["entity@1757302776"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberAM :number #(Number 12))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"cancel the meeting","tokens":["cancel","the","meeting"]},"agent_utterance":{"described_entities":["entity@739630507"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"nevermind don't cancel it, keep the changes","tokens":["nevermind","do","n't","cancel","it",",","keep","the","changes"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}}],"tags":{}}
{"dialogue_id":"e7e70301-c47c-4ed7-82d8-e96261e91e31","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add a lunh with my mom tomorrow","tokens":["Add","a","lunh","with","my","mom","tomorrow"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}}],"tags":{}}
{"dialogue_id":"1e19665e-ddd1-410f-87c3-49032da56f85","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"party planning meeting\")) (Event.start_? (DateTimeConstraint (Evening) (Tomorrow)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jan\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"party planning meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Evening) :date ^Date (Tomorrow)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jan\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add to the calendar a party planning meeting with Jan tomorrow evening.","tokens":["Add","to","the","calendar","a","party","planning","meeting","with","Jan","tomorrow","evening","."]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Jan in your address book.","tokens":["I","did","n't","find","anyone","named","Jan","in","your","address","book","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jan\")))))) :start (DateTimeConstraint :constraint (Evening) :date (Tomorrow)) :subject (?= #(String \"party planning meeting\"))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Today) (^(Event) EmptyStructConstraint)) (Evening))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Evening))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have anything this evening?","tokens":["Do","I","have","anything","this","evening","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events this evening.","tokens":["No",",","I","did","n't","find","any","events","this","evening","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event])) :timeRange (Evening))))) #(Number 0)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"thank you","tokens":["thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"cdeb46d7-e023-4474-a107-fa2fdfdff8be","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Thursday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is happening on Thursday?","tokens":["What","is","happening","on","Thursday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 3 events on Thursday.","tokens":["I","found","3","events","on","Thursday","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 1L)) (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Event.subject_? (?= \"Egg White Omelet Breakfast\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 1L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Egg White Omelet Breakfast\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Change the first one to Egg White Omelet Breakfast.","tokens":["Change","the","first","one","to","Egg","White","Omelet","Breakfast","."]},"agent_utterance":{"described_entities":["entity@1540072918"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 1)))) (extensionConstraint (Constraint[Event])))))) :update (Constraint[Event] :subject (?= #(String \"Egg White Omelet Breakfast\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That is right.","tokens":["That","is","right","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Turkey Breakfast\" to be named \"Egg White Omelet Breakfast\".","tokens":["I","'ve","changed","\"","Turkey","Breakfast","\"","to","be","named","\"","Egg","White","Omelet","Breakfast","\"","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 3L)) (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Event.duration_? (?= (toHours 3))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 3L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 3))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Great, can you also have the third event last 3 hours.","tokens":["Great",",","can","you","also","have","the","third","event","last","3","hours","."]},"agent_utterance":{"described_entities":["entity@1107452978"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 3)))) (extensionConstraint (Constraint[Event])))))) :update (Constraint[Event] :duration (?= (toHours #(Number 3)))))))"}}],"tags":{}}
{"dialogue_id":"cee5b6a5-e403-4fce-84cc-16557b041f01","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi I need help with my calendar","tokens":["Hi","I","need","help","with","my","calendar"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\"))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\"))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Ok, do I have any upcoming events with Barack Obama?","tokens":["Ok",",","do","I","have","any","upcoming","events","with","Barack","Obama","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I found no events with Barack Obama.","tokens":["No",",","I","found","no","events","with","Barack","Obama","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"lunches\"))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunches\"))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Ok, do I have any lunches coming up?","tokens":["Ok",",","do","I","have","any","lunches","coming","up","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I found no events named \"lunches\".","tokens":["No",",","I","found","no","events","named","\"","lunches","\"","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"lunches\")))))) #(Number 0)))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Could you show me how to sync a friend?","tokens":["Could","you","show","me","how","to","sync","a","friend","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Ok","tokens":["Ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Can you show me how to add en event to my calendar","tokens":["Can","you","show","me","how","to","add","en","event","to","my","calendar"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.subject_? (?~= \"doctor's appointment\"))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctor's appointment\"))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"What about a doctor's appointment?","tokens":["What","about","a","doctor","'s","appointment","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here's what I found:","tokens":["Here","'s","what","I","found",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"doctor's appointment\")))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"Ok! Perfect","tokens":["Ok","!","Perfect"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":8,"user_utterance":{"original_text":"Yes I was wondering if I could send information about one of the events on my calendar to a friend","tokens":["Yes","I","was","wondering","if","I","could","send","information","about","one","of","the","events","on","my","calendar","to","a","friend"]},"agent_utterance":{"described_entities":[],"original_text":"Here's what I found:","tokens":["Here","'s","what","I","found",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event])))","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":9,"user_utterance":{"original_text":"That's perfect, thank you","tokens":["That","'s","perfect",",","thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":10,"user_utterance":{"original_text":"That's it!","tokens":["That","'s","it","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"8716ebac-c39c-42fc-a8a7-dd91f7d0cf46","turns":[{"lispress":"(FenceConferenceRoom)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceConferenceRoom)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I have a meeting with Greg on Monday at 1 pm lasting until 2 pm and that will be in conference room 2","tokens":["I","have","a","meeting","with","Greg","on","Monday","at","1","pm","lasting","until","2","pm","and","that","will","be","in","conference","room","2"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can't handle multiple conference rooms or requests for specific rooms.","tokens":["I","ca","n't","handle","multiple","conference","rooms","or","requests","for","specific","rooms","."]},"tags":{"original_lispress":"(FenceConferenceRoom)"}},{"lispress":"(FenceConferenceRoom)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceConferenceRoom)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I also have a meeting with Jim on Tuesday in Conference room 1 at 3 pm until 3:45 pm and I need to be shown as out of the office for that","tokens":["I","also","have","a","meeting","with","Jim","on","Tuesday","in","Conference","room","1","at","3","pm","until","3",":","45","pm","and","I","need","to","be","shown","as","out","of","the","office","for","that"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can't handle multiple conference rooms or requests for specific rooms.","tokens":["I","ca","n't","handle","multiple","conference","rooms","or","requests","for","specific","rooms","."]},"tags":{"original_lispress":"(FenceConferenceRoom)"}},{"lispress":"(FenceConferenceRoom)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceConferenceRoom)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What do I have in conference room 2 next week","tokens":["What","do","I","have","in","conference","room","2","next","week"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can't handle multiple conference rooms or requests for specific rooms.","tokens":["I","ca","n't","handle","multiple","conference","rooms","or","requests","for","specific","rooms","."]},"tags":{"original_lispress":"(FenceConferenceRoom)"}},{"lispress":"(FenceConferenceRoom)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceConferenceRoom)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What do I have that's not in conference room 2 next week","tokens":["What","do","I","have","that","'s","not","in","conference","room","2","next","week"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can't handle multiple conference rooms or requests for specific rooms.","tokens":["I","ca","n't","handle","multiple","conference","rooms","or","requests","for","specific","rooms","."]},"tags":{"original_lispress":"(FenceConferenceRoom)"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (?= (Execute (refer (extensionConstraint (^(DateTime) EmptyStructConstraint)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (^(DateTime) Execute :intension ^(CalflowIntension DateTime) (^(DateTime) refer :constraint ^(Constraint (CalflowIntension DateTime)) (^(DateTime) extensionConstraint :constraint ^(Constraint DateTime) (^(DateTime) EmptyStructConstraint)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"What's the weather going to be like at that time?","tokens":["What","'s","the","weather","going","to","be","like","at","that","time","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a temperature of about 0.00 °F today at 2:56 PM.","tokens":["It","will","be","clear","with","a","temperature","of","about","0",".","00","°","F","today","at","2",":","56","PM","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (?= (Execute :intension (refer (extensionConstraint (Constraint[DateTime])))))))"}}],"tags":{}}
{"dialogue_id":"e5726236-74d2-4985-baae-198a69372f60","turns":[{"lispress":"(FenceDateTime)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceDateTime)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What am I doing next time there's a full moon?","tokens":["What","am","I","doing","next","time","there","'s","a","full","moon","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry I can't help you with that yet.","tokens":["Sorry","I","ca","n't","help","you","with","that","yet","."]},"tags":{"original_lispress":"(FenceDateTime)"}}],"tags":{}}
{"dialogue_id":"4139c1a5-bb0f-4078-b2d8-152a5fe7daea","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"sleep in\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"sleep in\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When do I get to sleep in?","tokens":["When","do","I","get","to","sleep","in","?"]},"agent_utterance":{"described_entities":[],"original_text":"It starts tomorrow at 1:00 AM.","tokens":["It","starts","tomorrow","at","1",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"sleep in\"))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (HourMinuteAm 8L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteAm :hours ^Long 8L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Haha no, nope, change that to like 8.30","tokens":["Haha","no",",","nope",",","change","that","to","like","8",".","30"]},"agent_utterance":{"described_entities":["entity@534956796"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteAm :hours #(Number 8) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"better, yes","tokens":["better",",","yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"sleep in\" to be on your calendar.","tokens":["I","'ve","changed","\"","sleep","in","\"","to","be","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"3b5df9d3-8c10-41f9-898f-8f4a30f60e42","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"seats for 2\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Thursday)))))) (Event.location_? (?= (LocationKeyphrase.apply \"Hawaii\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"seats for 2\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Thursday)))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Hawaii\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I'd like to book seats for 2 to Hawaii this Thursday","tokens":["I","'d","like","to","book","seats","for","2","to","Hawaii","this","Thursday"]},"agent_utterance":{"described_entities":["entity@1375116613"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Hawaii\")) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"THURSDAY\")))) :subject (?= #(String \"seats for 2\"))))))"}}],"tags":{}}
{"dialogue_id":"19738329-92b7-4056-8db3-d6c07981ae04","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you tell me when my last meeting was with the CEO?","tokens":["Can","you","tell","me","when","my","last","meeting","was","with","the","CEO","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book. Please use a full name and try again.","tokens":["I","can","only","look","up","names","in","your","address","book",".","Please","use","a","full","name","and","try","again","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(Yield (Event.start (FindLastEvent (EventBeforeDateTime (Now) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jeff\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindLastEvent :constraint ^(Constraint Event) (EventBeforeDateTime :dateTime ^DateTime (Now) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jeff\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"When wa sthe last meeting with Jeff","tokens":["When","wa","sthe","last","meeting","with","Jeff"]},"agent_utterance":{"described_entities":[],"original_text":"The last with Jeff was on Tuesday the 20th at 7:00 PM.","tokens":["The","last","with","Jeff","was","on","Tuesday","the","20","th","at","7",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindLastEvent :constraint (EventBeforeDateTime :dateTime (Now) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jeff\"))))))))"}},{"lispress":"(FenceDateTime)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceDateTime)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Was the meting last week or this week?","tokens":["Was","the","meting","last","week","or","this","week","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry I can't help you with that yet.","tokens":["Sorry","I","ca","n't","help","you","with","that","yet","."]},"tags":{"original_lispress":"(FenceDateTime)"}},{"lispress":"(Yield (Event.start (FindLastEvent (EventBeforeDateTime (Now) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tom\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindLastEvent :constraint ^(Constraint Event) (EventBeforeDateTime :dateTime ^DateTime (Now) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tom\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"When did I last meet with Tom?","tokens":["When","did","I","last","meet","with","Tom","?"]},"agent_utterance":{"described_entities":[],"original_text":"The last event with Tom was on Monday at 9:00 AM.","tokens":["The","last","event","with","Tom","was","on","Monday","at","9",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindLastEvent :constraint (EventBeforeDateTime :dateTime (Now) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tom\"))))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Amy\")))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Amy\")))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Did I have anything with Amy that day?","tokens":["Did","I","have","anything","with","Amy","that","day","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with Amy on Monday.","tokens":["No",",","I","did","n't","find","any","events","with","Amy","on","Monday","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Amy\")))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"71734b3d-ed58-4c2f-813d-b1b75e5fd4f9","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.attendees_? (& (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Watts\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Watts\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Will I be seeing Kim, Jake, and Watts tomorrow?","tokens":["Will","I","be","seeing","Kim",",","Jake",",","and","Watts","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with Kim, Jake, and Watts tomorrow.","tokens":["No",",","I","did","n't","find","any","events","with","Kim",",","Jake",",","and","Watts","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Watts\"))))))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Please set up a meeting with Abby, Jake , and Kim","tokens":["Please","set","up","a","meeting","with","Abby",",","Jake",",","and","Kim"]},"agent_utterance":{"described_entities":["entity@1817522729"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\")))))))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"conference call\")) (Event.attendees_? (& (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Greg\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Peter\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Emily\"))))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"conference call\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Greg\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Peter\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Emily\"))))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The second one is fine. Cancel the conference call with Greg, Peter, and Emily","tokens":["The","second","one","is","fine",".","Cancel","the","conference","call","with","Greg",",","Peter",",","and","Emily"]},"agent_utterance":{"described_entities":["entity@1470225585"],"original_text":"I've put that on your calendar. __BREAK Is this what you want me to cancel?","tokens":["I","'ve","put","that","on","your","calendar",".","Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint))))) (Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Greg\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Peter\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Emily\")))) :subject (?~= #(String \"conference call\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"That is dope","tokens":["That","is","dope"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event matching \"conference call\" Greg, Peter, and Emily.","tokens":["I","'ve","deleted","your","event","matching","\"","conference","call","\"","Greg",",","Peter",",","and","Emily","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"10dee2fe-b768-4cb3-896c-16d44774e3b6","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (Now))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"i am in meetong","tokens":["i","am","in","meetong"]},"agent_utterance":{"described_entities":["entity@506655538"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (Now))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"looks greats","tokens":["looks","greats"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"ok done","tokens":["ok","done"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"0db5471b-2207-4922-a9dd-0a338abcc6b5","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTimeConstraint (Afternoon) (NextDOW (Friday)))) (Event.showAs_? (?= (ShowAsStatus.OutOfOffice)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Afternoon) :date ^Date (NextDOW :dow ^DayOfWeek (Friday)))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.OutOfOffice)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Out of the office friday afternoon","tokens":["Out","of","the","office","friday","afternoon"]},"agent_utterance":{"described_entities":["entity@1465968416"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :showAs (?= #(ShowAsStatus \"OutOfOffice\")) :start (DateTimeConstraint :constraint (Afternoon) :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberPM 1L)))) (Event.end_? (DateTime.time_? (?= (NumberPM 5L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 5L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make it from 1 pm to 5 pm.","tokens":["Make","it","from","1","pm","to","5","pm","."]},"agent_utterance":{"described_entities":["entity@1054341275"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 5)))) :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))))))"}}],"tags":{}}
{"dialogue_id":"8101285a-e30f-4141-a313-5c3be26c752f","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTime.date_? (?= (NextDOW (Monday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Monday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add event for monday","tokens":["Add","event","for","monday"]},"agent_utterance":{"described_entities":["entity@1463501962"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"MONDAY\"))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes thank you","tokens":["Yes","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar on February 11, 2019 from 1:00 to 1:30 PM.","tokens":["I","'ve","put","that","on","your","calendar","on","February","11",",","2019","from","1",":","00","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Tuesday))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"fiona\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Tuesday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"fiona\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Meeting with fiona next tuesday","tokens":["Meeting","with","fiona","next","tuesday"]},"agent_utterance":{"described_entities":["entity@1259987701"],"original_text":"Here are some times when you and Fiona Mason are free.","tokens":["Here","are","some","times","when","you","and","Fiona","Mason","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"fiona\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"TUESDAY\"))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.time_? (?= (NumberPM 1L)))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"1 pm","tokens":["1","pm"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"damon\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"damon\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Remove my even with damon","tokens":["Remove","my","even","with","damon"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events with damon.","tokens":["I","did","n't","find","any","events","with","damon","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"damon\")))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Monday))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Damon\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Monday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Damon\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Add Damon to my schedule for next monday","tokens":["Add","Damon","to","my","schedule","for","next","monday"]},"agent_utterance":{"described_entities":["entity@1483665196"],"original_text":"I found 2 different people matching your query. Which of these did you mean?","tokens":["I","found","2","different","people","matching","your","query",".","Which","of","these","did","you","mean","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Damon\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"MONDAY\"))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":["entity@680008218"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"5c659cdd-f160-42fb-9f07-6e271cb39581","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofMonth (Date.month (Today)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (Date.month :obj ^Date (Today)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you help me remove an appointment scheduled for this month","tokens":["Can","you","help","me","remove","an","appointment","scheduled","for","this","month"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events this month.","tokens":["I","did","n't","find","any","events","this","month","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (FullMonthofMonth :month (:month (Today)))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTime.date_? (?= (Tomorrow)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you tell me if I can schedule a appointment tomorrow","tokens":["Can","you","tell","me","if","I","can","schedule","a","appointment","tomorrow"]},"agent_utterance":{"described_entities":["entity@420973134"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (Tomorrow)))))))"}}],"tags":{}}
{"dialogue_id":"b9f4e5d8-3006-4f38-9429-c4cf76ec8fb7","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (Tomorrow) (NumberAM 11L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"Bonsai Show\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 8L))))) (Event.showAs_? (?= (ShowAsStatus.Busy))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 11L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Bonsai Show\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 8L))))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.Busy))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"The Bonsai Show is tomorrow at 11 am to 8 pm, set myself to Busy","tokens":["The","Bonsai","Show","is","tomorrow","at","11","am","to","8","pm",",","set","myself","to","Busy"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 11)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 8)))) :showAs (?= #(ShowAsStatus \"Busy\")) :start (?= x0) :subject (?= #(String \"Bonsai Show\")))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.showAs_? (?= (ShowAsStatus.Tentative))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.Tentative))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually I just checked their home page. It might be raining. So change that to Tentative.","tokens":["Actually","I","just","checked","their","home","page",".","It","might","be","raining",".","So","change","that","to","Tentative","."]},"agent_utterance":{"described_entities":[],"original_text":"I’ve set the status of the Bonsai Show to Tentative.","tokens":["I","’ve","set","the","status","of","the","Bonsai","Show","to","Tentative","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :showAs (?= #(ShowAsStatus \"Tentative\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.showAs_? (^(ShowAsStatus) AlwaysFalseConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) AlwaysFalseConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Hmm... just clear that status","tokens":["Hmm","...","just","clear","that","status"]},"agent_utterance":{"described_entities":[],"original_text":"I've set the status of your Bonsai Show back to Busy.","tokens":["I","'ve","set","the","status","of","your","Bonsai","Show","back","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :showAs (AlwaysFalseConstraint[ShowAsStatus])))))","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Cool. That's it","tokens":["Cool",".","That","'s","it"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"21301e4c-a192-46f6-bd5e-4ea20d82b363","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint))))) (Event.attendees_? (& (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Mike\"))))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jason\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Mike\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jason\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I do not want Mike and Jason to attend the event","tokens":["I","do","not","want","Mike","and","Jason","to","attend","the","event"]},"agent_utterance":{"described_entities":["entity@1619896669"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (andConstraint (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Mike\"))))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jason\"))))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"It looks good.","tokens":["It","looks","good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with Mike, Jason, and Damon Straeter\" to be without Mike and without Jason.","tokens":["I","'ve","changed","\"","Meeting","with","Mike",",","Jason",",","and","Damon","Straeter","\"","to","be","without","Mike","and","without","Jason","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.subject_? (?~= \"lunch\"))))))) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alex\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Laura\"))))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jimothy\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alex\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Laura\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jimothy\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thanks, I also need to change my lunch on Friday since Alex and Laura will be going instead of Jimothy","tokens":["Thanks",",","I","also","need","to","change","my","lunch","on","Friday","since","Alex","and","Laura","will","be","going","instead","of","Jimothy"]},"agent_utterance":{"described_entities":["entity@2140895006"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :subject (?~= #(String \"lunch\")))))))) :update (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alex\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Laura\"))))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jimothy\"))))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Great","tokens":["Great"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"lunch\" to be Alex, Laura, and without Jimothy.","tokens":["I","'ve","changed","\"","lunch","\"","to","be","Alex",",","Laura",",","and","without","Jimothy","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Board meeting\")))))) (Event.attendees_? (& (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ann\"))))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Beth\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Board meeting\")))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ann\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Beth\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":4,"user_utterance":{"original_text":"And make the Board meeting without Ann and Beth.","tokens":["And","make","the","Board","meeting","without","Ann","and","Beth","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"Board meeting\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","Board","meeting","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Board meeting\"))))))) :update (Constraint[Event] :attendees (andConstraint (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ann\"))))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Beth\"))))))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"fd316727-0d8b-4155-8fc3-1787d4338dd6","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jane\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jane\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I forgot what time my meeting with Jane was next Tuesday, can you tell me when it was?","tokens":["I","forgot","what","time","my","meeting","with","Jane","was","next","Tuesday",",","can","you","tell","me","when","it","was","?"]},"agent_utterance":{"described_entities":[],"original_text":"It starts tomorrow at 1:00 PM.","tokens":["It","starts","tomorrow","at","1",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jane\"))))))))))"}}],"tags":{}}
{"dialogue_id":"3f468870-4ece-4fc7-9120-1e0f6b7d9194","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"lunch\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Wednesday)))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Craig\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Wednesday)))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Craig\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I have a lunch booked with Craig on Wednesday, can you add it to my calendar?","tokens":["I","have","a","lunch","booked","with","Craig","on","Wednesday",",","can","you","add","it","to","my","calendar","?"]},"agent_utterance":{"described_entities":["entity@1114155249"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Craig\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")))) :subject (?= #(String \"lunch\"))))))"}}],"tags":{}}
{"dialogue_id":"7c6c7217-e845-44b9-8aa5-0c13c6f55d3b","turns":[{"lispress":"(Yield (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"lunch\"))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Wilson\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(ResponseStatus) Yield :output ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Wilson\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What's Wilson's response to lunch, please?","tokens":["What","'s","Wilson","'s","response","to","lunch",",","please","?"]},"agent_utterance":{"described_entities":[],"original_text":"Wilson has declined the \"Lunch\" invitation.","tokens":["Wilson","has","declined","the","\"","Lunch","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"lunch\")))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Wilson\"))))))))"}}],"tags":{}}
{"dialogue_id":"66b93f71-28cd-4b64-88f8-64722a92ea8f","turns":[{"lispress":"(FenceDateTime)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceDateTime)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Two weekends from now, I will be busy with a bachelorette party all weekend.","tokens":["Two","weekends","from","now",",","I","will","be","busy","with","a","bachelorette","party","all","weekend","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry I can't help you with that yet.","tokens":["Sorry","I","ca","n't","help","you","with","that","yet","."]},"tags":{"original_lispress":"(FenceDateTime)"}},{"lispress":"(FenceDateTime)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceDateTime)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you make sure my schedule is clear two weekends from now?","tokens":["Can","you","make","sure","my","schedule","is","clear","two","weekends","from","now","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry I can't help you with that yet.","tokens":["Sorry","I","ca","n't","help","you","with","that","yet","."]},"tags":{"original_lispress":"(FenceDateTime)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayStartingDateForPeriod (Event.subject_? (?= \"off work\")) (Tomorrow) (toDays 3)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayStartingDateForPeriod :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"off work\")) :startDate ^Date (Tomorrow) :period ^Period (toDays :days ^Number 3)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I'll be off work for 3 days from tomorrow","tokens":["I","'ll","be","off","work","for","3","days","from","tomorrow"]},"agent_utterance":{"described_entities":["entity@1936900598"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayStartingDateForPeriod :event (Constraint[Event] :subject (?= #(String \"off work\"))) :period (toDays #(Number 3)) :startDate (Tomorrow)))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"yes right okay","tokens":["yes","right","okay"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"thanks","tokens":["thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"c2af8292-a134-4e6d-9b6b-2f6b183f308b","turns":[{"lispress":"(Yield (Event.duration (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.subject_? (?~= \"lunch\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Duration) Yield :output ^Duration (Event.duration :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"How long is lunch today?","tokens":["How","long","is","lunch","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"lunch\" is for 30 minutes.","tokens":["The","event","matching","\"","lunch","\"","is","for","30","minutes","."]},"tags":{"original_lispress":"(Yield :output (:duration (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :subject (?~= #(String \"lunch\")))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?~= \"dinner\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"And dinner?","tokens":["And","dinner","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"dinner\" is for a half hour.","tokens":["The","event","matching","\"","dinner","\"","is","for","a","half","hour","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :subject (?~= #(String \"dinner\"))))))"}},{"lispress":"(Yield (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Keith\")))) (ThisWeek))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Long) Yield :output ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Keith\")))) :range ^(Constraint Date) (ThisWeek))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"How many events do I have with Keith this week?","tokens":["How","many","events","do","I","have","with","Keith","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 3 events this week. The first is \"Lunch\" tomorrow from 1:00 to 1:30 PM.","tokens":["I","found","3","events","this","week",".","The","first","is","\"","Lunch","\"","tomorrow","from","1",":","00","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Keith\")))) :range (ThisWeek))))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^(Recipient) ConstraintTypeIntension) (intension (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sarah\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Recipient)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Recipient))) (^(Recipient) ConstraintTypeIntension) :value ^(CalflowIntension (Constraint Recipient)) (^((Constraint Recipient)) intension :extension ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sarah\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What about with Sarah?","tokens":["What","about","with","Sarah","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events this week.","tokens":["I","did","n't","find","any","events","this","week","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (Constraint[Constraint[Recipient]]) :value (intension (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sarah\"))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"coffee with Sarah\")) (Event.start_? (DateTimeConstraint (Morning) (NextDOW (Friday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"coffee with Sarah\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (NextDOW :dow ^DayOfWeek (Friday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you add \"coffee with Sarah\" as an event for Friday morning?","tokens":["Can","you","add","\"","coffee","with","Sarah","\"","as","an","event","for","Friday","morning","?"]},"agent_utterance":{"described_entities":["entity@1972520955"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Morning) :date (NextDOW :dow #(DayOfWeek \"FRIDAY\"))) :subject (?= #(String \"coffee with Sarah\"))))))"}}],"tags":{}}
{"dialogue_id":"518aa3d9-bea9-410f-b71b-3e9183aea112","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"customer satisfaction meeting\")) (Event.location_? (?= (LocationKeyphrase.apply \"Jims office\")))))))) (Event.location_? (?= (LocationKeyphrase.apply \"my office\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"customer satisfaction meeting\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Jims office\")))))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"my office\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Change the customer satisfaction meeting from Jims office to my office and send an alert of the change","tokens":["Change","the","customer","satisfaction","meeting","from","Jims","office","to","my","office","and","send","an","alert","of","the","change"]},"agent_utterance":{"described_entities":["entity@369466136"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Jims office\")) :subject (?~= #(String \"customer satisfaction meeting\"))))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"my office\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) (Event.subject_? (?~= \"Customer Review\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Customer Review\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Oops I meant change my Customer Review.","tokens":["Oops","I","meant","change","my","Customer","Review","."]},"agent_utterance":{"described_entities":["entity@1549387726"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (QueryEventIntensionConstraint) :new (Constraint[Event] :subject (?~= #(String \"Customer Review\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Feed the Dog\")))))) (Event.start_? (DateTime.date_? (?= (Tomorrow)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Feed the Dog\")))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you update my Feed the Dog event to be tomorrow?","tokens":["Can","you","update","my","Feed","the","Dog","event","to","be","tomorrow","?"]},"agent_utterance":{"described_entities":["entity@1852356776"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Feed the Dog\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (Tomorrow)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofMonth (May))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) :new ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (May))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I meant the one in May","tokens":["I","meant","the","one","in","May"]},"agent_utterance":{"described_entities":["entity@681949311"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (QueryEventIntensionConstraint) :new (EventDuringRange :event (Constraint[Event]) :range (FullMonthofMonth :month #(Month \"MAY\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes good","tokens":["Yes","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Feed the Dog\" to be.","tokens":["I","'ve","changed","\"","Feed","the","Dog","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"D&D Night\")))))) (Event.start_? (DateTime.date_? (NextWeekList))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"D&D Night\")))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Hey so can we change the D&D Night to be next week.","tokens":["Hey","so","can","we","change","the","D&D","Night","to","be","next","week","."]},"agent_utterance":{"described_entities":["entity@471487274"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"D&D Night\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (NextWeekList))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.subject_? (?= \"A&W Night\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"A&W Night\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"hold on I meant to say A&W Night","tokens":["hold","on","I","meant","to","say","A&W","Night"]},"agent_utterance":{"described_entities":["entity@422788382"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :subject (?= #(String \"A&W Night\"))))))"}}],"tags":{}}
{"dialogue_id":"b15b2c41-32d9-4196-96a2-3f31b6d82c5f","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What do you have for me today?","tokens":["What","do","you","have","for","me","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 matching event on your calendar. It's your \"Appointment\" from 3:00 to 3:30 PM.","tokens":["I","found","1","matching","event","on","your","calendar",".","It","'s","your","\"","Appointment","\"","from","3",":","00","to","3",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event]))))"}}],"tags":{}}
{"dialogue_id":"8cd3b24b-8761-4ba1-87a8-f85a126bf68a","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add lunch with dad Friday for 30 minutes at 12:30 pm.","tokens":["Add","lunch","with","dad","Friday","for","30","minutes","at","12",":","30","pm","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))) x1 (DateAtTimeWithDefaults (DateTime.date (Event.start x0)) (HourMinutePm 12L 30L))) (do (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (& (Event.start_? (?= x1)) (Event.end_? (?= (TimeAfterDateTime x1 (NumberPM 1L))))))) (Yield x1)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))) x1 ^DateTime (DateAtTimeWithDefaults :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :time ^Time (HourMinutePm :hours ^Long 12L :minutes ^Long 30L))) ^Unit (^(UpdateEventResponse Unit) do :arg1 ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x1)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x1 :time ^Time (NumberPM :number ^Long 1L))))))) :arg2 ^Unit (^(DateTime) Yield :output x1)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The correct time should be 12:30 pm to 1:00 pm.","tokens":["The","correct","time","should","be","12",":","30","pm","to","1",":","00","pm","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I’ve encountered an error I haven’t been trained to handle. Can you try a different request?","tokens":["I","’ve","encountered","an","error","I","have","n’t","been","trained","to","handle",".","Can","you","try","a","different","request","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event])))) x1 (DateAtTimeWithDefaults :date (:date (:start x0)) :time (HourMinutePm :hours #(Number 12) :minutes #(Number 30.0)))) (do (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x1 :time (NumberPM :number #(Number 1)))) :start (?= x1)))) (Yield :output x1)))"}}],"tags":{}}
{"dialogue_id":"855d16b8-e770-456a-af8e-c54b2e9326c0","turns":[{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I want you to cancel all weekdays events from 3pm-5pm.","tokens":["I","want","you","to","cancel","all","weekdays","events","from","3","pm-5","pm","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}}],"tags":{}}
{"dialogue_id":"abca94c5-8b27-4185-ace1-d58d851dfde4","turns":[{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Can you tell me where Sam Jackson will performing this weekend?","tokens":["Can","you","tell","me","where","Sam","Jackson","will","performing","this","weekend","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (NumberWeekOfMonth 3L (January)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NumberWeekOfMonth :number ^Long 3L :month ^Month (January)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Do I have anything scheduled on the third week of January?","tokens":["Do","I","have","anything","scheduled","on","the","third","week","of","January","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event between January 13, 2019 and January 19, 2019. It's \"Foo Fighters concert\" from 7:00 to 7:30 PM.","tokens":["Yes",",","I","found","one","event","between","January","13",",","2019","and","January","19",",","2019",".","It","'s","\"","Foo","Fighters","concert","\"","from","7",":","00","to","7",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (NumberWeekOfMonth :month #(Month \"JANUARY\") :number #(Number 3)))))) #(Number 0)))","do-not-train":""}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Eh, I'm gonna be out of the office. Cancel that.","tokens":["Eh",",","I","'m","gon","na","be","out","of","the","office",".","Cancel","that","."]},"agent_utterance":{"described_entities":["entity@316567148"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))","do-not-train":""}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofMonth (February)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (February)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"That's great. Now what is scheduled in February?","tokens":["That","'s","great",".","Now","what","is","scheduled","in","February","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have 3 events on your calendar. Your \"lunch with mom\" is on February 2nd from 12:00 to 1:00 PM.","tokens":["You","have","3","events","on","your","calendar",".","Your","\"","lunch","with","mom","\"","is","on","February","2","nd","from","12",":","00","to","1",":","00","PM","."]},"tags":{"do-not-train":"","original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (FullMonthofMonth :month #(Month \"FEBRUARY\")))))"}}],"tags":{}}
{"dialogue_id":"f3e2b3e9-d85d-4cd1-8431-9079326725e4","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"basketball game\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (HourMinutePm 7L 30L))))) (Event.duration_? (?= (toHours 3)))) (Event.location_? (?= (LocationKeyphrase.apply \"American Airlines Center\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"basketball game\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (HourMinutePm :hours ^Long 7L :minutes ^Long 30L))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 3)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"American Airlines Center\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"I would like to block off 3 hours tomorrow at 7:30 pm for a basketball game at the American Airlines Center.","tokens":["I","would","like","to","block","off","3","hours","tomorrow","at","7",":","30","pm","for","a","basketball","game","at","the","American","Airlines","Center","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 3))) :location (?= #(LocationKeyphrase \"American Airlines Center\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (HourMinutePm :hours #(Number 7) :minutes #(Number 30.0)))) :subject (?= #(String \"basketball game\"))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"a1fb5852-7385-480a-861f-5d8bdf3c9358","turns":[{"lispress":"(Yield (Date.year (DateTime.date (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sue\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Year) Yield :output ^Year (Date.year :obj ^Date (DateTime.date :obj ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sue\")))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Tell me what year Sue will be coming to visit.","tokens":["Tell","me","what","year","Sue","will","be","coming","to","visit","."]},"agent_utterance":{"described_entities":[],"original_text":"The \"Sue's Visit\" starts in 2021.","tokens":["The","\"","Sue","'s","Visit","\"","starts","in","2021","."]},"tags":{"original_lispress":"(Yield :output (:year (:date (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sue\")))))))))))"}},{"lispress":"(Yield (Date.year (DateTime.date (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"vacation\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Year) Yield :output ^Year (Date.year :obj ^Date (DateTime.date :obj ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"vacation\")))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What year is my vacation going to be starting in again?","tokens":["What","year","is","my","vacation","going","to","be","starting","in","again","?"]},"agent_utterance":{"described_entities":[],"original_text":"The \"my vacation\" starts in 2020.","tokens":["The","\"","my","vacation","\"","starts","in","2020","."]},"tags":{"original_lispress":"(Yield :output (:year (:date (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"vacation\"))))))))))"}},{"lispress":"(Yield (Date.year (DateTime.date (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventBeforeDateTime (Now) (& (Event.subject_? (?~= \"Paris\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Mark\")))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Year) Yield :output ^Year (Date.year :obj ^Date (DateTime.date :obj ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBeforeDateTime :dateTime ^DateTime (Now) :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Paris\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Mark\")))))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What was the year Mark and I went to Paris?","tokens":["What","was","the","year","Mark","and","I","went","to","Paris","?"]},"agent_utterance":{"described_entities":[],"original_text":"The \"Paris\" started in 2017.","tokens":["The","\"","Paris","\"","started","in","2017","."]},"tags":{"original_lispress":"(Yield :output (:year (:date (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventBeforeDateTime :dateTime (Now) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Mark\"))) :subject (?~= #(String \"Paris\")))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"study session\")) (Event.start_? (DateTime.date_? (?= (MDY 19L (March) (Date.year (DateTime.date (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"graduate college\"))))))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"study session\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MDY :day ^Long 19L :month ^Month (March) :year ^Year (Date.year :obj ^Date (DateTime.date :obj ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"graduate college\"))))))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Could you make a study session on March 19 on the same year as my graduate college event?","tokens":["Could","you","make","a","study","session","on","March","19","on","the","same","year","as","my","graduate","college","event","?"]},"agent_utterance":{"described_entities":["entity@924653527"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MDY :day #(Number 19) :month #(Month \"MARCH\") :year (:year (:date (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"graduate college\")))))))))))) :subject (?= #(String \"study session\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"choose the second one","tokens":["choose","the","second","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"6afdd7ab-4f4c-4ca0-9466-f258f1eff710","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dentist appointment\")) (Event.start_? (DateTime.date_? (ThisWeek)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dentist appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (ThisWeek)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"dentist appointment this week","tokens":["dentist","appointment","this","week"]},"agent_utterance":{"described_entities":["entity@1133433419"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (ThisWeek)) :subject (?= #(String \"dentist appointment\"))))))"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Wait one second","tokens":["Wait","one","second"]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (?= (MD 2L (October))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 2L :month ^Month (October))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"dentist appointment","tokens":["dentist","appointment"]},"agent_utterance":{"described_entities":["entity@1754565593"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 2) :month #(Month \"OCTOBER\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Maybe the first one would be better.","tokens":["Maybe","the","first","one","would","be","better","."]},"agent_utterance":{"described_entities":["entity@757661449"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes. that one is right.","tokens":["Yes",".","that","one","is","right","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"cancel the appointment","tokens":["cancel","the","appointment"]},"agent_utterance":{"described_entities":["entity@1826114983"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Just a second.","tokens":["Just","a","second","."]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"yup cancel it","tokens":["yup","cancel","it"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"4467c123-2217-45c3-bd82-4f5c71684aff","turns":[{"lispress":"(do (^(Event) EmptyStructConstraint) (do (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jack\")))))) (do (Path.apply \"attendees\") (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 10L))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((Constraint Event) Unit) do :arg1 ^(Constraint Event) (^(Event) EmptyStructConstraint) :arg2 ^Unit (^((Constraint (List Attendee)) Unit) do :arg1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jack\")))))) :arg2 ^Unit (^(Path Unit) do :arg1 ^Path (Path.apply :inner ^String \"attendees\") :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 10L))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create appointment at 10am tomorrow with Jack","tokens":["Create","appointment","at","10","am","tomorrow","with","Jack"]},"agent_utterance":{"described_entities":["entity@1084503727"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(do (Constraint[Event]) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jack\")))))) #(Path \"attendees\") (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 10.0)))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yep!","tokens":["yep","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (DateTime.time_? (?= (NumberAM 11L)))) (Event.location_? (?= (LocationKeyphrase.apply \"Hilltop\")))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jill\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 11L)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Hilltop\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jill\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thanks. Make appointment with Jill at Hilltop at 11am.","tokens":["Thanks",".","Make","appointment","with","Jill","at","Hilltop","at","11","am","."]},"agent_utterance":{"described_entities":["entity@1175985446"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jill\")))))) :location (?= #(LocationKeyphrase \"Hilltop\")) :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 11))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"the second one","tokens":["the","second","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Rex\")))) (EventDuringRange (^(Event) EmptyStructConstraint) (NextWeekList))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Rex\")))) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NextWeekList))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"When is my meeting with Rex next week?","tokens":["When","is","my","meeting","with","Rex","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event with Rex is on Monday the 18th.","tokens":["The","event","with","Rex","is","on","Monday","the","18","th","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Rex\"))) :nonEmptyBase (EventDuringRange :event (Constraint[Event]) :range (NextWeekList))))))))"}}],"tags":{}}
{"dialogue_id":"0a641a5f-cb42-483c-928c-bdd529dceb9d","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"What is on my calendar tomorrow?","tokens":["What","is","on","my","calendar","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have 2 events on your calendar. Your \"piano lesson\" is tomorrow from 6:00 to 6:30 PM.","tokens":["You","have","2","events","on","your","calendar",".","Your","\"","piano","lesson","\"","is","tomorrow","from","6",":","00","to","6",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"coffee\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 8L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"coffee\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 8L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Please add an event called coffee tomorrow at 8 AM.","tokens":["Please","add","an","event","called","coffee","tomorrow","at","8","AM","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"coffee\"))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"d50f9e63-4616-489e-816e-b4b4e5d6e5d4","turns":[{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Han\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Han\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Han","tokens":["Han"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Han:","tokens":["Here","is","the","contact","information","for","Han",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Han\")))))))"}},{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Leia\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Leia\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Leia","tokens":["Leia"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Leia:","tokens":["Here","is","the","contact","information","for","Leia",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Leia\")))))))"}},{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Luke\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Luke\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Luke","tokens":["Luke"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Luke:","tokens":["Here","is","the","contact","information","for","Luke",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Luke\")))))))"}},{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Chewy\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Chewy\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Chewy","tokens":["Chewy"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Chewy:","tokens":["Here","is","the","contact","information","for","Chewy",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Chewy\")))))))"}},{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Darth Vader\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Darth Vader\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Darth Vader","tokens":["Darth","Vader"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Darth Vader:","tokens":["Here","is","the","contact","information","for","Darth","Vader",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Darth Vader\")))))))"}}],"tags":{}}
{"dialogue_id":"f5f687b1-e4b2-4b89-b9cd-c3e370b54ed1","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jahn\")))) (FullMonthofLastMonth)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jahn\")))) :range ^(Constraint Date) (FullMonthofLastMonth)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"can you change the the meeting with Jahn last month it was not supposed to happen?","tokens":["can","you","change","the","the","meeting","with","Jahn","last","month","it","was","not","supposed","to","happen","?"]},"agent_utterance":{"described_entities":["entity@60465184"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jahn\")))) :range (FullMonthofLastMonth)))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.date_? (?= (previousMonthDay (Today) (August) 21L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (previousMonthDay :date ^Date (Today) :month ^Month (August) :day ^Long 21L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, please update that it was on August 21.","tokens":["Yes",",","please","update","that","it","was","on","August","21","."]},"agent_utterance":{"described_entities":["entity@925213023"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (previousMonthDay (Today) #(Month \"AUGUST\") #(Number 21))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jah\")))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"jahn\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jah\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"jahn\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"ooops I meant with Jah, not jahn","tokens":["ooops","I","meant","with","Jah",",","not","jahn"]},"agent_utterance":{"described_entities":["entity@520336415"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jah\")))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"jahn\"))))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"No it should be an hour long","tokens":["No","it","should","be","an","hour","long"]},"agent_utterance":{"described_entities":["entity@291025400"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :duration (?= (toHours #(Number 1)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes that looks right","tokens":["Yes","that","looks","right"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with Jahn and Damon Straeter\" to be Jah and without Jahn for an hour.","tokens":["I","'ve","changed","\"","Meeting","with","Jahn","and","Damon","Straeter","\"","to","be","Jah","and","without","Jahn","for","an","hour","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"bb20d8e2-fd86-4d69-8f90-1ca9a3a67ee4","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dentist appointment\")) (Event.start_? (DateTimeConstraint (Morning) (DowOfWeekNew (Monday) (NextWeekList))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dentist appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (DowOfWeekNew :dow ^DayOfWeek (Monday) :week ^(Constraint Date) (NextWeekList))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create a new dentist appointment next week on monday morning","tokens":["Create","a","new","dentist","appointment","next","week","on","monday","morning"]},"agent_utterance":{"described_entities":["entity@1879227037"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Morning) :date (DowOfWeekNew :dow #(DayOfWeek \"MONDAY\") :week (NextWeekList))) :subject (?= #(String \"dentist appointment\"))))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (& (^((Constraint Time)) roleConstraint (Path.apply \"start\")) (^(Time) ConstraintTypeIntension)) (intension (?= (NumberAM 9L))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Time)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Time))) (^((CalflowIntension (Constraint Time))) & :c1 ^(Constraint (CalflowIntension (Constraint Time))) (^((Constraint Time)) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension (Constraint Time))) (^(Time) ConstraintTypeIntension)) :value ^(CalflowIntension (Constraint Time)) (^((Constraint Time)) intension :extension ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 9L))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"No, it's at 9AM.","tokens":["No",",","it","'s","at","9","AM","."]},"agent_utterance":{"described_entities":["entity@1239997989"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (Constraint[Constraint[Time]])) :value (intension (?= (NumberAM :number #(Number 9)))))))"}}],"tags":{}}
{"dialogue_id":"ab9486d6-db8b-452b-b508-d4091ac904ec","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"play date\")))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (OnDateBeforeTime (DateTime.date (Event.start x0)) (DateTime.time (Event.start x0))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"play date\")))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (OnDateBeforeTime :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :time ^Time (DateTime.time :obj ^DateTime (Event.start :obj x0))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you make my play date a bit earlier in the day?","tokens":["Can","you","make","my","play","date","a","bit","earlier","in","the","day","?"]},"agent_utterance":{"described_entities":["entity@677814188"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"play date\"))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (OnDateBeforeTime :date (:date (:start x0)) :time (:time (:start x0))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.time_? (?> (Execute (refer (& (^(Time) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Time) EmptyStructConstraint)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?> :reference ^Time (^(Time) Execute :intension ^(CalflowIntension Time) (^(Time) refer :constraint ^(Constraint (CalflowIntension Time)) (^((CalflowIntension Time)) & :c1 ^(Constraint (CalflowIntension Time)) (^(Time) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Time)) (^(Time) extensionConstraint :constraint ^(Constraint Time) (^(Time) EmptyStructConstraint)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make it later please","tokens":["Make","it","later","please"]},"agent_utterance":{"described_entities":["entity@1375088661"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :time (?> (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Time])))))))))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The former one please and thank you.","tokens":["The","former","one","please","and","thank","you","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (Execute (ChooseUpdateEventFromConstraint (Event.start_? (DateTime.time_? (?= (HourMinutePm 12L 30L)))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseUpdateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 12L :minutes ^Long 30L)))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"The 12:30 one. Please.","tokens":["The","12",":","30","one",".","Please","."]},"agent_utterance":{"described_entities":["entity@1904803083"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseUpdateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 12) :minutes #(Number 30.0))))) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"05aa2c86-bee5-4e35-8f5e-616c19066f58","turns":[{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Fayetteville NC\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Fayetteville NC\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"what is the weather in Fayetteville NC","tokens":["what","is","the","weather","in","Fayetteville","NC"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Fayetteville NC\"))) :time (?= (Now))))","do-not-train":""}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"when will the weather get hotter then 57","tokens":["when","will","the","weather","get","hotter","then","57"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)","do-not-train":""}},{"lispress":"(Yield (WillRain (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Greenville NC\"))) (DateTime.date_? (NextPeriod (toDays 3))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Greenville NC\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextPeriod :period ^Period (toDays :days ^Number 3))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"is there rain in the next few days in Greenville NC","tokens":["is","there","rain","in","the","next","few","days","in","Greenville","NC"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Greenville NC\"))) :time (Constraint[DateTime] :date (NextPeriod :period (toDays #(Number 3)))))))","do-not-train":""}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Calf\"))) (DateTime.date_? (?= (Today)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Calf\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"What is Calf weather like today","tokens":["What","is","Calf","weather","like","today"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a high of 0.00 °F and a low of 0.00 °F today.","tokens":["It","is","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","today","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Calf\"))) :time (Constraint[DateTime] :date (?= (Today)))))","do-not-train":""}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^((Constraint Point)) roleConstraint (Path.apply \"place\")) (intension (AtPlace (FindPlace (LocationKeyphrase.apply \"Fayetteville NC\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Point)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Point))) (^((Constraint Point)) roleConstraint :path ^Path (Path.apply :inner ^String \"place\")) :value ^(CalflowIntension (Constraint Point)) (^((Constraint Point)) intension :extension ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Fayetteville NC\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Fayetteville NC","tokens":["Fayetteville","NC"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a high of 0.00 °F and a low of 0.00 °F today.","tokens":["It","is","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","today","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (roleConstraint (append #(List[Path] []) #(Path \"place\"))) :value (intension (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Fayetteville NC\")))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":5,"user_utterance":{"original_text":"I am done , thank you","tokens":["I","am","done",",","thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"dbf0e0e0-5954-499d-b852-e0be93a7fa38","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dentists appointment\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberAM 8L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dentists appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberAM :number ^Long 8L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule a dentists appointment at 8:00 am on Friday.","tokens":["Schedule","a","dentists","appointment","at","8",":","00","am","on","Friday","."]},"agent_utterance":{"described_entities":["entity@1903936964"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"dentists appointment\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yep","tokens":["yep"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberAM 9L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 9L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Elongate it to 9AM","tokens":["Elongate","it","to","9","AM"]},"agent_utterance":{"described_entities":["entity@1340327794"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 9))))))))"}}],"tags":{}}
{"dialogue_id":"73daeb91-706d-42d5-bc46-e05427c018bd","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (OnDateAfterTime (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (Lunch))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (OnDateAfterTime :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :time ^Time (Lunch))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need a meeting that is after lunch","tokens":["I","need","a","meeting","that","is","after","lunch"]},"agent_utterance":{"described_entities":["entity@963506134"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (OnDateAfterTime :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :time (Lunch))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?< (Execute (refer (& (^(Time) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Time) EmptyStructConstraint)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?< :reference ^Time (^(Time) Execute :intension ^(CalflowIntension Time) (^(Time) refer :constraint ^(Constraint (CalflowIntension Time)) (^((CalflowIntension Time)) & :c1 ^(Constraint (CalflowIntension Time)) (^(Time) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Time)) (^(Time) extensionConstraint :constraint ^(Constraint Time) (^(Time) EmptyStructConstraint)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I changed my mine. I want it earlier than the first suggested time so that I can go to have lunch with Ann.","tokens":["I","changed","my","mine",".","I","want","it","earlier","than","the","first","suggested","time","so","that","I","can","go","to","have","lunch","with","Ann","."]},"agent_utterance":{"described_entities":["entity@710930339"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?< (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Time])))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent (BottomResult) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long (BottomResult) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The last one","tokens":["The","last","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index (BottomResult) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"great","tokens":["great"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"none","tokens":["none"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"4399c843-8072-4c3e-acf4-a563c2cafb50","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"staff meeting\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 9L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"staff meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 9L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I would like you to place an appointment for tomorrow at 9AM and name staff meeting","tokens":["I","would","like","you","to","place","an","appointment","for","tomorrow","at","9","AM","and","name","staff","meeting"]},"agent_utterance":{"described_entities":["entity@1520047261"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 9)))) :subject (?= #(String \"staff meeting\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes, thank you for your help","tokens":["yes",",","thank","you","for","your","help"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"bye","tokens":["bye"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"c403f11c-15f9-4552-ae3b-6e60790e556d","turns":[{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"today in meeting","tokens":["today","in","meeting"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTime.date_? (?= (Today)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Add a meeting for today","tokens":["Add","a","meeting","for","today"]},"agent_utterance":{"described_entities":["entity@577319157"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (Today)))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.time_? (Afternoon))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (Afternoon))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The afternoon one.","tokens":["The","afternoon","one","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :time (Afternoon))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"hair appointment\")) (Event.start_? (DateTimeConstraint (LateMorning) (NextDOW (Monday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"hair appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (LateMorning) :date ^Date (NextDOW :dow ^DayOfWeek (Monday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I need a hair appointment late morning Monday","tokens":["I","need","a","hair","appointment","late","morning","Monday"]},"agent_utterance":{"described_entities":["entity@1211921034"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (LateMorning) :date (NextDOW :dow #(DayOfWeek \"MONDAY\"))) :subject (?= #(String \"hair appointment\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I'll take the first.","tokens":["I","'ll","take","the","first","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"18811585-cd08-4a66-887a-09a5b65b6c80","turns":[{"lispress":"(Yield (AttendeeResponseStatus (AttendeeFromEvent (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Frank\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(ResponseStatus) Yield :output ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Frank\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Did Frank respond to my invitation?","tokens":["Did","Frank","respond","to","my","invitation","?"]},"agent_utterance":{"described_entities":[],"original_text":"Frank has accepted the \"Friendsgiving\" invitation.","tokens":["Frank","has","accepted","the","\"","Friendsgiving","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (Execute :intension (refer (extensionConstraint (Constraint[Event])))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Frank\"))))))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^(Recipient) ConstraintTypeIntension) (intension (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Steven\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Recipient)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Recipient))) (^(Recipient) ConstraintTypeIntension) :value ^(CalflowIntension (Constraint Recipient)) (^((Constraint Recipient)) intension :extension ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Steven\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Awesome, how about Steven?","tokens":["Awesome",",","how","about","Steven","?"]},"agent_utterance":{"described_entities":[],"original_text":"Steven has accepted the \"Friendsgiving\" invitation.","tokens":["Steven","has","accepted","the","\"","Friendsgiving","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (Constraint[Constraint[Recipient]]) :value (intension (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Steven\"))))))"}},{"lispress":"(Yield (AttendeeResponseStatus (AttendeeFromEvent (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Bobbo\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(ResponseStatus) Yield :output ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Bobbo\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"OK. Any idea if Bobbo has responded?","tokens":["OK",".","Any","idea","if","Bobbo","has","responded","?"]},"agent_utterance":{"described_entities":[],"original_text":"Bobbo has not responded to the \"Friendsgiving\" invitation.","tokens":["Bobbo","has","not","responded","to","the","\"","Friendsgiving","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (Execute :intension (refer (extensionConstraint (Constraint[Event])))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Bobbo\"))))))))"}},{"lispress":"(Yield (== (ResponseStatus.response (Event.responseStatus (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Friendsgivings\"))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (Event.responseStatus :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Friendsgivings\"))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Did I accept the Friendsgiving invitation?","tokens":["Did","I","accept","the","Friendsgiving","invitation","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, you have accepted the \"Friendsgiving\" invitation.","tokens":["Yes",",","you","have","accepted","the","\"","Friendsgiving","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (:responseStatus (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Friendsgivings\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yyes","tokens":["yyes"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"160b0851-fa15-4aa3-8236-514b308c1d9e","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateAfterTime (NextDOW (Friday)) (^(Event) EmptyStructConstraint) (HourMinutePm 4L 30L))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (HourMinutePm :hours ^Long 4L :minutes ^Long 30L))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have any meetings scheduled past 4:30 pm on Friday?","tokens":["Do","I","have","any","meetings","scheduled","past","4",":","30","pm","on","Friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events tomorrow after 4:30 PM.","tokens":["No",",","I","did","n't","find","any","events","tomorrow","after","4",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event]) :time (HourMinutePm :hours #(Number 4) :minutes #(Number 30.0)))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Bar\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 6L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Bar\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 6L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Schedule Bar on Friday at 6 pm.","tokens":["Schedule","Bar","on","Friday","at","6","pm","."]},"agent_utterance":{"described_entities":["entity@552586987"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"Bar\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yep, perfect","tokens":["Yep",",","perfect"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.location_? (?= (LocationKeyphrase.apply \"Burnt Rd\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Burnt Rd\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Set the location to Burnt Rd.","tokens":["Set","the","location","to","Burnt","Rd","."]},"agent_utterance":{"described_entities":["entity@2033962550"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"Burnt Rd\"))))))"}}],"tags":{}}
{"dialogue_id":"6260539f-f094-4743-82db-428fd4477401","turns":[{"lispress":"(Yield (FindPlaceMultiResults (LocationKeyphrase.apply \"Ceol in Reno\")))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(PlaceSearchResponse) Yield :output ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Ceol in Reno\")))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you locate Ceol in Reno for me?","tokens":["Can","you","locate","Ceol","in","Reno","for","me","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one option.","tokens":["I","found","one","option","."]},"tags":{"original_lispress":"(Yield :output (FindPlaceMultiResults :place #(LocationKeyphrase \"Ceol in Reno\")))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.GoodforGroups) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.GoodforGroups) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is this place good for groups?","tokens":["Is","this","place","good","for","groups","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Ceol Irish Pub is good for groups.","tokens":["Yes",",","Ceol","Irish","Pub","is","good","for","groups","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"GoodforGroups\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}},{"lispress":"(Yield (FindPlaceMultiResults (LocationKeyphrase.apply \"Combo Restaurant in Bellevue\")))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(PlaceSearchResponse) Yield :output ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Combo Restaurant in Bellevue\")))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Find Combo Restaurant in Bellevue.","tokens":["Find","Combo","Restaurant","in","Bellevue","."]},"agent_utterance":{"described_entities":[],"original_text":"I found one option.","tokens":["I","found","one","option","."]},"tags":{"original_lispress":"(Yield :output (FindPlaceMultiResults :place #(LocationKeyphrase \"Combo Restaurant in Bellevue\")))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.GoodforGroups) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.GoodforGroups) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Will they accommodate a small group of around 7 people.","tokens":["Will","they","accommodate","a","small","group","of","around","7","people","."]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Combo Restaurant is good for groups.","tokens":["Yes",",","Combo","Restaurant","is","good","for","groups","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"GoodforGroups\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}}],"tags":{}}
{"dialogue_id":"0e8da6ed-0489-4aea-9a63-12be9b88c5a0","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"pick up my daughter\")) (Event.start_? (?= (NextTime (NumberAM 11L))))) (Event.location_? (?= (LocationKeyphrase.apply \"her school\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"pick up my daughter\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberAM :number ^Long 11L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"her school\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"pick up my daughter at 11 at her school","tokens":["pick","up","my","daughter","at","11","at","her","school"]},"agent_utterance":{"described_entities":["entity@422453928"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"her school\")) :start (?= (NextTime :time (NumberAM :number #(Number 11)))) :subject (?= #(String \"pick up my daughter\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"take daughter to dentist\")) (Event.start_? (?= (NextTime (HourMinuteAm 11L 45L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"take daughter to dentist\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (HourMinuteAm :hours ^Long 11L :minutes ^Long 45L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Please add take daughter to dentist at 11:45","tokens":["Please","add","take","daughter","to","dentist","at","11",":","45"]},"agent_utterance":{"described_entities":["entity@1096787111"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (HourMinuteAm :hours #(Number 11) :minutes #(Number 45)))) :subject (?= #(String \"take daughter to dentist\"))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"get ice cream for daughter\")) (Event.start_? (?= (NextTime (HourMinutePm 12L 45L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"get ice cream for daughter\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (HourMinutePm :hours ^Long 12L :minutes ^Long 45L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add get ice cream for daughter at 12:45 PM","tokens":["Add","get","ice","cream","for","daughter","at","12",":","45","PM"]},"agent_utterance":{"described_entities":["entity@1719712558"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (HourMinutePm :hours #(Number 12) :minutes #(Number 45)))) :subject (?= #(String \"get ice cream for daughter\"))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (MD 28L (February)) (^(Event) EmptyStructConstraint)) (Evening))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (MD :day ^Long 28L :month ^Month (February)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Evening))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you check if I have anything on my calendar the evening of February 28?","tokens":["Can","you","check","if","I","have","anything","on","my","calendar","the","evening","of","February","28","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have one event on your calendar. Your \"Monthly Charity Dinner\" is tomorrow from 6:30 to 7:30 PM.","tokens":["You","have","one","event","on","your","calendar",".","Your","\"","Monthly","Charity","Dinner","\"","is","tomorrow","from","6",":","30","to","7",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (MD :day #(Number 28) :month #(Month \"FEBRUARY\")) :event (Constraint[Event])) :timeRange (Evening))))"}}],"tags":{}}
{"dialogue_id":"4dfd678c-8515-41e4-b713-51dfd2645d63","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (Tomorrow)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"c linden\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"c linden\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"please make a meet with my partner c linden on tomorrow","tokens":["please","make","a","meet","with","my","partner","c","linden","on","tomorrow"]},"agent_utterance":{"described_entities":["entity@1584872826"],"original_text":"Here are some times when you and C Linden are free.","tokens":["Here","are","some","times","when","you","and","C","Linden","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"c linden\")))))) :start (Constraint[DateTime] :date (?= (Tomorrow)))))))"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"wait let me take a nap","tokens":["wait","let","me","take","a","nap"]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"the first one","tokens":["the","first","one"]},"agent_utterance":{"described_entities":["entity@1455257268"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"please change the meeting 10.30 am - 11.00 am utc","tokens":["please","change","the","meeting","10",".","30","am","-","11",".","00","am","utc"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch meeting\")) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"james\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch meeting\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"james\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"put lunch meeting with james?","tokens":["put","lunch","meeting","with","james","?"]},"agent_utterance":{"described_entities":["entity@1890849253"],"original_text":"Here are some times when you and James are free.","tokens":["Here","are","some","times","when","you","and","James","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"james\")))))) :subject (?= #(String \"lunch meeting\"))))))"}},{"lispress":"(Yield (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"james\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Recipient) Yield :output ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"james\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Who is james manager?","tokens":["Who","is","james","manager","?"]},"agent_utterance":{"described_entities":[],"original_text":"James's manager is Dan Schoffel.","tokens":["James","'s","manager","is","Dan","Schoffel","."]},"tags":{"original_lispress":"(Yield :output (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"james\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (^(Recipient) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Add him to the meeting please.","tokens":["Add","him","to","the","meeting","please","."]},"agent_utterance":{"described_entities":["entity@1875592083"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (Constraint[Recipient])))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (HourMinuteAm 11L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteAm :hours ^Long 11L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"That is too early for lunch. When are James and Dan available at 1130am?","tokens":["That","is","too","early","for","lunch",".","When","are","James","and","Dan","available","at","1130","am","?"]},"agent_utterance":{"described_entities":["entity@293475038"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteAm :hours #(Number 11) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"5b3e7d0e-78b1-4647-8230-659eef6309d5","turns":[{"lispress":"(Yield (Person.phoneNumber (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.phoneNumber :obj ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Call Barack Obama.","tokens":["Call","Barack","Obama","."]},"agent_utterance":{"described_entities":[],"original_text":"The phone number for Barack Obama is 1112223334.","tokens":["The","phone","number","for","Barack","Obama","is","1112223334","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\"))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 10L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 10L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Meet Barack Obama tomorrow at 10.","tokens":["Meet","Barack","Obama","tomorrow","at","10","."]},"agent_utterance":{"described_entities":["entity@2018047844"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 10.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"2b1ac249-fc91-49c0-87a1-03031b9fc7d9","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"chiropractor\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 13L (March)) (NumberAM 9L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"chiropractor\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 13L :month ^Month (March)) :time ^Time (NumberAM :number ^Long 9L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set an appointment for the chiropractor on March 13th at 9:00am","tokens":["Set","an","appointment","for","the","chiropractor","on","March","13","th","at","9",":","00","am"]},"agent_utterance":{"described_entities":["entity@391721481"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 13) :month #(Month \"MARCH\")) :time (NumberAM :number #(Number 9)))) :subject (?= #(String \"chiropractor\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toMinutes 20))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 20))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I only need 20 minutes for that though.","tokens":["I","only","need","20","minutes","for","that","though","."]},"agent_utterance":{"described_entities":["entity@1802608890"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toMinutes #(Number 20.0)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"good thanks","tokens":["good","thanks"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"67ebbca1-94f4-43d6-861d-98c19379a800","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dentist appointment\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 5L (April)) (NumberAM 8L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dentist appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 5L :month ^Month (April)) :time ^Time (NumberAM :number ^Long 8L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add my dentist appointment to my calendar for April 5th at 8:00am","tokens":["Add","my","dentist","appointment","to","my","calendar","for","April","5","th","at","8",":","00","am"]},"agent_utterance":{"described_entities":["entity@994751544"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 5) :month #(Month \"APRIL\")) :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"dentist appointment\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"confimred","tokens":["confimred"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"thanks for your help","tokens":["thanks","for","your","help"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"no need for your help on this time","tokens":["no","need","for","your","help","on","this","time"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"9b8f2570-ee10-40fd-a0e4-839b33c7c08b","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I've got so many meetings and deadlines leading up to a deadline on April 2nd. Can you help?","tokens":["I","'ve","got","so","many","meetings","and","deadlines","leading","up","to","a","deadline","on","April","2","nd",".","Can","you","help","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}}],"tags":{}}
{"dialogue_id":"1d266f75-4637-410d-9e9c-b504d8e336b5","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"hike\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L))))) (Event.location_? (?= (LocationKeyphrase.apply \"Palmer Park\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"hike\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Palmer Park\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"I want to schedule a hike for 3pm tomorrow at Palmer Park.","tokens":["I","want","to","schedule","a","hike","for","3","pm","tomorrow","at","Palmer","Park","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Palmer Park\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"hike\"))))))","do-not-train":""}},{"lispress":"(Yield (WeatherForEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.location_? (?= (LocationKeyphrase.apply \"Palmer Park\"))) (EventOnDate (Tomorrow) (Event.subject_? (?~= \"hike\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherForEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Palmer Park\"))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"hike\")))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"What is the weather going to be like for my hike at Palmer Park tomorrow?","tokens":["What","is","the","weather","going","to","be","like","for","my","hike","at","Palmer","Park","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F on Fri, January 25 between 12:00 AM and 12:00 PM.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","on","Fri",",","January","25","between","12",":","00","AM","and","12",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (WeatherForEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Palmer Park\")) :nonEmptyBase (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"hike\"))))))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"yoga\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Sunday)) (NumberAM 7L))))) (Event.location_? (?= (LocationKeyphrase.apply \"Pompano Beach\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"yoga\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :time ^Time (NumberAM :number ^Long 7L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Pompano Beach\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Now put on my calendar yoga at Pompano Beach for Sunday at 7 am; will it be warm then?","tokens":["Now","put","on","my","calendar","yoga","at","Pompano","Beach","for","Sunday","at","7","am",";","will","it","be","warm","then","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Pompano Beach\")) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :time (NumberAM :number #(Number 7)))) :subject (?= #(String \"yoga\"))))))"}}],"tags":{}}
{"dialogue_id":"fb27c04a-42be-4fa8-89d4-b7f7b817796d","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Exotic Dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 29L (July)) (NumberPM 6L))))) (Event.location_? (?= (LocationKeyphrase.apply \"EPCOT\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Exotic Dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 29L :month ^Month (July)) :time ^Time (NumberPM :number ^Long 6L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"EPCOT\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set up Exotic Dinner for 6 pm on July 29th at EPCOT.","tokens":["Set","up","Exotic","Dinner","for","6","pm","on","July","29","th","at","EPCOT","."]},"agent_utterance":{"described_entities":["entity@1282175416"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"EPCOT\")) :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 29) :month #(Month \"JULY\")) :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"Exotic Dinner\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes those look great","tokens":["Yes","those","look","great"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"that looks good","tokens":["that","looks","good"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (WeatherForEvent (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherForEvent :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What will the weather be like?","tokens":["What","will","the","weather","be","like","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a temperature of about 0.00 °F for \"Exotic Dinner\" in 200 Epcot Center Dr, Orlando, FL 32821 on Monday the 29th from 6:00 to 6:30.","tokens":["It","will","be","clear","with","a","temperature","of","about","0",".","00","°","F","for","\"","Exotic","Dinner","\"","in","200","Epcot","Center","Dr",",","Orlando",",","FL","32821","on","Monday","the","29","th","from","6",":","00","to","6",":","30","."]},"tags":{"original_lispress":"(Yield :output (WeatherForEvent :event (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"sight seeing\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberPM 3L))))) (Event.location_? (?= (LocationKeyphrase.apply \"Lincoln Memorial\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"sight seeing\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Lincoln Memorial\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Thanks, now can you create an event at the Lincoln Memorial for Saturday at 3 pm called \"sight seeing\"","tokens":["Thanks",",","now","can","you","create","an","event","at","the","Lincoln","Memorial","for","Saturday","at","3","pm","called","\"","sight","seeing","\""]},"agent_utterance":{"described_entities":["entity@407989537"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Lincoln Memorial\")) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"sight seeing\"))))))"}}],"tags":{}}
{"dialogue_id":"6ec6f836-b166-4db4-8657-a46330b67342","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.subject_? (?~= \"teacher's meetings\"))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"teacher's meetings\"))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Do you see any teacher's meetings?","tokens":["Do","you","see","any","teacher","'s","meetings","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events named \"teacher's meetings\" on your calendar after right now.","tokens":["I","did","n't","find","any","events","named","\"","teacher","'s","meetings","\"","on","your","calendar","after","right","now","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"teacher's meetings\")))))","do-not-train":""}},{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"meetings\")) (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeek)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"meetings\")) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeek)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Then what meetings do I have this week?","tokens":["Then","what","meetings","do","I","have","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have one event on your calendar. Your \"project review meetings\" is on Thursday from 1:00 to 2:00 PM.","tokens":["You","have","one","event","on","your","calendar",".","Your","\"","project","review","meetings","\"","is","on","Thursday","from","1",":","00","to","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :nonEmptyBase (EventDuringRange :event (Constraint[Event]) :range (ThisWeek)) :subject (?~= #(String \"meetings\")))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (nextDayOfMonth (Today) 7L) (NumberPM 1L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Pam\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 7L) :time ^Time (NumberPM :number ^Long 1L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Pam\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Put lunch with Pam on Thursday the 7th at 1pm.","tokens":["Put","lunch","with","Pam","on","Thursday","the","7","th","at","1","pm","."]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Pam in your address book.","tokens":["I","did","n't","find","anyone","named","Pam","in","your","address","book","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Pam\")))))) :start (?= (DateAtTimeWithDefaults :date (nextDayOfMonth (Today) #(Number 7)) :time (NumberPM :number #(Number 1)))) :subject (?= #(String \"lunch\"))))))","do-not-train":""}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (NumberPM 2L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 2L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Can you make that to 2 pm?","tokens":["Can","you","make","that","to","2","pm","?"]},"agent_utterance":{"described_entities":["entity@419102798"],"original_text":"I’ve encountered an error I haven’t been trained to handle. Can you try a different request?","tokens":["I","’ve","encountered","an","error","I","have","n’t","been","trained","to","handle",".","Can","you","try","a","different","request","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 2))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"402de664-ebde-4ab3-90e6-bbbb12c27c59","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Add dinner with mom at 7","tokens":["Add","dinner","with","mom","at","7"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)","do-not-train":""}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That is going to 8 pm.","tokens":["That","is","going","to","8","pm","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}}],"tags":{}}
{"dialogue_id":"375c68ec-6c77-4440-86f0-18536d8fae14","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (Now) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (Now) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have any meetings right now?","tokens":["Do","I","have","any","meetings","right","now","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 2 events right now. The first is \"business meeting\" today from 4:00 to 6:00 PM.","tokens":["Yes",",","I","found","2","events","right","now",".","The","first","is","\"","business","meeting","\"","today","from","4",":","00","to","6",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (Now) :event (Constraint[Event]))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"67df31ad-0554-4576-908e-8828adc1218b","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"our road trip to the hot springs\")))))) (Event.duration_? (?= (toHours 8))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"our road trip to the hot springs\")))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 8))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you change the location my our road trip to the hot springs and make it last only 8 hours please","tokens":["Can","you","change","the","location","my","our","road","trip","to","the","hot","springs","and","make","it","last","only","8","hours","please"]},"agent_utterance":{"described_entities":["entity@415534050"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"our road trip to the hot springs\"))))))) :update (Constraint[Event] :duration (?= (toHours #(Number 8)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Looks perfect to me","tokens":["Looks","perfect","to","me"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"our road trip to the hot springs\" to be for 8 hours.","tokens":["I","'ve","changed","\"","our","road","trip","to","the","hot","springs","\"","to","be","for","8","hours","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"1871cb4e-1990-4e20-9f1e-79490ca73fdd","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 7L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"mavi\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 7L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"mavi\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"make an appointment with mavi at today 7 pm","tokens":["make","an","appointment","with","mavi","at","today","7","pm"]},"agent_utterance":{"described_entities":["entity@670594584"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"mavi\")))))) :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 7))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberPM 5L)))) (Event.end_? (DateTime.time_? (?= (NumberPM 7L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 5L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 7L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually change the time to between 5 and 7","tokens":["Actually","change","the","time","to","between","5","and","7"]},"agent_utterance":{"described_entities":["entity@1116725031"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 7)))) :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 5))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Good for now","tokens":["Good","for","now"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"It's Very Well","tokens":["It","'s","Very","Well"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (Today) (NumberPM 6L))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (NextTime (NumberPM 3L)) (^(Event) EmptyStructConstraint)))))) (Event.start_? (DateTimeAndConstraint x0 (TimeAfterDateTime x0 (NumberPM 10L))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 6L))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 3L)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeAndConstraint :dateTime1 x0 :dateTime2 ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 10L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"change my 3 pm meeting to sometime between 6 and 10 pm tonight","tokens":["change","my","3","pm","meeting","to","sometime","between","6","and","10","pm","tonight"]},"agent_utterance":{"described_entities":["entity@242911250"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 6)))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (NextTime :time (NumberPM :number #(Number 3))) :event (Constraint[Event])))))) :update (Constraint[Event] :start (DateTimeAndConstraint :dateTime1 x0 :dateTime2 (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 10.0)))))))))"}}],"tags":{}}
{"dialogue_id":"e4f09bb6-cc22-4bf4-8a99-19b4a9ec4819","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))) (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have a meeting with Abby tomorrow","tokens":["Do","I","have","a","meeting","with","Abby","tomorrow"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with Abby tomorrow.","tokens":["No",",","I","did","n't","find","any","events","with","Abby","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\"))) :nonEmptyBase (EventOnDate :date (Tomorrow) :event (Constraint[Event])))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"lunch conference\")))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch conference\")))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is there a lunch conference scheduled for Saturday?","tokens":["Is","there","a","lunch","conference","scheduled","for","Saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event matching \"lunch conference\" on Saturday. It's from 11:00 AM to 2:00 PM.","tokens":["Yes",",","I","found","one","event","matching","\"","lunch","conference","\"","on","Saturday",".","It","'s","from","11",":","00","AM","to","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"lunch conference\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextHolidayFromToday (Holiday.NewYearsEve)) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextHolidayFromToday :holiday ^Holiday (Holiday.NewYearsEve)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have anything planned for New Years eve?","tokens":["Do","I","have","anything","planned","for","New","Years","eve","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events on December 31st.","tokens":["No",",","I","did","n't","find","any","events","on","December","31","st","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextHolidayFromToday :holiday #(Holiday \"NewYearsEve\")) :event (Constraint[Event]))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Craig\")))) (NextWeekList))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Craig\")))) :range ^(Constraint Date) (NextWeekList))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Do I have a meeting with Craig next week?","tokens":["Do","I","have","a","meeting","with","Craig","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event with Craig next week. It's \"Excel Presentation\" on Wednesday the 30th from 9:30 to 11:00 AM.","tokens":["Yes",",","I","found","one","event","with","Craig","next","week",".","It","'s","\"","Excel","Presentation","\"","on","Wednesday","the","30","th","from","9",":","30","to","11",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Craig\")))) :range (NextWeekList))))) #(Number 0)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Thanks","tokens":["Thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"32c64859-db98-480f-b9bc-60182b8fcc50","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"vet appointment\"))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"vet appointment\"))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Did I schedule a vet appointment?","tokens":["Did","I","schedule","a","vet","appointment","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"vet appointment\" on your calendar.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","vet","appointment","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"vet appointment\")))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have an event with Abby tomorrow?","tokens":["Do","I","have","an","event","with","Abby","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event. It's a \"Meeting with Abby Gonano and Damon Straeter\".","tokens":["Yes",",","I","found","one","event",".","It","'s","a","\"","Meeting","with","Abby","Gonano","and","Damon","Straeter","\"","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Claire\")))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Claire\")))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have a meeting with Claire on Friday?","tokens":["Do","I","have","a","meeting","with","Claire","on","Friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with Claire on your calendar on Friday.","tokens":["No",",","I","did","n't","find","any","events","with","Claire","on","your","calendar","on","Friday","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Claire\")))))))) #(Number 0)))"}},{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"lunch\")))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jimbo\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jimbo\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Is Jimbo joining me for lunch on Saturday?","tokens":["Is","Jimbo","joining","me","for","lunch","on","Saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, Jimbo has not responded to the \"Lunch\" invitation.","tokens":["No",",","Jimbo","has","not","responded","to","the","\"","Lunch","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"lunch\"))))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jimbo\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (& (Event.subject_? (?~= \"wine festival\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Deb\"))))) (ThisWeekend))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"wine festival\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Deb\"))))) :range ^(Constraint Date) (ThisWeekend))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have a wine festival to go to with Deb this weekend?","tokens":["Do","I","have","a","wine","festival","to","go","to","with","Deb","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"wine festival\" with Deb on your calendar.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","wine","festival","\"","with","Deb","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Deb\"))) :subject (?~= #(String \"wine festival\"))) :range (ThisWeekend))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"e02f7854-381e-4682-873d-3d9cde651c43","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hello I need help with my calendar","tokens":["Hello","I","need","help","with","my","calendar"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (NextWeekList))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NextWeekList))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I need you to show me my schedule for next week","tokens":["I","need","you","to","show","me","my","schedule","for","next","week"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (NextWeekList))))"}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I need you to create some new events for next week","tokens":["I","need","you","to","create","some","new","events","for","next","week"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Lunch\")) (Event.start_? (DateTime.date_? (NextWeekList)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Create an event for next week Lunch with Barack Obama.","tokens":["Create","an","event","for","next","week","Lunch","with","Barack","Obama","."]},"agent_utterance":{"described_entities":["entity@509903213"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\")))))) :start (Constraint[DateTime] :date (NextWeekList)) :subject (?= #(String \"Lunch\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes.","tokens":["Yes","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar on Tuesday the 21st from 10:00 to 10:30 AM.","tokens":["I","'ve","put","that","on","your","calendar","on","Tuesday","the","21","st","from","10",":","00","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"Doctor's appointment\")) (NextWeekList))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Doctor's appointment\")) :range ^(Constraint Date) (NextWeekList))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Search for Doctor's appointment next week","tokens":["Search","for","Doctor","'s","appointment","next","week"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"Doctor's appointment\"))) :range (NextWeekList))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"doctor's appointment\")) (Event.start_? (DateTime.date_? (NextWeekList)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"doctor's appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Add a doctor's appointment next week","tokens":["Add","a","doctor","'s","appointment","next","week"]},"agent_utterance":{"described_entities":["entity@308497092"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (NextWeekList)) :subject (?= #(String \"doctor's appointment\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (?= (MD 21L (May))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 21L :month ^Month (May))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"May 21st","tokens":["May","21","st"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 21) :month #(Month \"MAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.subject_? (?~= \"coworker syncs\"))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"coworker syncs\"))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"Show me coworker syncs","tokens":["Show","me","coworker","syncs"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"coworker syncs\")))))"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (MD 22L (May)) (NumberPM 2L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"Coworker syncs\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 4L))))) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jerri Skinner\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Fiona Mason\")))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 22L :month ^Month (May)) :time ^Time (NumberPM :number ^Long 2L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Coworker syncs\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 4L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jerri Skinner\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Fiona Mason\")))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":9,"user_utterance":{"original_text":"Add Coworker syncs with Jerri Skinner, Fiona Mason May 22nd at 2 pm to 4 pm","tokens":["Add","Coworker","syncs","with","Jerri","Skinner",",","Fiona","Mason","May","22","nd","at","2","pm","to","4","pm"]},"agent_utterance":{"described_entities":["entity@716695994"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (MD :day #(Number 22) :month #(Month \"MAY\")) :time (NumberPM :number #(Number 2)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jerri Skinner\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Fiona Mason\"))))))) :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 4)))) :start (?= x0) :subject (?= #(String \"Coworker syncs\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":10,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 23L (May)) (NumberPM 3L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Page Ashworth\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 23L :month ^Month (May)) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Page Ashworth\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":11,"user_utterance":{"original_text":"Add Lunch with Page Ashworth on May 23rd at 3 pm","tokens":["Add","Lunch","with","Page","Ashworth","on","May","23","rd","at","3","pm"]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Page Ashworth in your address book.","tokens":["I","did","n't","find","anyone","named","Page","Ashworth","in","your","address","book","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Page Ashworth\")))))) :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 23) :month #(Month \"MAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"Lunch\"))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 23L (May)) (NumberPM 3L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Paige Ashworth\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 23L :month ^Month (May)) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Paige Ashworth\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":12,"user_utterance":{"original_text":"Add Lunch with Paige Ashworth May 23rd at 3 PM","tokens":["Add","Lunch","with","Paige","Ashworth","May","23","rd","at","3","PM"]},"agent_utterance":{"described_entities":["entity@1876737387"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Paige Ashworth\")))))) :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 23) :month #(Month \"MAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"Lunch\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":13,"user_utterance":{"original_text":"Good.","tokens":["Good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"lunch\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":14,"user_utterance":{"original_text":"Show me lunch with Barack Obama","tokens":["Show","me","lunch","with","Barack","Obama"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event. It's a \"Lunch\".","tokens":["I","found","one","event",".","It","'s","a","\"","Lunch","\"","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\"))) :subject (?~= #(String \"lunch\")))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberPM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":15,"user_utterance":{"original_text":"Change the time to 12 noon to 1 pm","tokens":["Change","the","time","to","12","noon","to","1","pm"]},"agent_utterance":{"described_entities":["entity@32491518"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":16,"user_utterance":{"original_text":"no","tokens":["no"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"Lunch\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\"))))))))) (Event.start_? (DateTime.time_? (?= (Noon)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\"))))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (Noon)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":17,"user_utterance":{"original_text":"Change the time on Lunch with Barack Obama to Noon","tokens":["Change","the","time","on","Lunch","with","Barack","Obama","to","Noon"]},"agent_utterance":{"described_entities":["entity@1747017577"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\"))) :subject (?~= #(String \"Lunch\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (Noon)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.end_? (DateTime.time_? (?= (NumberPM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":18,"user_utterance":{"original_text":"change end time to 1 pm","tokens":["change","end","time","to","1","pm"]},"agent_utterance":{"described_entities":["entity@365366338"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))))))","do-not-train":""}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (NextWeekList))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NextWeekList))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":19,"user_utterance":{"original_text":"Show me my calendar for next week","tokens":["Show","me","my","calendar","for","next","week"]},"agent_utterance":{"described_entities":[],"original_text":"Here's what I found:","tokens":["Here","'s","what","I","found",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (NextWeekList))))"}}],"tags":{}}
{"dialogue_id":"e7892763-d8cc-4cd1-bf3f-b25a4bb6a498","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jackie\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jackie\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Cancel my meeting with Jackie today.","tokens":["Cancel","my","meeting","with","Jackie","today","."]},"agent_utterance":{"described_entities":["entity@1310911377"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jackie\"))))))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (FindManager (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jackie\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jackie\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Add Jackie's skip to the list of attendees.","tokens":["Add","Jackie","'s","skip","to","the","list","of","attendees","."]},"agent_utterance":{"described_entities":["entity@1548132777"],"original_text":"I could not find Dan Schoffel's manager.","tokens":["I","could","not","find","Dan","Schoffel","'s","manager","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jackie\"))))))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Jackie's skip cannot make it either. Please cancel the meeting.","tokens":["Jackie","'s","skip","can","not","make","it","either",".","Please","cancel","the","meeting","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (& (Event.start_? (DateTime.date_? (NumberWeekOfMonth 1L (NextMonth)))) (Event.attendees_? (& (AttendeeListHasRecipient (FindManager (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jackie\")))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dan Schoffel\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NumberWeekOfMonth :number ^Long 1L :month ^Month (NextMonth)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jackie\")))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dan Schoffel\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Reschedule that same meeting with Jackie's skip and Dan Schoffel the first week next month.","tokens":["Reschedule","that","same","meeting","with","Jackie","'s","skip","and","Dan","Schoffel","the","first","week","next","month","."]},"agent_utterance":{"described_entities":["entity@1548132777"],"original_text":"I could not find Dan's manager.","tokens":["I","could","not","find","Dan","'s","manager","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (FindManager :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jackie\")))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dan Schoffel\"))))))) :start (Constraint[DateTime] :date (NumberWeekOfMonth :month (NextMonth) :number #(Number 1)))))))","do-not-train":""}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"James\"))) (AttendeeListHasRecipient (FindManager (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jame\")))))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"James\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jame\")))))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"When is the meeting with James and Jame's skip?","tokens":["When","is","the","meeting","with","James","and","Jame","'s","skip","?"]},"agent_utterance":{"described_entities":["entity@1548132777"],"original_text":"I could not find Dan's manager.","tokens":["I","could","not","find","Dan","'s","manager","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"James\"))) (AttendeeListHasRecipient :recipient (FindManager :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jame\")))))))))))))))"}}],"tags":{}}
{"dialogue_id":"22dbd5fa-0bc8-4e5d-97fa-ee3aec99abba","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Batman\")))))))) (do (Yield (Event.location x0)) (Yield (Event.start x0))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Batman\")))))))) ^Unit (^(Unit Unit) do :arg1 ^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj x0)) :arg2 ^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj x0))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you tell me where and when my appointment with Batman will be?","tokens":["Can","you","tell","me","where","and","when","my","appointment","with","Batman","will","be","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's located at Bat Cave. It starts on Saturday at 10:00 AM.","tokens":["It","'s","located","at","Bat","Cave",".","It","starts","on","Saturday","at","10",":","00","AM","."]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Batman\")))))))) (do (Yield :output (:location x0)) (Yield :output (:start x0))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Okay thanks for trying.","tokens":["Okay","thanks","for","trying","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you find me an hour free around noon this week to have lunch with my wife?","tokens":["Can","you","find","me","an","hour","free","around","noon","this","week","to","have","lunch","with","my","wife","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book. Please use a full name and try again.","tokens":["I","can","only","look","up","names","in","your","address","book",".","Please","use","a","full","name","and","try","again","."]},"tags":{"original_lispress":"(FenceAttendee)"}}],"tags":{}}
{"dialogue_id":"d59fc13e-9860-4c5b-913f-75d6dfd025c1","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Sunday)) (NumberPM 5L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :time ^Time (NumberPM :number ^Long 5L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I have dinner on sunday at 5pm.","tokens":["I","have","dinner","on","sunday","at","5","pm","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :time (NumberPM :number #(Number 5)))) :subject (?= #(String \"dinner\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.showAs_? (?= (ShowAsStatus.Busy))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.Busy))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you mark that as busy?","tokens":["Can","you","mark","that","as","busy","?"]},"agent_utterance":{"described_entities":["entity@1361141629"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :showAs (?= #(ShowAsStatus \"Busy\"))))))"}}],"tags":{}}
{"dialogue_id":"bf1803f5-f36e-4207-83ea-1a20fe596fdc","turns":[{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Can you tell me where Sam Jackson will performing this weekend?","tokens":["Can","you","tell","me","where","Sam","Jackson","will","performing","this","weekend","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (NumberWeekOfMonth 3L (January)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (NumberWeekOfMonth :number ^Long 3L :month ^Month (January)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Do I have anything scheduled on the third week of January?","tokens":["Do","I","have","anything","scheduled","on","the","third","week","of","January","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event between January 13, 2019 and January 19, 2019. It's \"Foo Fighters concert\" from 7:00 to 7:30 PM.","tokens":["Yes",",","I","found","one","event","between","January","13",",","2019","and","January","19",",","2019",".","It","'s","\"","Foo","Fighters","concert","\"","from","7",":","00","to","7",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (NumberWeekOfMonth :month #(Month \"JANUARY\") :number #(Number 3)))))) #(Number 0)))","do-not-train":""}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Eh, I'm gonna be out of the office. Cancel that.","tokens":["Eh",",","I","'m","gon","na","be","out","of","the","office",".","Cancel","that","."]},"agent_utterance":{"described_entities":["entity@316567148"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"60674404-09ed-4b1e-853f-b74cfe512919","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"office meeting\")) (NextWeekList)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"office meeting\")) :range ^(Constraint Date) (NextWeekList)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Look at my schedule and give me the starting time of the office meeting next week.","tokens":["Look","at","my","schedule","and","give","me","the","starting","time","of","the","office","meeting","next","week","."]},"agent_utterance":{"described_entities":[],"original_text":"It starts on Wednesday the 26th at 12:00 PM.","tokens":["It","starts","on","Wednesday","the","26","th","at","12",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"office meeting\"))) :range (NextWeekList)))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (TimeAfterDateTime (Execute (refer (extensionConstraint (^(DateTime) EmptyStructConstraint)))) (NumberPM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime ^DateTime (^(DateTime) Execute :intension ^(CalflowIntension DateTime) (^(DateTime) refer :constraint ^(Constraint (CalflowIntension DateTime)) (^(DateTime) extensionConstraint :constraint ^(Constraint DateTime) (^(DateTime) EmptyStructConstraint)))) :time ^Time (NumberPM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":1,"user_utterance":{"original_text":"add another meeting at 1:00 pm after that one","tokens":["add","another","meeting","at","1",":","00","pm","after","that","one"]},"agent_utterance":{"described_entities":["entity@1649908157"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (TimeAfterDateTime :dateTime (Execute :intension (refer (extensionConstraint (Constraint[DateTime])))) :time (NumberPM :number #(Number 1))))))))","do-not-train":""}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"What is on my schedule for that Saturday?","tokens":["What","is","on","my","schedule","for","that","Saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event]))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"4459d77b-1cdd-4d25-908d-49f176074853","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"$40 dinner date\")) (Event.start_? (DateTimeConstraint (Night) (Today)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"$40 dinner date\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Night) :date ^Date (Today)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"create a $40 dinner date tonight","tokens":["create","a","$","40","dinner","date","tonight"]},"agent_utterance":{"described_entities":["entity@645848351"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Night) :date (Today)) :subject (?= #(String \"$40 dinner date\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The second one will work.","tokens":["The","second","one","will","work","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Bars & Music\")) (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 10L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Bars & Music\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 10L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Great, please also add Bars & Music at 10:00 pm tonight as well.","tokens":["Great",",","please","also","add","Bars","&","Music","at","10",":","00","pm","tonight","as","well","."]},"agent_utterance":{"described_entities":["entity@1951857646"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 10.0)))) :subject (?= #(String \"Bars & Music\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Great, thanks!","tokens":["Great",",","thanks","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"%Meeting\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"%Meeting\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"When is my %Meeting?","tokens":["When","is","my","%","Meeting","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"%Meeting\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","%","Meeting","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"%Meeting\"))))))))"}}],"tags":{}}
{"dialogue_id":"def7b952-5381-434f-a73a-89f62ed6ba7e","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Martha's birthday party\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Martha's birthday party\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is Martha's birthday party?","tokens":["When","is","Martha","'s","birthday","party","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"Martha's birthday party\" is on Thursday the 21st at 8:00 PM.","tokens":["The","event","matching","\"","Martha","'s","birthday","party","\"","is","on","Thursday","the","21","st","at","8",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Martha's birthday party\"))))))))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.date_? (?= (ClosestDayOfWeek (DateTime.date (Event.start x0)) (Friday)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :dow ^DayOfWeek (Friday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Reschedule it for Friday at the same time.","tokens":["Reschedule","it","for","Friday","at","the","same","time","."]},"agent_utterance":{"described_entities":["entity@1901764188"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (ClosestDayOfWeek :date (:date (:start x0)) :dow #(DayOfWeek \"FRIDAY\")))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes.","tokens":["Yes","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Martha's birthday party\" to be.","tokens":["I","'ve","changed","\"","Martha","'s","birthday","party","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Michelle\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Michelle\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add that Michelle is going to the birthday party too.","tokens":["Add","that","Michelle","is","going","to","the","birthday","party","too","."]},"agent_utterance":{"described_entities":["entity@1733020461"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Michelle\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Looks great!","tokens":["Looks","great","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Martha's birthday party\" to be Michelle.","tokens":["I","'ve","changed","\"","Martha","'s","birthday","party","\"","to","be","Michelle","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"78e701d2-56bf-4e2f-b505-facb36f9126b","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Julie\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Julie\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my appointment with Julie today?","tokens":["When","is","my","appointment","with","Julie","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"It starts today at 11:00 PM.","tokens":["It","starts","today","at","11",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Julie\"))))))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"ok.. thank you","tokens":["ok","..","thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Emily\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Emily\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Please add Emily to my meeting with Julie.","tokens":["Please","add","Emily","to","my","meeting","with","Julie","."]},"agent_utterance":{"described_entities":["entity@799863286"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Emily\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Ok thank you","tokens":["Ok","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with Julie\" to be Emily.","tokens":["I","'ve","changed","\"","Meeting","with","Julie","\"","to","be","Emily","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(FenceSwitchTabs)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSwitchTabs)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"thanks, please email that to everyone","tokens":["thanks",",","please","email","that","to","everyone"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I don't support that capability yet.","tokens":["I","do","n't","support","that","capability","yet","."]},"tags":{"original_lispress":"(FenceSwitchTabs)"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jacob\"))))))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jacob\"))))))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":5,"user_utterance":{"original_text":"When is my next event with Jacob","tokens":["When","is","my","next","event","with","Jacob"]},"agent_utterance":{"described_entities":[],"original_text":"It starts on Saturday at 3:00 PM.","tokens":["It","starts","on","Saturday","at","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jacob\"))))))) :number #(Number 1))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"92cd49d6-6b57-4eb4-b8dd-8bc71bfc9d14","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Today) (^(Event) EmptyStructConstraint)) (Night))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Night))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is on the calendar for tonight?","tokens":["What","is","on","the","calendar","for","tonight","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event])) :timeRange (Night))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"dinner\")) (Event.start_? (?= (NextTime (NumberPM 6L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jen\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 6L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jen\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Add dinner with Jen at 6.","tokens":["Add","dinner","with","Jen","at","6","."]},"agent_utterance":{"described_entities":["entity@1021147309"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jen\")))))) :start (?= (NextTime :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"dinner\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes, but it should last for 1 hour.","tokens":["Yes",",","but","it","should","last","for","1","hour","."]},"agent_utterance":{"described_entities":["entity@116703394"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 1)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"great","tokens":["great"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"f444fc30-f9fa-4dfd-977d-289a3c932f6f","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"meeting after work\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"meeting after work\")))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"get rid of meeting after work","tokens":["get","rid","of","meeting","after","work"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that from your calendar.","tokens":["I","'ve","deleted","that","from","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"meeting after work\"))))))))))","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Do I have any meetings tomorrow?","tokens":["Do","I","have","any","meetings","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events tomorrow.","tokens":["No",",","I","did","n't","find","any","events","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))) #(Number 0)))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Updates\")) (Event.start_? (?= (NextTime (HourMinutePm 1L 25L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Updates\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (HourMinutePm :hours ^Long 1L :minutes ^Long 25L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Make a meeting called \"Updates\" at 1:25 pm.","tokens":["Make","a","meeting","called","\"","Updates","\"","at","1",":","25","pm","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (HourMinutePm :hours #(Number 1) :minutes #(Number 25)))) :subject (?= #(String \"Updates\"))))))","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Thanks","tokens":["Thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"c938fff7-857e-4704-8e28-3dedf1620772","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"date\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Friday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"date\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Friday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add date for Friday","tokens":["Add","date","for","Friday"]},"agent_utterance":{"described_entities":["entity@1430220070"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"FRIDAY\")))) :subject (?= #(String \"date\"))))))"}}],"tags":{}}
{"dialogue_id":"a7008505-6b7f-4515-aeb3-df5cf052fb6a","turns":[{"lispress":"(Yield (== (Event.organizer (FindNumNextEvent (^(Event) EmptyStructConstraint) 1L)) (FindManager (toRecipient (CurrentUser)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Recipient) == :x ^Recipient (Event.organizer :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :number ^Long 1L)) :y ^Recipient (FindManager :recipient ^Recipient (toRecipient :person ^Person (CurrentUser)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hello is my boss organizing this next event on my calendar","tokens":["Hello","is","my","boss","organizing","this","next","event","on","my","calendar"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. David Lax is the organizer of \"Fishing\".","tokens":["Yes",".","David","Lax","is","the","organizer","of","\"","Fishing","\"","."]},"tags":{"original_lispress":"(Yield :output (== (:organizer (FindNumNextEvent :constraint (Constraint[Event]) :number #(Number 1))) (FindManager :recipient (toRecipient (CurrentUser)))))"}},{"lispress":"(Yield (== (Event.organizer (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Company picnic\")))))) (FindManager (toRecipient (CurrentUser)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Recipient) == :x ^Recipient (Event.organizer :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Company picnic\")))))) :y ^Recipient (FindManager :recipient ^Recipient (toRecipient :person ^Person (CurrentUser)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is my manager the one organizing the Company picnic?","tokens":["Is","my","manager","the","one","organizing","the","Company","picnic","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. David is the organizer of \"Company picnic\".","tokens":["Yes",".","David","is","the","organizer","of","\"","Company","picnic","\"","."]},"tags":{"original_lispress":"(Yield :output (== (:organizer (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Company picnic\"))))))) (FindManager :recipient (toRecipient (CurrentUser)))))"}}],"tags":{}}
{"dialogue_id":"8c212632-8bed-4f60-a7c6-3878245592b3","turns":[{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Josephine\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Josephine\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Josephine","tokens":["Josephine"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Josephine:","tokens":["Here","is","the","contact","information","for","Josephine",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Josephine\")))))))"}},{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ryleigh\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ryleigh\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Ryleigh","tokens":["Ryleigh"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Ryleigh:","tokens":["Here","is","the","contact","information","for","Ryleigh",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ryleigh\")))))))"}}],"tags":{}}
{"dialogue_id":"b2ec3a74-7844-4120-8b68-1442a152a5f2","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 8L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 8L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make a appointment to night 8PM","tokens":["Make","a","appointment","to","night","8","PM"]},"agent_utterance":{"described_entities":["entity@1728948323"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 8))))))))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, but this if for the Spaghetti Factory and I'm wondering if they have large reservation tables available.","tokens":["Yes",",","but","this","if","for","the","Spaghetti","Factory","and","I","'m","wondering","if","they","have","large","reservation","tables","available","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"lunch\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Where will I be eating lunch this Saturday?","tokens":["Where","will","I","be","eating","lunch","this","Saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"lunch\" on Saturday is located at Burger King.","tokens":["The","event","matching","\"","lunch","\"","on","Saturday","is","located","at","Burger","King","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"lunch\")))))))))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"lunch\")))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")))))) :response ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Who will also be at that lunch?","tokens":["Who","will","also","be","at","that","lunch","?"]},"agent_utterance":{"described_entities":[],"original_text":"There are no attendees who have accepted \"lunch\".","tokens":["There","are","no","attendees","who","have","accepted","\"","lunch","\"","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"lunch\"))))))) :response #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (ForwardEventWrapper (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))) (append (append (^(Recipient) List.Nil) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Daniel\")))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dana\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit) Yield :output ^Unit (ForwardEventWrapper :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))) :recipients ^(List Recipient) (^(Recipient) append :list ^(List Recipient) (^(Recipient) append :list ^(List Recipient) (^(Recipient) List.Nil) :value ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Daniel\")))))) :value ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dana\"))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Ok forward it to Daniel and Dana","tokens":["Ok","forward","it","to","Daniel","and","Dana"]},"agent_utterance":{"described_entities":["entity@1913482591"],"original_text":"Should I forward \"lunch\" to Daniel and Dana?","tokens":["Should","I","forward","\"","lunch","\"","to","Daniel","and","Dana","?"]},"tags":{"original_lispress":"(Yield :output (ForwardEventWrapper :event (Execute :intension (refer (extensionConstraint (Constraint[Event])))) :recipients (append (append #(List[Recipient] []) (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Daniel\")))))) (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dana\"))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I forwarded that to Daniel and Dana.","tokens":["I","forwarded","that","to","Daniel","and","Dana","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"7cdc5979-b1e6-4abb-8a95-593c48bb241a","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Paige Ashworth\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Paige Ashworth\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi I would like to create an event with Paige Ashworth","tokens":["Hi","I","would","like","to","create","an","event","with","Paige","Ashworth"]},"agent_utterance":{"described_entities":["entity@190460837"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Paige Ashworth\"))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (?= (Thursday))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) ?= :reference ^DayOfWeek (Thursday))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Yes May 9, Thu","tokens":["Yes","May","9",",","Thu"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (?= #(DayOfWeek \"THURSDAY\"))))) :intension (refer (ActionIntensionConstraint)))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I would also like to create an event with Barack Obama","tokens":["I","would","also","like","to","create","an","event","with","Barack","Obama"]},"agent_utterance":{"described_entities":["entity@1136767912"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\"))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (?= (Thursday))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) ?= :reference ^DayOfWeek (Thursday))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Yes May 9, Thu","tokens":["Yes","May","9",",","Thu"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (?= #(DayOfWeek \"THURSDAY\"))))) :intension (refer (ActionIntensionConstraint)))))","do-not-train":""}},{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I need to update my meeting with Paige Ashworth","tokens":["I","need","to","update","my","meeting","with","Paige","Ashworth"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"paige ashworth\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"paige ashworth\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"I need to remove my meeting with paige ashworth","tokens":["I","need","to","remove","my","meeting","with","paige","ashworth"]},"agent_utterance":{"described_entities":["entity@365693437"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"paige ashworth\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event paige ashworth.","tokens":["I","'ve","deleted","your","event","paige","ashworth","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"I would like to search for my meeting with Barack Obama","tokens":["I","would","like","to","search","for","my","meeting","with","Barack","Obama"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 matching event on your calendar. It's \"Meeting with Barack Obama\" from 10:00 to 10:30 AM.","tokens":["I","found","1","matching","event","on","your","calendar",".","It","'s","\"","Meeting","with","Barack","Obama","\"","from","10",":","00","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\"))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"Remove this event","tokens":["Remove","this","event"]},"agent_utterance":{"described_entities":["entity@467169121"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":9,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"37b9c4d7-52cf-4bef-967d-eb945f2cff81","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"night jog\")) (Event.start_? (DateTimeConstraint (Night) (NextDOW (Saturday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"night jog\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Night) :date ^Date (NextDOW :dow ^DayOfWeek (Saturday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I want to plan a night jog for Saturday Night","tokens":["I","want","to","plan","a","night","jog","for","Saturday","Night"]},"agent_utterance":{"described_entities":["entity@163451933"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Night) :date (NextDOW :dow #(DayOfWeek \"SATURDAY\"))) :subject (?= #(String \"night jog\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (negate (Weekend))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) negate :constraint ^(Constraint DayOfWeek) (Weekend))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"no, make it so it doesn't start on the weekend","tokens":["no",",","make","it","so","it","does","n't","start","on","the","weekend"]},"agent_utterance":{"described_entities":["entity@2049247106"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (negate (Weekend))))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"buy running shoes\")) (Event.start_? (DateTime.date_? (ThisWeekend))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"buy running shoes\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (ThisWeekend))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes and add buy running shoes this weekend","tokens":["Yes","and","add","buy","running","shoes","this","weekend"]},"agent_utterance":{"described_entities":["entity@2033312552"],"original_text":"I've put that on your calendar tomorrow from 5:00 to 5:30 PM. __BREAK Does one of these work?","tokens":["I","'ve","put","that","on","your","calendar","tomorrow","from","5",":","00","to","5",":","30","PM",".","Does","one","of","these","work","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (ThisWeekend)) :subject (?= #(String \"buy running shoes\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (negate (Weekend))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) negate :constraint ^(Constraint DayOfWeek) (Weekend))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I would prefer it to not be on the weekend","tokens":["I","would","prefer","it","to","not","be","on","the","weekend"]},"agent_utterance":{"described_entities":["entity@1794971462"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (negate (Weekend))))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.day_? (?= (Day.apply 24L))))) (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Hockey Game\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Sunday))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.day_? :obj ^(Constraint Day) (^(Day) ?= :reference ^Day (Day.apply :value ^Long 24L))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Hockey Game\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Sunday))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yes the 24th. Can you schedule a Hockey Game for sunday?","tokens":["yes","the","24","th",".","Can","you","schedule","a","Hockey","Game","for","sunday","?"]},"agent_utterance":{"described_entities":["entity@1827568582"],"original_text":"I've put that on your calendar. __BREAK Does one of these work?","tokens":["I","'ve","put","that","on","your","calendar",".","Does","one","of","these","work","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :day (?= #(Number 24))))) :intension (refer (ActionIntensionConstraint))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"SUNDAY\")))) :subject (?= #(String \"Hockey Game\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (negate (Weekend))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) negate :constraint ^(Constraint DayOfWeek) (Weekend))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"please make it not on the weekend","tokens":["please","make","it","not","on","the","weekend"]},"agent_utterance":{"described_entities":["entity@1735472812"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (negate (Weekend))))))))"}}],"tags":{}}
{"dialogue_id":"39d73aed-f800-4c66-ba39-1931a7bcf9d2","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"soccer practice\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"soccer practice\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi, can you please check what time my soccer practice is?","tokens":["Hi",",","can","you","please","check","what","time","my","soccer","practice","is","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events matching \"soccer practice\".","tokens":["I","did","n't","find","any","events","matching","\"","soccer","practice","\"","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"soccer practice\"))))))))"}},{"lispress":"(FenceRecurring)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceRecurring)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"all right. Add 5pm every Wednesday for soccer practice.","tokens":["all","right",".","Add","5","pm","every","Wednesday","for","soccer","practice","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I am not able to process recurring events right now.","tokens":["I","am","not","able","to","process","recurring","events","right","now","."]},"tags":{"original_lispress":"(FenceRecurring)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Wednesday)) (NumberPM 5L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (NumberPM :number ^Long 5L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Then add 5pm for coming wednesday","tokens":["Then","add","5","pm","for","coming","wednesday"]},"agent_utterance":{"described_entities":["entity@384394343"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (NumberPM :number #(Number 5))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Looks good","tokens":["Looks","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"change the duration to 1 hour","tokens":["change","the","duration","to","1","hour"]},"agent_utterance":{"described_entities":["entity@196143677"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :duration (?= (toHours #(Number 1)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be for an hour.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","for","an","hour","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.date_? (?= (ClosestDayOfWeek (DateTime.date (Event.start x0)) (Thursday)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :dow ^DayOfWeek (Thursday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"actually it is Thursday, not wednesday","tokens":["actually","it","is","Thursday",",","not","wednesday"]},"agent_utterance":{"described_entities":["entity@937616053"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (ClosestDayOfWeek :date (:date (:start x0)) :dow #(DayOfWeek \"THURSDAY\")))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"yep","tokens":["yep"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"perfect","tokens":["perfect"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":9,"user_utterance":{"original_text":"that is it. thanks","tokens":["that","is","it",".","thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":10,"user_utterance":{"original_text":"bye!","tokens":["bye","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"9669d973-ea5c-42a8-a8d6-de37f35a187c","turns":[{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Tomorrow)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"What is the forecast for tomorrow","tokens":["What","is","the","forecast","for","tomorrow"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F tomorrow.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Tomorrow)))))","do-not-train":""}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"when is the next rain expected?","tokens":["when","is","the","next","rain","expected","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)"}},{"lispress":"(Yield (WillRain (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Tomorrow))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"is it going to rain tomorrow?","tokens":["is","it","going","to","rain","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% tomorrow.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Tomorrow))))))"}},{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"what will the weather be during the Dodger game?","tokens":["what","will","the","weather","be","during","the","Dodger","game","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)","do-not-train":""}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (NextPeriod (toDays 5)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextPeriod :period ^Period (toDays :days ^Number 5)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"what is the 5 day forecast","tokens":["what","is","the","5","day","forecast"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a high of 0.00 °F and a low of 0.00 °F today and Tuesday the 30th.","tokens":["It","is","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","today","and","Tuesday","the","30","th","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (NextPeriod :period (toDays #(Number 5))))))"}},{"lispress":"(Yield (IsSnowy (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Minneapolis\"))) (?= (Now)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (IsSnowy :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Minneapolis\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"is it snowing in Minneapolis","tokens":["is","it","snowing","in","Minneapolis"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The total snowfall is 0.00 inches right now.","tokens":["Yes",".","The","total","snowfall","is","0",".","00","inches","right","now","."]},"tags":{"original_lispress":"(Yield :output (IsSnowy :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Minneapolis\"))) :time (?= (Now)))))"}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"when is daylight savings? will the weather change then?","tokens":["when","is","daylight","savings","?","will","the","weather","change","then","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)"}},{"lispress":"(Yield (WillRain (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (NextPeriod (toDays 10))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextPeriod :period ^Period (toDays :days ^Number 10))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"are there any rain days in the next 10 days","tokens":["are","there","any","rain","days","in","the","next","10","days"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% today and November 4th.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","today","and","November","4","th","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (NextPeriod :period (toDays #(Number 10.0)))))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Tomorrow)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":8,"user_utterance":{"original_text":"what is the weather tomorrow at the beach","tokens":["what","is","the","weather","tomorrow","at","the","beach"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F tomorrow.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Tomorrow)))))","do-not-train":""}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (& (^(LocationKeyphrase) roleConstraint (Path.apply \"place\")) (extensionConstraint (^(LocationKeyphrase) AlwaysTrueConstraint))) (intension (LocationKeyphrase.apply \"venice beach\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic LocationKeyphrase) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension LocationKeyphrase)) (^((CalflowIntension LocationKeyphrase)) & :c1 ^(Constraint (CalflowIntension LocationKeyphrase)) (^(LocationKeyphrase) roleConstraint :path ^Path (Path.apply :inner ^String \"place\")) :c2 ^(Constraint (CalflowIntension LocationKeyphrase)) (^(LocationKeyphrase) extensionConstraint :constraint ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) AlwaysTrueConstraint))) :value ^(CalflowIntension LocationKeyphrase) (^(LocationKeyphrase) intension :extension ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"venice beach\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":9,"user_utterance":{"original_text":"What about venice beach?","tokens":["What","about","venice","beach","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The total snowfall is 0.00 inches today at 10:32 PM.","tokens":["Yes",".","The","total","snowfall","is","0",".","00","inches","today","at","10",":","32","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"place\"))) (extensionConstraint (AlwaysTrueConstraint[LocationKeyphrase]))) :value (intension #(LocationKeyphrase \"venice beach\")))))"}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":10,"user_utterance":{"original_text":"is there any ozone warning this week","tokens":["is","there","any","ozone","warning","this","week"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)"}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":11,"user_utterance":{"original_text":"how much smog is there this week?","tokens":["how","much","smog","is","there","this","week","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)"}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":12,"user_utterance":{"original_text":"is the forecast average for this time of year","tokens":["is","the","forecast","average","for","this","time","of","year"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Tomorrow)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":13,"user_utterance":{"original_text":"what are the records for tomorrow","tokens":["what","are","the","records","for","tomorrow"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F tomorrow.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Tomorrow)))))","do-not-train":""}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":14,"user_utterance":{"original_text":"what is the record high for LA on Oct 24","tokens":["what","is","the","record","high","for","LA","on","Oct","24"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)"}},{"lispress":"(FenceWeather)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceWeather)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":15,"user_utterance":{"original_text":"Do you know when an earthquake is coming","tokens":["Do","you","know","when","an","earthquake","is","coming"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't answer that with the information I have access to.","tokens":["Sorry",",","I","ca","n't","answer","that","with","the","information","I","have","access","to","."]},"tags":{"original_lispress":"(FenceWeather)"}},{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":16,"user_utterance":{"original_text":"does weather cause earthquakes","tokens":["does","weather","cause","earthquakes"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"27aa6c26-d1f5-45d2-adfd-2411e8550aef","turns":[{"lispress":"(Yield (AttendeesWithNotResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"party\")))))) (ResponseStatusType.None)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithNotResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"party\")))))) :response ^ResponseStatusType (ResponseStatusType.None)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Who has RSVP to the party?","tokens":["Who","has","RSVP","to","the","party","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have responded to \"party\": Jake Cobb and Elli Parker.","tokens":["Here","is","the","list","of","attendees","who","have","responded","to","\"","party","\"",":","Jake","Cobb","and","Elli","Parker","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithNotResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"party\"))))))) :response #(ResponseStatusType \"None\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Lupe Fiasco concert\")))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Lupe Fiasco concert\")))))) :response ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Who has accepted the Lupe Fiasco concert invite?","tokens":["Who","has","accepted","the","Lupe","Fiasco","concert","invite","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have accepted \"Lupe Fiasco concert\": Abby Gonano, Jennifer Watts, and Kim Possible.","tokens":["Here","is","the","list","of","attendees","who","have","accepted","\"","Lupe","Fiasco","concert","\"",":","Abby","Gonano",",","Jennifer","Watts",",","and","Kim","Possible","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Lupe Fiasco concert\"))))))) :response #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (> (size (AttendeesWithNotResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"Santana concert\")) (Event.location_? (?= (LocationKeyphrase.apply \"Gorge\")))))))) (ResponseStatusType.Accepted))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Attendee) size :list ^(List Attendee) (AttendeesWithNotResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Santana concert\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Gorge\")))))))) :response ^ResponseStatusType (ResponseStatusType.Accepted))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"did anyone not accept the Santana concert at the Gorge?","tokens":["did","anyone","not","accept","the","Santana","concert","at","the","Gorge","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one attendee who has not accepted \"Santana concert\".","tokens":["Yes",",","I","found","one","attendee","who","has","not","accepted","\"","Santana","concert","\"","."]},"tags":{"original_lispress":"(Yield :output (> (size (AttendeesWithNotResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Gorge\")) :subject (?~= #(String \"Santana concert\"))))))) :response #(ResponseStatusType \"Accepted\"))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"104c0317-0480-49f4-8b8c-1a99daded25e","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"car shopping\")))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.time_? (?= (ConvertTimeToPM (DateTime.time (Event.start x0))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"car shopping\")))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (ConvertTimeToPM :time ^Time (DateTime.time :obj ^DateTime (Event.start :obj x0))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Change car shopping to be in the PM","tokens":["Change","car","shopping","to","be","in","the","PM"]},"agent_utterance":{"described_entities":["entity@1642056505"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"car shopping\"))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (ConvertTimeToPM :time (:time (:start x0))))))))))"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Cow Hopping\")))))) (do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.time_? (?= (ConvertTimeToAM (DateTime.time (Event.start x0)))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Cow Hopping\")))))) ^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (ConvertTimeToAM :time ^Time (DateTime.time :obj ^DateTime (Event.start :obj x0)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That looks good. Now update Cow Hopping to be in the AM","tokens":["That","looks","good",".","Now","update","Cow","Hopping","to","be","in","the","AM"]},"agent_utterance":{"described_entities":["entity@1726489911"],"original_text":"I've changed \"car shopping\" to be at 1:00. __BREAK Is this the change you want to make?","tokens":["I","'ve","changed","\"","car","shopping","\"","to","be","at","1",":","00",".","Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Cow Hopping\"))))))) (do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (ConvertTimeToAM :time (:time (:start x0)))))))))))"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (nextDayOfMonth (Today) 30L) (Event.subject_? (?~= \"Coffee Date\"))))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.time_? (?= (ConvertTimeToAM (DateTime.time (Event.start x0))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 30L) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Coffee Date\"))))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (ConvertTimeToAM :time ^Time (DateTime.time :obj ^DateTime (Event.start :obj x0))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Make my Coffee Date on the 30th happen in the AM","tokens":["Make","my","Coffee","Date","on","the","30","th","happen","in","the","AM"]},"agent_utterance":{"described_entities":["entity@1003179792"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (nextDayOfMonth (Today) #(Number 30.0)) :event (Constraint[Event] :subject (?~= #(String \"Coffee Date\")))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (ConvertTimeToAM :time (:time (:start x0))))))))))"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (NextTime (NumberAM 7L)) (Event.subject_? (?~= \"Game Time\"))))))) (do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.time_? (?= (ConvertTimeToPM (DateTime.time (Event.start x0)))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (NextTime :time ^Time (NumberAM :number ^Long 7L)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Game Time\"))))))) ^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (ConvertTimeToPM :time ^Time (DateTime.time :obj ^DateTime (Event.start :obj x0)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes, Thank you, then could you move the Game Time from 7 am to PM.","tokens":["Yes",",","Thank","you",",","then","could","you","move","the","Game","Time","from","7","am","to","PM","."]},"agent_utterance":{"described_entities":["entity@1747275429"],"original_text":"I've changed \"Coffee Date\" to be at 4:00. __BREAK How is this?","tokens":["I","'ve","changed","\"","Coffee","Date","\"","to","be","at","4",":","00",".","How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (NextTime :time (NumberAM :number #(Number 7))) :event (Constraint[Event] :subject (?~= #(String \"Game Time\")))))))) (do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (ConvertTimeToPM :time (:time (:start x0)))))))))))"}}],"tags":{}}
{"dialogue_id":"157675da-2c15-47e5-b01c-3195cd7e336e","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Sunday)) (NumberAM 9L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Patrick\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :time ^Time (NumberAM :number ^Long 9L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Patrick\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create meeting with Patrick on Sunday at 9 am","tokens":["Create","meeting","with","Patrick","on","Sunday","at","9","am"]},"agent_utterance":{"described_entities":["entity@1630276288"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Patrick\")))))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :time (NumberAM :number #(Number 9))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"donald trump\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"donald trump\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"add donald trump to this","tokens":["add","donald","trump","to","this"]},"agent_utterance":{"described_entities":["entity@731223029"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"donald trump\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yes meeting is very useful discuss with planing my business","tokens":["yes","meeting","is","very","useful","discuss","with","planing","my","business"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberPM 8L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 8L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"change the time to 8pm","tokens":["change","the","time","to","8","pm"]},"agent_utterance":{"described_entities":["entity@1217956644"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 8))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.date_? (?= (MD 28L (August))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 28L :month ^Month (August))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yes that is fine but it's on august 28 not july","tokens":["yes","that","is","fine","but","it","'s","on","august","28","not","july"]},"agent_utterance":{"described_entities":["entity@769338384"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 28) :month #(Month \"AUGUST\"))))))))"}}],"tags":{}}
{"dialogue_id":"e8912c21-0a08-4742-a4d8-efbb52148b69","turns":[{"lispress":"(Yield (WhenProperty (temperature) (WeatherQuantifier.Max) (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Paris\"))) (DateTime.date_? (ThisWeekend)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List DateTime)) Yield :output ^(List DateTime) (^(Temperature) WhenProperty :property ^(Lambda WeatherTable Temperature) (temperature) :quantifier ^WeatherQuantifier (WeatherQuantifier.Max) :wt ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Paris\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (ThisWeekend)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When will it be warmest this weekend in Paris?","tokens":["When","will","it","be","warmest","this","weekend","in","Paris","?"]},"agent_utterance":{"described_entities":[],"original_text":"The maximum temperature will be 0.00 °F. That's on Sunday the 20th between 12:00 AM and 12:00 PM.","tokens":["The","maximum","temperature","will","be","0",".","00","°","F",".","That","'s","on","Sunday","the","20","th","between","12",":","00","AM","and","12",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (WhenProperty :property #(WeatherProp \"temperature\") :quantifier #(WeatherQuantifier \"Max\") :wt (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Paris\"))) :time (Constraint[DateTime] :date (ThisWeekend)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"run\")) (Event.start_? (?= (Execute (refer (extensionConstraint (^(DateTime) EmptyStructConstraint))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"run\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (^(DateTime) Execute :intension ^(CalflowIntension DateTime) (^(DateTime) refer :constraint ^(Constraint (CalflowIntension DateTime)) (^(DateTime) extensionConstraint :constraint ^(Constraint DateTime) (^(DateTime) EmptyStructConstraint))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Great! Can you schedule a run for me at that time?","tokens":["Great","!","Can","you","schedule","a","run","for","me","at","that","time","?"]},"agent_utterance":{"described_entities":["entity@1747402589"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (Execute :intension (refer (extensionConstraint (Constraint[DateTime]))))) :subject (?= #(String \"run\"))))))"}}],"tags":{}}
{"dialogue_id":"8d54566e-7218-4d1a-8643-b8b36eadb7ab","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"the customer actually expects you to wave the magic wand & fulfil their wishes which is not possible most ...","tokens":["the","customer","actually","expects","you","to","wave","the","magic","wand","&","fulfil","their","wishes","which","is","not","possible","most","..."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"b98afaeb-dba3-4264-93e2-5eae29e45424","turns":[{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Yes. I want to schedule two appointments this week.","tokens":["Yes",".","I","want","to","schedule","two","appointments","this","week","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Wednesday)) (HourMinutePm 3L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"OK. Make an appointment for Wednesday at 3:30 PM","tokens":["OK",".","Make","an","appointment","for","Wednesday","at","3",":","30","PM"]},"agent_utterance":{"described_entities":["entity@1047380193"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (HourMinutePm :hours #(Number 3) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (HourMinutePm 3L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add another appointment for Friday, 3:30 PM start time.","tokens":["Add","another","appointment","for","Friday",",","3",":","30","PM","start","time","."]},"agent_utterance":{"described_entities":["entity@1848783791"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (HourMinutePm :hours #(Number 3) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Looks great.","tokens":["Looks","great","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Thanks! That's all for now.","tokens":["Thanks","!","That","'s","all","for","now","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Bye","tokens":["Bye"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"156bbdcd-490e-4569-a77e-88a38110c3c2","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"League of Legends\")))))) (& (Event.start_? (DateTime.time_? (?= (HourMilitary 15L)))) (Event.duration_? (?= (toHours 2)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"League of Legends\")))))) :update ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMilitary :hours ^Long 15L)))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"League of Legends should be 2 hours and at 15h","tokens":["League","of","Legends","should","be","2","hours","and","at","15","h"]},"agent_utterance":{"described_entities":["entity@428609795"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"League of Legends\"))))))) :update (Constraint[Event] :duration (?= (toHours #(Number 2))) :start (Constraint[DateTime] :time (?= (HourMilitary :hours #(Number 15))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.time_? (?= (HourMinuteMilitary 15L 15L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteMilitary :hours ^Long 15L :minutes ^Long 15L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"No I want time at 1515","tokens":["No","I","want","time","at","1515"]},"agent_utterance":{"described_entities":["entity@1800437408"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteMilitary :hours #(Number 15) :minutes #(Number 15))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yup!","tokens":["yup","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"League of Legends\" to be for 2 hours.","tokens":["I","'ve","changed","\"","League","of","Legends","\"","to","be","for","2","hours","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"0d161777-c695-4776-9b9b-13aa785825dd","turns":[{"lispress":"(Yield (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"scot hanson\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(EventId) Yield :output ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"scot hanson\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what is my appointment with scot hanson?","tokens":["what","is","my","appointment","with","scot","hanson","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events with Scot Hanson.","tokens":["I","did","n't","find","any","events","with","Scot","Hanson","."]},"tags":{"original_lispress":"(Yield :output (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"scot hanson\")))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"can you create one","tokens":["can","you","create","one"]},"agent_utterance":{"described_entities":["entity@368713384"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event]))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"yes the first one and that is for a lunch","tokens":["yes","the","first","one","and","that","is","for","a","lunch"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))","do-not-train":""}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.subject_? (?= \"lunch\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"change that appointment to lunch","tokens":["change","that","appointment","to","lunch"]},"agent_utterance":{"described_entities":["entity@1000208479"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"correct","tokens":["correct"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be named \"lunch\".","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","named","\"","lunch","\"","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"cher roydon\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"cher roydon\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"what do i have with cher roydon","tokens":["what","do","i","have","with","cher","roydon"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events with Cher Roydon.","tokens":["I","did","n't","find","any","events","with","Cher","Roydon","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"cher roydon\"))))))"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (Tomorrow) (NumberPM 5L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 6L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 5L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 6L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"create meeting for tomorrow at 5pm-6pm","tokens":["create","meeting","for","tomorrow","at","5","pm-6","pm"]},"agent_utterance":{"described_entities":["entity@2118686590"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 5)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 6)))) :start (?= x0))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":7,"user_utterance":{"original_text":"it's for a meeting","tokens":["it","'s","for","a","meeting"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))","do-not-train":""}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"change appointment to meeting","tokens":["change","appointment","to","meeting"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":9,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"4f3df141-21f4-42e2-87a8-0ecfb2c17ebc","turns":[{"lispress":"(EventAttendance :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Justin\")))) (EventOnDate (NextDOW (Wednesday)) (^(Event) EmptyStructConstraint)))))) :response (ResponseStatusType.Declined) :sendResponse (RespondShouldSend.apply false))","expansion_lispress":null,"fully_typed_lispress":"^AttendanceResponse (EventAttendance :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Justin\")))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :response ^ResponseStatusType (ResponseStatusType.Declined) :sendResponse ^RespondShouldSend (RespondShouldSend.apply :inner ^Boolean false))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Decline my lunch with Justin on Wednesday.","tokens":["Decline","my","lunch","with","Justin","on","Wednesday","."]},"agent_utterance":{"described_entities":["entity@1725102067"],"original_text":"I will decline \"lunch\" and not send a response to the organizer. Is that ok?","tokens":["I","will","decline","\"","lunch","\"","and","not","send","a","response","to","the","organizer",".","Is","that","ok","?"]},"tags":{"original_lispress":"(EventAttendance :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Justin\"))) :nonEmptyBase (EventOnDate :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :event (Constraint[Event])))))) :response #(ResponseStatusType \"Declined\") :sendResponse #(RespondShouldSend false))","do-not-train":""}},{"lispress":"(Yield (EventAttendance (RespondComment.apply \"I'll be out of the office\") :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"James\")))))))) :response (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :comment ^RespondComment (RespondComment.apply :inner ^String \"I'll be out of the office\") :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"James\")))))))) :response ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Accept my meeting with James on Tuesday but say I'll be out of the office.","tokens":["Accept","my","meeting","with","James","on","Tuesday","but","say","I","'ll","be","out","of","the","office","."]},"agent_utterance":{"described_entities":["entity@291301315"],"original_text":"I will accept \"Sales Meeting\" and send a response to the organizer with the following comment: \"I'll be out of the office\". Is that ok?","tokens":["I","will","accept","\"","Sales","Meeting","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","I","'ll","be","out","of","the","office","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :comment #(RespondComment \"I'll be out of the office\") :event (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"James\")))))))) :response #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes that is ok.","tokens":["Yes","that","is","ok","."]},"agent_utterance":{"described_entities":[],"original_text":"I have accepted it.","tokens":["I","have","accepted","it","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (EventAttendance :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"skating party\"))))) :response (ResponseStatusType.Declined)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"skating party\"))))) :response ^ResponseStatusType (ResponseStatusType.Declined)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Decline the skating party invite.","tokens":["Decline","the","skating","party","invite","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I will decline \"skating party\". Is that ok?","tokens":["I","will","decline","\"","skating","party","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"skating party\")))))) :response #(ResponseStatusType \"Declined\")))"}}],"tags":{}}
{"dialogue_id":"9cff1bed-4bd8-4e2c-83ef-97eb56d1187e","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What events do I have on Tuesday?","tokens":["What","events","do","I","have","on","Tuesday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 3 events on Tuesday the 27th.","tokens":["I","found","3","events","on","Tuesday","the","27","th","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 2L)) (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Teft\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Rock\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Lopen\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 2L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Teft\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Rock\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Lopen\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I need you to add Teft, Rock, and Lopen to the 2nd one","tokens":["I","need","you","to","add","Teft",",","Rock",",","and","Lopen","to","the","2","nd","one"]},"agent_utterance":{"described_entities":["entity@916582477"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 2)))) (extensionConstraint (Constraint[Event])))))) :update (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Teft\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Rock\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Lopen\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That looks good to me.","tokens":["That","looks","good","to","me","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be Teft, Rock, and Lopen.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","Teft",",","Rock",",","and","Lopen","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 3L)) (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Event.start_? (DateTime.time_? (?= (HourMinutePm 3L 15L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 3L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 15L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Move the third event to 3:15 PM.","tokens":["Move","the","third","event","to","3",":","15","PM","."]},"agent_utterance":{"described_entities":["entity@1021735410"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 3)))) (extensionConstraint (Constraint[Event])))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 3) :minutes #(Number 15))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yeah.","tokens":["yeah","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be at 3:15.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","at","3",":","15","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"c2a88a3e-9ac9-46c4-a710-3f019d1c0a93","turns":[{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"ewwkfje fkejfoejfkldfwls","tokens":["ewwkfje","fkejfoejfkldfwls"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)"}},{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"nice this","tokens":["nice","this"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)"}},{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)"}}],"tags":{}}
{"dialogue_id":"fcebbb46-9437-40ae-b887-6d70deaaa3e8","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasPeople (FindTeamOf (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasPeople :people ^(List Person) (FindTeamOf :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make a meeting with Kim's team","tokens":["Make","a","meeting","with","Kim","'s","team"]},"agent_utterance":{"described_entities":["entity@1965511381"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasPeople :people (FindTeamOf :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\")))))))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Elli Parker\")))) (EventDuringRange (Event.subject_? (?~= \"on call\")) (ThisWeekend)))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Elli Parker\")))) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"on call\")) :range ^(Constraint Date) (ThisWeekend)))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The frst one. Will Elli Parker be on call with me this weekend?","tokens":["The","frst","one",".","Will","Elli","Parker","be","on","call","with","me","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. No, I didn't find any events this weekend.","tokens":["I","'ve","put","that","on","your","calendar",".","No",",","I","did","n't","find","any","events","this","weekend","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint))))) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Elli Parker\"))) :nonEmptyBase (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"on call\"))) :range (ThisWeekend)))))) #(Number 0))))"}},{"lispress":"(Yield (Person.phoneNumber (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Elli\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.phoneNumber :obj ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Elli\"))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"send message to Elli asking if she is on call this weekend","tokens":["send","message","to","Elli","asking","if","she","is","on","call","this","weekend"]},"agent_utterance":{"described_entities":["entity@1964317605"],"original_text":"There is no phone number listed for Elli Parker.","tokens":["There","is","no","phone","number","listed","for","Elli","Parker","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Elli\"))))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"yep","tokens":["yep"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (FindTeamOf (toRecipient (CurrentUser))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Person)) Yield :output ^(List Person) (FindTeamOf :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"who is on my team","tokens":["who","is","on","my","team"]},"agent_utterance":{"described_entities":[],"original_text":"Damon Straeter's team members are Abby Gonano, Jesse Rosenfeld and 1 others.","tokens":["Damon","Straeter","'s","team","members","are","Abby","Gonano",",","Jesse","Rosenfeld","and","1","others","."]},"tags":{"original_lispress":"(Yield :output (FindTeamOf :recipient (toRecipient (CurrentUser))))"}}],"tags":{}}
{"dialogue_id":"1e78b59e-ac7d-4d4c-a2e2-c7b10016cf79","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Tell me what I have on my schedule for Friday.","tokens":["Tell","me","what","I","have","on","my","schedule","for","Friday","."]},"agent_utterance":{"described_entities":[],"original_text":"You have 2 events on your calendar. Your \"team meeting\" is on Friday from 9:00 to 10:00 AM.","tokens":["You","have","2","events","on","your","calendar",".","Your","\"","team","meeting","\"","is","on","Friday","from","9",":","00","to","10",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (Execute (refer (cursorNext (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) cursorNext :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What is the other event?","tokens":["What","is","the","other","event","?"]},"agent_utterance":{"described_entities":[],"original_text":"Next is your meeting with the city manager on Friday from 2:00 to 3:00 PM.","tokens":["Next","is","your","meeting","with","the","city","manager","on","Friday","from","2",":","00","to","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (refer (cursorNext (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.id_? (negate (?= (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))) (EventOnDateAfterTime (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (^(Event) EmptyStructConstraint) (NumberPM 3L)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))) :c2 ^(Constraint Event) (EventOnDateAfterTime :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (NumberPM :number ^Long 3L)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have anything else after 3:00 P.M.","tokens":["Do","I","have","anything","else","after","3",":","00","P.M."]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any other events on Friday after 3:00.","tokens":["No",",","I","did","n't","find","any","other","events","on","Friday","after","3",":","00","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :id (negate (?= (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))) :nonEmptyBase (EventOnDateAfterTime :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :event (Constraint[Event]) :time (NumberPM :number #(Number 3))))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?> (NextTime (NumberPM 3L)))) (Event.showAs_? (?= (ShowAsStatus.OutOfOffice)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?> :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 3L)))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.OutOfOffice)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you mark me as Out of Office after 3 PM?","tokens":["Can","you","mark","me","as","Out","of","Office","after","3","PM","?"]},"agent_utterance":{"described_entities":["entity@1195882904"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :showAs (?= #(ShowAsStatus \"OutOfOffice\")) :start (?> (NextTime :time (NumberPM :number #(Number 3))))))))"}}],"tags":{}}
{"dialogue_id":"eda80ec1-b905-4b50-92f5-ef2bcd2b401e","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Put on my calendar a morning appointment with my eye doctor on Friday.","tokens":["Put","on","my","calendar","a","morning","appointment","with","my","eye","doctor","on","Friday","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"then look for my doctor","tokens":["then","look","for","my","doctor"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"eye doctor appointment\")) (Event.start_? (DateTimeConstraint (Evening) (NextDOW (Friday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"eye doctor appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Evening) :date ^Date (NextDOW :dow ^DayOfWeek (Friday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Eye doctor appointment for friday evening.","tokens":["Eye","doctor","appointment","for","friday","evening","."]},"agent_utterance":{"described_entities":["entity@1132327936"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Evening) :date (NextDOW :dow #(DayOfWeek \"FRIDAY\"))) :subject (?= #(String \"eye doctor appointment\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.time_? (?= (HourMinutePm 5L 30L)))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 5L :minutes ^Long 30L)))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I'll take the later one at 5:30 pm","tokens":["I","'ll","take","the","later","one","at","5",":","30","pm"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 5) :minutes #(Number 30.0))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) (Night))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Night))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have anything going on tomorrow night?","tokens":["Do","I","have","anything","going","on","tomorrow","night","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event tomorrow night. It's \"eye doctor appointment\" from 5:30 to 6:00 PM.","tokens":["Yes",",","I","found","one","event","tomorrow","night",".","It","'s","\"","eye","doctor","appointment","\"","from","5",":","30","to","6",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :timeRange (Night))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"07bad580-cc38-466f-a7ca-e23ebc222477","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTimeConstraint (Morning) (NextDOW (Saturday)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Amy\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Amy\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I want to meet up with Amy on Saturday morning.","tokens":["I","want","to","meet","up","with","Amy","on","Saturday","morning","."]},"agent_utterance":{"described_entities":["entity@324626018"],"original_text":"Here are some times when you and Amy are free.","tokens":["Here","are","some","times","when","you","and","Amy","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Amy\")))))) :start (DateTimeConstraint :constraint (Morning) :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"george\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"george\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes you can join george along with them","tokens":["yes","you","can","join","george","along","with","them"]},"agent_utterance":{"described_entities":["entity@564537753"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"george\"))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent (TopResult) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long (TopResult) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Top one please","tokens":["Top","one","please"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index (TopResult) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"good job thank you emily","tokens":["good","job","thank","you","emily"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"ohio\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"ohio\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"what about the weather in ohio now?","tokens":["what","about","the","weather","in","ohio","now","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"ohio\"))) :time (?= (Now))))"}}],"tags":{}}
{"dialogue_id":"57a3b05d-58e0-4698-ab49-ea237eeeb92a","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (previousDayOfWeek (Today) (Wednesday)) (Event.subject_? (?~= \"manicure\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (previousDayOfWeek :date ^Date (Today) :day ^DayOfWeek (Wednesday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"manicure\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"delete my manicure last wednesday","tokens":["delete","my","manicure","last","wednesday"]},"agent_utterance":{"described_entities":["entity@1135412092"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (previousDayOfWeek (Today) #(DayOfWeek \"WEDNESDAY\")) :event (Constraint[Event] :subject (?~= #(String \"manicure\")))))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (HourMinutePm 6L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 6L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Please change the time to 6:30 PM","tokens":["Please","change","the","time","to","6",":","30","PM"]},"agent_utterance":{"described_entities":["entity@1555808157"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 6) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"I deserve a Manicure\" to be at 6:30.","tokens":["I","'ve","changed","\"","I","deserve","a","Manicure","\"","to","be","at","6",":","30","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"Manicure\")) (FullMonthofMonth (July)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Manicure\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (July)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Please search for \"Manicure\" events in July","tokens":["Please","search","for","\"","Manicure","\"","events","in","July"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 matching event on your calendar. It's \"Well Deserved Manicure\" from 4:00 to 4:30 PM.","tokens":["I","found","1","matching","event","on","your","calendar",".","It","'s","\"","Well","Deserved","Manicure","\"","from","4",":","00","to","4",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"Manicure\"))) :range (FullMonthofMonth :month #(Month \"JULY\")))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"Manicure\")) (FullMonthofMonth (June)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Manicure\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (June)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Were there any \"Manicure\" events in June as well?","tokens":["Were","there","any","\"","Manicure","\"","events","in","June","as","well","?"]},"agent_utterance":{"described_entities":[],"original_text":"No. I didn't find any events named \"Manicure\" on your calendar between June 1, 2020 and June 30, 2020.","tokens":["No",".","I","did","n't","find","any","events","named","\"","Manicure","\"","on","your","calendar","between","June","1",",","2020","and","June","30",",","2020","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"Manicure\"))) :range (FullMonthofMonth :month #(Month \"JUNE\")))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"4577e610-02f8-4ad5-8509-bcf82df35160","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"hair appointment\")))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"hair appointment\")))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have a hair appointment tomorrow?","tokens":["Do","I","have","a","hair","appointment","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 1 event tomorrow. It's a \"hair appointment\" from 4:00 to 4:30 PM.","tokens":["Yes",",","I","found","1","event","tomorrow",".","It","'s","a","\"","hair","appointment","\"","from","4",":","00","to","4",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"hair appointment\"))))))) #(Number 0)))"}},{"lispress":"(Yield (Event.start (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"okay when meeting start","tokens":["okay","when","meeting","start"]},"agent_utterance":{"described_entities":[],"original_text":"It starts today at 4:00 PM.","tokens":["It","starts","today","at","4",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (& (Event.subject_? (?~= \"breakfast meeting\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"John\"))))) (NextWeekList))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"breakfast meeting\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"John\"))))) :range ^(Constraint Date) (NextWeekList))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have a breakfast meeting with John next week?","tokens":["Do","I","have","a","breakfast","meeting","with","John","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I found no events named \"breakfast meeting\" next week with John.","tokens":["No",",","I","found","no","events","named","\"","breakfast","meeting","\"","next","week","with","John","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"John\"))) :subject (?~= #(String \"breakfast meeting\"))) :range (NextWeekList))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"John\"))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"John\"))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Is there anything with John at all scheduled?","tokens":["Is","there","anything","with","John","at","all","scheduled","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I found no events on your calendar with John.","tokens":["No",",","I","found","no","events","on","your","calendar","with","John","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"John\"))))))) #(Number 0)))"}},{"lispress":"(do (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sheila\"))) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sheila\")))) (EventOnDate (NextDOW (Saturday)) (^(Event) EmptyStructConstraint)))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((Constraint (List Attendee)) Unit) do :arg1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sheila\"))) :arg2 ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sheila\")))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have a meeting on Saturday with Sheila?","tokens":["Do","I","have","a","meeting","on","Saturday","with","Sheila","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 1 event with Sheila Curry on Saturday. It's \"Gossip Girls\" from 11:00 AM to 1:00 PM.","tokens":["Yes",",","I","found","1","event","with","Sheila","Curry","on","Saturday",".","It","'s","\"","Gossip","Girls","\"","from","11",":","00","AM","to","1",":","00","PM","."]},"tags":{"original_lispress":"(do (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sheila\"))) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sheila\"))) :nonEmptyBase (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event])))))) #(Number 0))))"}}],"tags":{}}
{"dialogue_id":"77ad0ff9-17ce-4d3d-8071-3edd024e963c","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have anything tomorrow?","tokens":["Do","I","have","anything","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events tomorrow.","tokens":["No",",","I","did","n't","find","any","events","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))) #(Number 0)))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeek)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeek)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What about this week?","tokens":["What","about","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event this week. It's \"Games Night\" on Friday from 4:00 to 4:30.","tokens":["Yes",",","I","found","one","event","this","week",".","It","'s","\"","Games","Night","\"","on","Friday","from","4",":","00","to","4",":","30","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventDuringRange :event (Constraint[Event]) :range (ThisWeek)))))"}},{"lispress":"(Yield (joinEventCommand (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?= \"Games Night\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(ClientCommand) Yield :output ^ClientCommand (joinEventCommand :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Games Night\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Cool can I join Games Night?","tokens":["Cool","can","I","join","Games","Night","?"]},"agent_utterance":{"described_entities":[],"original_text":"Connecting to \"Games Night\".","tokens":["Connecting","to","\"","Games","Night","\"","."]},"tags":{"original_lispress":"(Yield :output (joinEventCommand (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?= #(String \"Games Night\")))))))))"}}],"tags":{}}
{"dialogue_id":"b734869e-29f5-438f-84b7-1fdc19a88634","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"grocery shop\")) (FullMonthofMonth (NextMonth)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"grocery shop\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (NextMonth)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Show all of my grocery shops next month","tokens":["Show","all","of","my","grocery","shops","next","month"]},"agent_utterance":{"described_entities":[],"original_text":"I found 4 matching events on your calendar. The first one is \"grocery shop\".","tokens":["I","found","4","matching","events","on","your","calendar",".","The","first","one","is","\"","grocery","shop","\"","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"grocery shop\"))) :range (FullMonthofMonth :month (NextMonth)))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?~= \"workouts\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"workouts\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"thanks, how about workouts?","tokens":["thanks",",","how","about","workouts","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event matching \"workouts\" next month. It's \"workout\" from 8:00 to 8:30 AM.","tokens":["I","found","one","event","matching","\"","workouts","\"","next","month",".","It","'s","\"","workout","\"","from","8",":","00","to","8",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :subject (?~= #(String \"workouts\"))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"chiropractor appointments\")) (NextWeekList))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"chiropractor appointments\")) :range ^(Constraint Date) (NextWeekList))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"And do I have any chiropractor appointments next week?","tokens":["And","do","I","have","any","chiropractor","appointments","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 matching event on your calendar. It's your \"chiropractor appointment\" on your calendar on Wednesday the 24th from 9:00 to at 9:30.","tokens":["I","found","1","matching","event","on","your","calendar",".","It","'s","your","\"","chiropractor","appointment","\"","on","your","calendar","on","Wednesday","the","24","th","from","9",":","00","to","at","9",":","30","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"chiropractor appointments\"))) :range (NextWeekList))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (NextTime (NumberAM 10L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberAM :number ^Long 10L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"can you arrange with 10.00 Am","tokens":["can","you","arrange","with","10",".","00","Am"]},"agent_utterance":{"described_entities":["entity@146777225"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberAM :number #(Number 10.0))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":4,"user_utterance":{"original_text":"yes I will do the second one","tokens":["yes","I","will","do","the","second","one"]},"agent_utterance":{"described_entities":["entity@1934226436"],"original_text":"Sorry, I'm not sure what you're referring to.","tokens":["Sorry",",","I","'m","not","sure","what","you","'re","referring","to","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"ed88f3cd-a870-4580-a5d9-a5b5e86ede04","turns":[{"lispress":"(let (x0 (MD 1L (May))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"vacation\")) (EventAllDayForDateRange (^(Event) EmptyStructConstraint) (DateAndConstraint x0 (nextDayOfMonth x0 7L))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (MD :day ^Long 1L :month ^Month (May))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"vacation\")) :c2 ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :dateRange ^(Constraint Date) (DateAndConstraint :date1 x0 :date2 ^Date (nextDayOfMonth :date x0 :day ^Long 7L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Block May 1 - 7 as vacation.","tokens":["Block","May","1","-","7","as","vacation","."]},"agent_utterance":{"described_entities":["entity@1608726024"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (MD :day #(Number 1) :month #(Month \"MAY\"))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :nonEmptyBase (EventAllDayForDateRange :dateRange (DateAndConstraint :date1 x0 :date2 (nextDayOfMonth x0 #(Number 7))) :event (Constraint[Event])) :subject (?= #(String \"vacation\")))))))"}}],"tags":{}}
{"dialogue_id":"12713133-e9f0-482c-8f95-7f01daa5a255","turns":[{"lispress":"(FenceDateTime)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceDateTime)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Block out my calendar for the rest of the week, please.","tokens":["Block","out","my","calendar","for","the","rest","of","the","week",",","please","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry I can't help you with that yet.","tokens":["Sorry","I","ca","n't","help","you","with","that","yet","."]},"tags":{"original_lispress":"(FenceDateTime)"}}],"tags":{}}
{"dialogue_id":"76182211-9e8f-4ce4-a68b-40fd09833868","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (Tomorrow) (NumberPM 6L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 10L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 6L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 10L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"can we set up something tomorrow between 6 and 10 pm","tokens":["can","we","set","up","something","tomorrow","between","6","and","10","pm"]},"agent_utterance":{"described_entities":["entity@336274053"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 6)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 10.0)))) :start (?= x0))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"running\")) (Event.start_? (DateTimeConstraint (Morning) (NextDOW (Saturday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"running\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (NextDOW :dow ^DayOfWeek (Saturday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"add running on Saturday morning","tokens":["add","running","on","Saturday","morning"]},"agent_utterance":{"described_entities":["entity@1755928010"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Morning) :date (NextDOW :dow #(DayOfWeek \"SATURDAY\"))) :subject (?= #(String \"running\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"first one.","tokens":["first","one","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"82b57639-ea17-40a3-a04a-b7f9e9e0ecd2","turns":[{"lispress":"(Yield (NextHolidayFromToday (Holiday.GroundhogDay)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Date) Yield :output ^Date (NextHolidayFromToday :holiday ^Holiday (Holiday.GroundhogDay)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is Ground Hog Day","tokens":["When","is","Ground","Hog","Day"]},"agent_utterance":{"described_entities":[],"original_text":"Groundhog Day is on Sunday, on February 2, 2020.","tokens":["Groundhog","Day","is","on","Sunday",",","on","February","2",",","2020","."]},"tags":{"original_lispress":"(Yield :output (NextHolidayFromToday :holiday #(Holiday \"GroundhogDay\")))"}}],"tags":{}}
{"dialogue_id":"4c93a85e-e463-468b-97b7-b1db699c893d","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"breakfast\")) (Event.start_? (DateTimeConstraint (Early) (Tomorrow)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"breakfast\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Early) :date ^Date (Tomorrow)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set up breakfast for early tomorrow?","tokens":["Set","up","breakfast","for","early","tomorrow","?"]},"agent_utterance":{"described_entities":["entity@504029782"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Early) :date (Tomorrow)) :subject (?= #(String \"breakfast\"))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"golf\")) (Event.start_? (DateTimeConstraint (Early) (NextDOW (Sunday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"golf\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Early) :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The second one. Schedule golf early next sunday","tokens":["The","second","one",".","Schedule","golf","early","next","sunday"]},"agent_utterance":{"described_entities":["entity@706385829"],"original_text":"I've put that on your calendar. __BREAK Does one of these work?","tokens":["I","'ve","put","that","on","your","calendar",".","Does","one","of","these","work","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Early) :date (NextDOW :dow #(DayOfWeek \"SUNDAY\"))) :subject (?= #(String \"golf\")))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTimeConstraint (Early) (NextDOW (Monday)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Early) :date ^Date (NextDOW :dow ^DayOfWeek (Monday)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Lemme get an Event for early in the day on Monday","tokens":["Lemme","get","an","Event","for","early","in","the","day","on","Monday"]},"agent_utterance":{"described_entities":["entity@661586564"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Early) :date (NextDOW :dow #(DayOfWeek \"MONDAY\")))))))"}}],"tags":{}}
{"dialogue_id":"c8cb909a-7521-4a82-8411-e6bc97db9cbd","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"event\")) (Event.start_? (?= (NextTime (HourMinuteAm 10L 30L))))) (Event.showAs_? (?= (ShowAsStatus.Busy)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"event\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (HourMinuteAm :hours ^Long 10L :minutes ^Long 30L))))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.Busy)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"create an event at 10.30AM and show status as BUSY","tokens":["create","an","event","at","10",".","30","AM","and","show","status","as","BUSY"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :showAs (?= #(ShowAsStatus \"Busy\")) :start (?= (NextTime :time (HourMinuteAm :hours #(Number 10.0) :minutes #(Number 30.0)))) :subject (?= #(String \"event\"))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= (NextTime (NumberPM 12L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 12L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Can you schedule a lunch at 12 pm.","tokens":["Can","you","schedule","a","lunch","at","12","pm","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberPM :number #(Number 12)))) :subject (?= #(String \"lunch\"))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"3c5593a5-52f6-4fa3-9484-72267c2e84a1","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 7L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"coffee date\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 9L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 7L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"coffee date\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 9L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Include a coffee date on friday between 7 and 9pm","tokens":["Include","a","coffee","date","on","friday","between","7","and","9","pm"]},"agent_utterance":{"described_entities":["entity@1907027458"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 7)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 9)))) :start (?= x0) :subject (?= #(String \"coffee date\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"It's perfect","tokens":["It","'s","perfect"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.start_? (DateTimeConstraint (TimeToTime (NumberPM 1L) (NumberPM 4L)) (adjustByPeriod (Tomorrow) (toDays 1)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (TimeToTime :time1 ^Time (NumberPM :number ^Long 1L) :time2 ^Time (NumberPM :number ^Long 4L)) :date ^Date (adjustByPeriod :date ^Date (Tomorrow) :period ^Period (toDays :days ^Number 1)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Okay, now can you also delete the appointment I have day after tomorrow between 1 and 4 pm?","tokens":["Okay",",","now","can","you","also","delete","the","appointment","I","have","day","after","tomorrow","between","1","and","4","pm","?"]},"agent_utterance":{"described_entities":["entity@939287792"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (TimeToTime :time1 (NumberPM :number #(Number 1)) :time2 (NumberPM :number #(Number 4))) :date (adjustByPeriod (Tomorrow) (toDays #(Number 1))))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (NextTime (NumberPM 3L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 3L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"can you arrange with 3.00 PM","tokens":["can","you","arrange","with","3",".","00","PM"]},"agent_utterance":{"described_entities":["entity@1002185076"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (HourMinutePm 3L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"can you arrange with 3.30 PM","tokens":["can","you","arrange","with","3",".","30","PM"]},"agent_utterance":{"described_entities":["entity@1803330829"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 3) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"3c761ad1-3a87-47e1-93da-a4345bd52524","turns":[{"lispress":"(FenceAggregation)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAggregation)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What was my longest meeting last week?","tokens":["What","was","my","longest","meeting","last","week","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do those calculations on your calendar.","tokens":["Sorry",",","I","ca","n't","do","those","calculations","on","your","calendar","."]},"tags":{"original_lispress":"(FenceAggregation)"}},{"lispress":"(Yield (FindNumNextEvent (EventDuringRange (^(Event) EmptyStructConstraint) (LastWeekNew)) 1L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (LastWeekNew)) :number ^Long 1L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What was my earliest meeting last week?","tokens":["What","was","my","earliest","meeting","last","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"The first event last week was \"Appointment\" from 9:00 to 9:30 AM.","tokens":["The","first","event","last","week","was","\"","Appointment","\"","from","9",":","00","to","9",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (FindNumNextEvent :constraint (EventDuringRange :event (Constraint[Event]) :range (LastWeekNew)) :number #(Number 1)))"}},{"lispress":"(let (x0 (Event.end (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateAfterTime (DateTime.date x0) (^(Event) EmptyStructConstraint) (DateTime.time x0))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (Event.end :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (DateTime.date :obj x0) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (DateTime.time :obj x0))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Is there anything after that?","tokens":["Is","there","anything","after","that","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events on May 17th after 9:30 AM.","tokens":["No",",","I","did","n't","find","any","events","on","May","17","th","after","9",":","30","AM","."]},"tags":{"original_lispress":"(let (x0 (:end (Execute :intension (refer (extensionConstraint (Constraint[Event])))))) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (:date x0) :event (Constraint[Event]) :time (:time x0))))) #(Number 0))))"}},{"lispress":"(Yield (FindLastEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Joseph\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (FindLastEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Joseph\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Could you find me my last event with Joseph?","tokens":["Could","you","find","me","my","last","event","with","Joseph","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events with Joseph.","tokens":["I","did","n't","find","any","events","with","Joseph","."]},"tags":{"original_lispress":"(Yield :output (FindLastEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Joseph\"))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (DowOfWeekNew (Monday) (LastWeekNew)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (DowOfWeekNew :dow ^DayOfWeek (Monday) :week ^(Constraint Date) (LastWeekNew)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"What did I do on Monday of last week?","tokens":["What","did","I","do","on","Monday","of","last","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event on Monday the 17th. It was \"Appointment\" from 9:00 AM to 9:30.","tokens":["I","found","one","event","on","Monday","the","17","th",".","It","was","\"","Appointment","\"","from","9",":","00","AM","to","9",":","30","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (DowOfWeekNew :dow #(DayOfWeek \"MONDAY\") :week (LastWeekNew)) :event (Constraint[Event]))))"}}],"tags":{}}
{"dialogue_id":"bcb3776a-2cc4-4cf0-a8bd-9db77eb6895d","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"uwu can u shwow me my cawendar mr pwesident","tokens":["uwu","can","u","shwow","me","my","cawendar","mr","pwesident"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events on your calendar.","tokens":["I","did","n't","find","any","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event])))"}}],"tags":{}}
{"dialogue_id":"f7a7c68a-a079-4341-bcbc-e5a6a084c4dc","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"parties\")) (FullYearofYear (Year.apply 2020L)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"parties\")) :range ^(Constraint Date) (FullYearofYear :year ^Year (Year.apply :value ^Long 2020L)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have any parties planned in 2020?","tokens":["Do","I","have","any","parties","planned","in","2020","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 2 events matching \"parties\". The first is \"Party Life #1\" on Friday from 7:00 PM to 12:00 AM.","tokens":["Yes",",","I","found","2","events","matching","\"","parties","\"",".","The","first","is","\"","Party","Life","#","1","\"","on","Friday","from","7",":","00","PM","to","12",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"parties\"))) :range (FullYearofYear :year #(Number 2020.0)))))) #(Number 0)))"}},{"lispress":"(Yield (== (Date.year (DateTime.date (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"D&D presentation\")))))))) (Year.apply 2023L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Year) == :x ^Year (Date.year :obj ^Date (DateTime.date :obj ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"D&D presentation\")))))))) :y ^Year (Year.apply :value ^Long 2023L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is my D&D presentation in 2023?","tokens":["Is","my","D&D","presentation","in","2023","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, it's in 2023.","tokens":["Yes",",","it","'s","in","2023","."]},"tags":{"original_lispress":"(Yield :output (== (:year (:date (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"D&D presentation\"))))))))) #(Number 2023)))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"D&D presentation\")) (FullYearofYear (LastYear))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"D&D presentation\")) :range ^(Constraint Date) (FullYearofYear :year ^Year (LastYear))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"When was my D&D presentation last year?","tokens":["When","was","my","D&D","presentation","last","year","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"D&D presentation\" between January 1, 2019 and December 31, 2019 was at 3:00 PM.","tokens":["The","event","matching","\"","D&D","presentation","\"","between","January","1",",","2019","and","December","31",",","2019","was","at","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"D&D presentation\"))) :range (FullYearofYear :year (LastYear))))))))"}}],"tags":{}}
{"dialogue_id":"5ab4e0d5-8884-40f9-9bbf-dcdb24a917b8","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Juill\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"jamie\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"bill\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Juill\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"jamie\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"bill\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I want to have lunch with Juill, jamie and bill","tokens":["I","want","to","have","lunch","with","Juill",",","jamie","and","bill"]},"agent_utterance":{"described_entities":["entity@419936915"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Juill\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"jamie\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"bill\"))))))) :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (?= (Friday))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) ?= :reference ^DayOfWeek (Friday))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, schedule lunch for Friday.","tokens":["Yes",",","schedule","lunch","for","Friday","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (?= #(DayOfWeek \"FRIDAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= (NextTime (NumberPM 4L)))) (Event.location_? (?= (LocationKeyphrase.apply \"room 403\")))) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ben\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jill\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Parker\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 4L)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"room 403\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ben\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jill\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Parker\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Put a meeting with Ben, Jill, and Parker in room 403 for 4PM.","tokens":["Put","a","meeting","with","Ben",",","Jill",",","and","Parker","in","room","403","for","4","PM","."]},"agent_utterance":{"described_entities":["entity@1940679574"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ben\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jill\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Parker\"))))))) :location (?= #(LocationKeyphrase \"room 403\")) :start (?= (NextTime :time (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"That is good .","tokens":["That","is","good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberPM 5L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 5L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"change the time to 5pm","tokens":["change","the","time","to","5","pm"]},"agent_utterance":{"described_entities":["entity@1570661810"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 5))))))))"}}],"tags":{}}
{"dialogue_id":"e6a223ce-c2ac-4841-a1e2-592cd1769192","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 1L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (DateTimeAndConstraint x0 (TimeAfterDateTime x0 (NumberPM 5L)))) (Event.duration_? (?= (toMinutes 45)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"bob\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 1L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeAndConstraint :dateTime1 x0 :dateTime2 ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 5L)))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 45)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"bob\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule a meeting with bob between 1-5 for 45 minutes on friday","tokens":["Schedule","a","meeting","with","bob","between","1","-","5","for","45","minutes","on","friday"]},"agent_utterance":{"described_entities":["entity@309596"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 1)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"bob\")))))) :duration (?= (toMinutes #(Number 45))) :start (DateTimeAndConstraint :dateTime1 x0 :dateTime2 (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 5)))))))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Please , change meeting time","tokens":["Please",",","change","meeting","time"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (HourMinutePm 3L 30L)))) (Event.duration_? (?= (toMinutes 30)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 30L)))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 30)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Actually, make it 30 minutes starting at 3:30.","tokens":["Actually",",","make","it","30","minutes","starting","at","3",":","30","."]},"agent_utterance":{"described_entities":["entity@1285697491"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toMinutes #(Number 30.0))) :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 3) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"ae5755d0-8aa8-4e4b-a8be-9e60457c519d","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to help manage my calendar because I have a deadline coming up.","tokens":["I","need","to","help","manage","my","calendar","because","I","have","a","deadline","coming","up","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have any meetings on my calendar today?","tokens":["Do","I","have","any","meetings","on","my","calendar","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Here's your agenda for today:","tokens":["Yes",",","Here","'s","your","agenda","for","today",":"]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event]))))) #(Number 0)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Cancel that event","tokens":["Cancel","that","event"]},"agent_utterance":{"described_entities":["entity@37071388"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"i sure make everything on time be ready","tokens":["i","sure","make","everything","on","time","be","ready"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"4e7eebb3-2f98-4a8e-9707-20644b9a68fe","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you remove my calendar invite for tomorrow?","tokens":["Can","you","remove","my","calendar","invite","for","tomorrow","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I'm sorry. I didn't find any matching events on your calendar.","tokens":["I","'m","sorry",".","I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event])))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventOnDate (MD 12L (toMonth 4L)) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventOnDate :date ^Date (MD :day ^Long 12L :month ^Month (toMonth :month ^Long 4L)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Okay, can you create a calendar event for 04/12?","tokens":["Okay",",","can","you","create","a","calendar","event","for","04","/","12","?"]},"agent_utterance":{"described_entities":["entity@1798221728"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventOnDate :date (MD :day #(Number 12) :month (toMonth #(Number 4))) :event (Constraint[Event])))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you search for my calendar events?","tokens":["Can","you","search","for","my","calendar","events","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event])))"}},{"lispress":"(GenericPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (GenericPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What can you do?","tokens":["What","can","you","do","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you with your calendar.","tokens":["I","can","help","you","with","your","calendar","."]},"tags":{"original_lispress":"(GenericPleasantry)"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you tell me what the weather is?","tokens":["Can","you","tell","me","what","the","weather","is","?"]},"agent_utterance":{"described_entities":["entity@1828293586"],"original_text":"You haven't shared your location with me. Where are you?","tokens":["You","have","n't","shared","your","location","with","me",".","Where","are","you","?"]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (?= (Now))))"}}],"tags":{}}
{"dialogue_id":"3b5ed6a1-fbf7-4786-8012-320e7b465412","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (MD 28L (April)) (NumberPM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 28L :month ^Month (April)) :time ^Time (NumberPM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I would like to add an event starting at 1 pm on April 28th.","tokens":["I","would","like","to","add","an","event","starting","at","1","pm","on","April","28","th","."]},"agent_utterance":{"described_entities":["entity@1577959593"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 28) :month #(Month \"APRIL\")) :time (NumberPM :number #(Number 1))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"confirmed thanks","tokens":["confirmed","thanks"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.end_? (DateTime.time_? (?= (HourMinutePm 2L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 2L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"make it end at 2:30","tokens":["make","it","end","at","2",":","30"]},"agent_utterance":{"described_entities":["entity@1612015412"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 2) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"That's perfect","tokens":["That","'s","perfect"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeekend))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeekend))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"what events do I have this weekend?","tokens":["what","events","do","I","have","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here's what I found:","tokens":["Here","'s","what","I","found",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (ThisWeekend))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Can you cancel that event please?","tokens":["Can","you","cancel","that","event","please","?"]},"agent_utterance":{"described_entities":["entity@2147050571"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}}],"tags":{}}
{"dialogue_id":"0c188a2b-6a8b-417e-8b37-46e2426c44a8","turns":[{"lispress":"(FenceDateTime)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceDateTime)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please remove bbq with Ed on the first day of summer.","tokens":["Please","remove","bbq","with","Ed","on","the","first","day","of","summer","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry I can't help you with that yet.","tokens":["Sorry","I","ca","n't","help","you","with","that","yet","."]},"tags":{"original_lispress":"(FenceDateTime)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"bbq\")) (Event.start_? (DateTime.date_? (SeasonFall)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"bbq\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (SeasonFall)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you add a fall bbq to the calendar?","tokens":["Can","you","add","a","fall","bbq","to","the","calendar","?"]},"agent_utterance":{"described_entities":["entity@1434784132"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (SeasonFall)) :subject (?= #(String \"bbq\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The second one.","tokens":["The","second","one","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"thanksgiving\")) (Event.start_? (DateTime.date_? (SeasonFall)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"thanksgiving\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (SeasonFall)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you add thanksgiving to my calendar this fall?","tokens":["Can","you","add","thanksgiving","to","my","calendar","this","fall","?"]},"agent_utterance":{"described_entities":["entity@1850744932"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (SeasonFall)) :subject (?= #(String \"thanksgiving\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"The 2nd one will work.","tokens":["The","2","nd","one","will","work","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"0015c638-844b-4667-b9b1-e22b018bef2e","turns":[{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Karen\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Karen\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my next meeting with Karen?","tokens":["When","is","my","next","meeting","with","Karen","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Karen is on Tuesday the 22nd at 7:00 PM.","tokens":["The","next","event","with","Karen","is","on","Tuesday","the","22","nd","at","7",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Karen\")))) :number #(Number 1))))"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Allen\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Allen\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"When do I see Allen next?","tokens":["When","do","I","see","Allen","next","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Allen is on Thursday the 24th at 3:00 PM.","tokens":["The","next","event","with","Allen","is","on","Thursday","the","24","th","at","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Allen\")))) :number #(Number 1))))"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alex Jones\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alex Jones\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Regarding Alex Jones, when's our next meeting?","tokens":["Regarding","Alex","Jones",",","when","'s","our","next","meeting","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Alex Jones is on Monday the 28th at 2:00 PM.","tokens":["The","next","event","with","Alex","Jones","is","on","Monday","the","28","th","at","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alex Jones\")))) :number #(Number 1))))"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Joe\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Joe\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"When is my next meeting with Joe?","tokens":["When","is","my","next","meeting","with","Joe","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Joe is on Sunday the 20th at 3:00 PM.","tokens":["The","next","event","with","Joe","is","on","Sunday","the","20","th","at","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Joe\")))) :number #(Number 1))))"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Elaine\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Elaine\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"When is my next meeting I have with Elaine?","tokens":["When","is","my","next","meeting","I","have","with","Elaine","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Elaine is on Wednesday the 30th at 3:00 PM.","tokens":["The","next","event","with","Elaine","is","on","Wednesday","the","30","th","at","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Elaine\")))) :number #(Number 1))))"}}],"tags":{}}
{"dialogue_id":"9d4f2402-303f-4837-b0db-4711e61e897b","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.date_? (NextWeekList))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to update my meeting to the morning sometime next week.","tokens":["I","need","to","update","my","meeting","to","the","morning","sometime","next","week","."]},"agent_utterance":{"described_entities":["entity@1110836649"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (NextWeekList))))))"}},{"lispress":"(Yield (Execute (ChooseUpdateEvent 1L (refer (^(UpdateEventResponse) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (^(UpdateEventResponse) Execute :intension ^(CalflowIntension UpdateEventResponse) (ChooseUpdateEvent :index ^Long 1L :intension ^(CalflowIntension UpdateEventResponse) (^(UpdateEventResponse) refer :constraint ^(Constraint (CalflowIntension UpdateEventResponse)) (^(UpdateEventResponse) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The first option.","tokens":["The","first","option","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be on Sunday the 17th at 7:00 AM.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","on","Sunday","the","17","th","at","7",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseUpdateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kenny\")))))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (?= (adjustByPeriodDuration (Event.start x0) (PeriodDuration.apply :duration (toHours 2)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kenny\")))))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.start :obj x0) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 2)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Great, thanks! Also please push my meeting with Kenny back two hours tomorrow.","tokens":["Great",",","thanks","!","Also","please","push","my","meeting","with","Kenny","back","two","hours","tomorrow","."]},"agent_utterance":{"described_entities":["entity@1481038537"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kenny\")))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (?= (adjustByPeriodDuration (:start x0) (PeriodDuration :duration (toHours #(Number 2))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Looks good.","tokens":["Looks","good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with Kenny and Damon Straeter\" to be at 4:00.","tokens":["I","'ve","changed","\"","Meeting","with","Kenny","and","Damon","Straeter","\"","to","be","at","4",":","00","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"food volunteer\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Erin\"))))))))) (Event.start_? (DateTime.date_? (FullMonthofMonth (December)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"food volunteer\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Erin\"))))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (FullMonthofMonth :month ^Month (December)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I need to delay the food volunteer event with Erin to sometime in December.","tokens":["I","need","to","delay","the","food","volunteer","event","with","Erin","to","sometime","in","December","."]},"agent_utterance":{"described_entities":["entity@188668995"],"original_text":"Here are some times when you and Erin are free.","tokens":["Here","are","some","times","when","you","and","Erin","are","free","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Erin\"))) :subject (?~= #(String \"food volunteer\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (FullMonthofMonth :month #(Month \"DECEMBER\")))))))"}}],"tags":{}}
{"dialogue_id":"85b6fd4c-ccea-4591-8b61-bb22dbd6f5e5","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"game\")) (NextWeekList)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"game\")) :range ^(Constraint Date) (NextWeekList)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi, Please remove next week's game from the calendar. I don't think I'll be too interested in watching it anymore.","tokens":["Hi",",","Please","remove","next","week","'s","game","from","the","calendar",".","I","do","n't","think","I","'ll","be","too","interested","in","watching","it","anymore","."]},"agent_utterance":{"described_entities":["entity@1209321655"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"game\"))) :range (NextWeekList)))))))))"}},{"lispress":"(Yield (Execute (ConfirmDeleteAndReturnAction (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberPM 11L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (^(DeleteEventResponse) Execute :intension ^(CalflowIntension DeleteEventResponse) (ConfirmDeleteAndReturnAction :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberPM :number ^Long 11L)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, please cancel the game on Monday at 11:00 pm since I will no longer be interested in watching it.","tokens":["Yes",",","please","cancel","the","game","on","Monday","at","11",":","00","pm","since","I","will","no","longer","be","interested","in","watching","it","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event matching \"game\" next week.","tokens":["I","'ve","deleted","your","event","matching","\"","game","\"","next","week","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmDeleteAndReturnAction :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberPM :number #(Number 11))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"watch big bang series finale\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Thursday)) (NumberPM 8L))))) (Event.duration_? (?= (toHours 1)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"watch big bang series finale\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :time ^Time (NumberPM :number ^Long 8L))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thanks , add to schedule watch big bang series finale on Thursday at 8:00 pm for 1 hour since I do not want to miss that.","tokens":["Thanks",",","add","to","schedule","watch","big","bang","series","finale","on","Thursday","at","8",":","00","pm","for","1","hour","since","I","do","not","want","to","miss","that","."]},"agent_utterance":{"described_entities":["entity@1270136594"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 1))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :time (NumberPM :number #(Number 8)))) :subject (?= #(String \"watch big bang series finale\"))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (FenceRecurring))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (FenceRecurring))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"This is good, please add to my schedule every night for two weeks","tokens":["This","is","good",",","please","add","to","my","schedule","every","night","for","two","weeks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I've put that on your calendar. I am not able to process recurring events right now.","tokens":["I","'ve","put","that","on","your","calendar",".","I","am","not","able","to","process","recurring","events","right","now","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (FenceRecurring))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Karen\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jan\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Karen\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jan\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you add Karen and Jan to this event?","tokens":["Can","you","add","Karen","and","Jan","to","this","event","?"]},"agent_utterance":{"described_entities":["entity@325914157"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Karen\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jan\")))))))))))"}}],"tags":{}}
{"dialogue_id":"708f478d-a8dc-4bfd-81cb-27335e0e2c77","turns":[{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Wednesday)) (EndOfWorkDay)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"John\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (EndOfWorkDay)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"John\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Where is my meeting with John on Wednesday at the end of the day?","tokens":["Where","is","my","meeting","with","John","on","Wednesday","at","the","end","of","the","day","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event with John on Wednesday at 5:00 PM is located at Disneyland.","tokens":["The","event","with","John","on","Wednesday","at","5",":","00","PM","is","located","at","Disneyland","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (EndOfWorkDay)) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"John\"))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Pizza\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (EndOfWorkDay))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Pizza\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (EndOfWorkDay))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Cool, can you make a Pizza event for this Friday at the end of the day.","tokens":["Cool",",","can","you","make","a","Pizza","event","for","this","Friday","at","the","end","of","the","day","."]},"agent_utterance":{"described_entities":["entity@1284242512"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (EndOfWorkDay))) :subject (?= #(String \"Pizza\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes, that is great! Please schedule.","tokens":["Yes",",","that","is","great","!","Please","schedule","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Time for a Sandwich\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (EndOfWorkDay))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Time for a Sandwich\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (EndOfWorkDay))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add in Time for a Sandwich on Friday at the end of the day","tokens":["Add","in","Time","for","a","Sandwich","on","Friday","at","the","end","of","the","day"]},"agent_utterance":{"described_entities":["entity@429733338"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (EndOfWorkDay))) :subject (?= #(String \"Time for a Sandwich\"))))))"}}],"tags":{}}
{"dialogue_id":"015f2afb-745f-45ef-aee4-aa95b48e3074","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"running day\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberPM 3L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"running day\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberPM :number ^Long 3L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"create running day on monday at 3","tokens":["create","running","day","on","monday","at","3"]},"agent_utterance":{"described_entities":["entity@1811727188"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"running day\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes this looks great","tokens":["Yes","this","looks","great"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thank you very much","tokens":["Thank","you","very","much"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberPM 3L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberPM :number ^Long 3L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Make an event for Monday at 3pm for Lunch","tokens":["Make","an","event","for","Monday","at","3","pm","for","Lunch"]},"agent_utterance":{"described_entities":["entity@1565289052"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"Lunch\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (?= (adjustByPeriodDuration (Now) (PeriodDuration.apply (toDays 1))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Now) :periodDuration ^PeriodDuration (PeriodDuration.apply :period ^Period (toDays :days ^Number 1))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Let's postpone it to a day from now.","tokens":["Let","'s","postpone","it","to","a","day","from","now","."]},"agent_utterance":{"described_entities":["entity@1871673140"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (?= (adjustByPeriodDuration (Now) (PeriodDuration :period (toDays #(Number 1)))))))))"}}],"tags":{}}
{"dialogue_id":"796744ca-3cf1-4358-ac0e-8abb4a25c3ac","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (adjustByPeriod (Today) (addPeriods (toMonths 6) (toDays 2))) (NumberPM 2L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (adjustByPeriod :date ^Date (Today) :period ^Period (addPeriods :x ^Period (toMonths :months ^Number 6) :y ^Period (toDays :days ^Number 2))) :time ^Time (NumberPM :number ^Long 2L)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"I need to set up an appointment for 6 months and 2 days from today at 2 pm.","tokens":["I","need","to","set","up","an","appointment","for","6","months","and","2","days","from","today","at","2","pm","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (adjustByPeriod (Today) (addPeriods (toMonths #(Number 6)) (toDays #(Number 2)))) :time (NumberPM :number #(Number 2))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"12d4e991-263f-4063-8e69-675e42e57ed4","turns":[{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"defer the meeting jane today","tokens":["defer","the","meeting","jane","today"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"9a021552-d69c-4617-9ba9-71ed00c9b23d","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayForDateRange (Event.subject_? (?= \"management retreat\")) (NextWeekList)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"management retreat\")) :dateRange ^(Constraint Date) (NextWeekList)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"please create a management retreat all next week.","tokens":["please","create","a","management","retreat","all","next","week","."]},"agent_utterance":{"described_entities":["entity@1888358579"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayForDateRange :dateRange (NextWeekList) :event (Constraint[Event] :subject (?= #(String \"management retreat\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Looks perfection","tokens":["Looks","perfection"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.location_? (?= (LocationKeyphrase.apply \"Brooklyn\"))) (Event.showAs_? (?= (ShowAsStatus.OutOfOffice)))) (EventAllDayForDateRange (^(Event) EmptyStructConstraint) (NextWeekList))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Brooklyn\"))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.OutOfOffice)))) :c2 ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :dateRange ^(Constraint Date) (NextWeekList))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I will be out of office all of next week. I'll be in Brooklyn","tokens":["I","will","be","out","of","office","all","of","next","week",".","I","'ll","be","in","Brooklyn"]},"agent_utterance":{"described_entities":["entity@578966032"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Brooklyn\")) :nonEmptyBase (EventAllDayForDateRange :dateRange (NextWeekList) :event (Constraint[Event])) :showAs (?= #(ShowAsStatus \"OutOfOffice\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"exactly","tokens":["exactly"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Out of Office.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Out","of","Office","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (MD 3L (December))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayForDateRange (Event.subject_? (?= \"work trip\")) (DateAndConstraint x0 (nextMonthDay x0 (December) 7L)))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (MD :day ^Long 3L :month ^Month (December))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"work trip\")) :dateRange ^(Constraint Date) (DateAndConstraint :date1 x0 :date2 ^Date (nextMonthDay :date x0 :month ^Month (December) :day ^Long 7L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I will be away on a work trip from Dec 3rd to Dec 7th","tokens":["I","will","be","away","on","a","work","trip","from","Dec","3","rd","to","Dec","7","th"]},"agent_utterance":{"described_entities":["entity@733878681"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(let (x0 (MD :day #(Number 3) :month #(Month \"DECEMBER\"))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayForDateRange :dateRange (DateAndConstraint :date1 x0 :date2 (nextMonthDay x0 #(Month \"DECEMBER\") #(Number 7))) :event (Constraint[Event] :subject (?= #(String \"work trip\"))))))))"}}],"tags":{}}
{"dialogue_id":"4f5aa25e-9a29-4e2c-bb9c-c70b5960a99b","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"five boxes of freeze-dried goods moving\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"five boxes of freeze-dried goods moving\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hello! I'd like to remove the five boxes of freeze-dried goods moving event","tokens":["Hello","!","I","'d","like","to","remove","the","five","boxes","of","freeze","-","dried","goods","moving","event"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events matching \"five boxes of freeze-dried goods moving\".","tokens":["I","did","n't","find","any","events","matching","\"","five","boxes","of","freeze","-","dried","goods","moving","\"","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"five boxes of freeze-dried goods moving\"))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.subject_? (?~= \"fresh goods moving\")) (EventOnDate (NextDOW (Saturday)) (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"fresh goods moving\")) :c2 ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"actually I mean to remove the fresh goods moving event thats next saturday instead","tokens":["actually","I","mean","to","remove","the","fresh","goods","moving","event","that","s","next","saturday","instead"]},"agent_utterance":{"described_entities":["entity@1674574475"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :nonEmptyBase (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event])) :subject (?~= #(String \"fresh goods moving\"))))))"}},{"lispress":"(do (DoNotConfirm) (Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"date\")) (ThisWeekend))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (DoNotConfirm) :arg2 ^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"date\")) :range ^(Constraint Date) (ThisWeekend))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"No thank you satisfy me by abolishing my date this weekend because I am staying in","tokens":["No","thank","you","satisfy","me","by","abolishing","my","date","this","weekend","because","I","am","staying","in"]},"agent_utterance":{"described_entities":["entity@102333225","entity@2108286243"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with. __BREAK Is this what you want me to cancel?","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with",".","Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(do (DoNotConfirm) (Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"date\"))) :range (ThisWeekend))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventOnDate (NextDOW (Monday)) (Event.subject_? (?~= \"tv marathon\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"tv marathon\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Wait no, I meant to cancel my tv marathon next Monday instead","tokens":["Wait","no",",","I","meant","to","cancel","my","tv","marathon","next","Monday","instead"]},"agent_utterance":{"described_entities":["entity@1646148048"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event] :subject (?~= #(String \"tv marathon\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventOnDate (ClosestDayOfWeek (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (Thursday)) (& (Event.subject_? (?~= \"tv marathon\")) (Event.duration_? (?= (toHours 8))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventOnDate :date ^Date (ClosestDayOfWeek :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :dow ^DayOfWeek (Thursday)) :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"tv marathon\")) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 8))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"No actually it is an 8 hour tv marathon on Thursday","tokens":["No","actually","it","is","an","8","hour","tv","marathon","on","Thursday"]},"agent_utterance":{"described_entities":["entity@884703103"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventOnDate :date (ClosestDayOfWeek :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :dow #(DayOfWeek \"THURSDAY\")) :event (Constraint[Event] :duration (?= (toHours #(Number 8))) :subject (?~= #(String \"tv marathon\")))))))"}}],"tags":{}}
{"dialogue_id":"7bd16881-c08b-4dc5-af99-83ae1bea6635","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I wanna meet my dad at today 7 PM","tokens":["I","wanna","meet","my","dad","at","today","7","PM"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Where is my dinner with Dad?","tokens":["Where","is","my","dinner","with","Dad","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Sunday)) (Event.subject_? (?~= \"dinner\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Where is my dinner on sunday?","tokens":["Where","is","my","dinner","on","sunday","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"dinner\" on Sunday the 5th is located at Rain City Burgers.","tokens":["The","event","matching","\"","dinner","\"","on","Sunday","the","5","th","is","located","at","Rain","City","Burgers","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :event (Constraint[Event] :subject (?~= #(String \"dinner\")))))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Rain City Burgers\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Rain City Burgers\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Will I be able to order an alcoholic drink while at Rain City Burgers?","tokens":["Will","I","be","able","to","order","an","alcoholic","drink","while","at","Rain","City","Burgers","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Rain City Burgers\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.OutdoorDining) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.OutdoorDining) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do they have outdoor seating?","tokens":["Do","they","have","outdoor","seating","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, Rain City Burgers doesn't have outdoor dining.","tokens":["No",",","Rain","City","Burgers","does","n't","have","outdoor","dining","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"OutdoorDining\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}}],"tags":{}}
{"dialogue_id":"25b1f521-bc51-4dc6-ab99-f938ff42ca7e","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Remind to get pizza with the boys Sunday morning for the Super Bowl.","tokens":["Remind","to","get","pizza","with","the","boys","Sunday","morning","for","the","Super","Bowl","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}}],"tags":{}}
{"dialogue_id":"1ffa27a2-76ae-4f37-9c5a-d21e88a8d397","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) (Afternoon))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Afternoon))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have any events scheduled for tomorrow afternoon?","tokens":["Do","I","have","any","events","scheduled","for","tomorrow","afternoon","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event on your calendar. It's \"enjoy the sun\" tomorrow from 3:00 to 3:30 PM.","tokens":["Yes",",","I","found","one","event","on","your","calendar",".","It","'s","\"","enjoy","the","sun","\"","tomorrow","from","3",":","00","to","3",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :timeRange (Afternoon))))) #(Number 0)))"}},{"lispress":"(let (x0 (Tomorrow)) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventBetweenEvents (^(Event) EmptyStructConstraint) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate x0 (Event.subject_? (?~= \"enjoy the sun\")))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate x0 (Event.subject_? (?~= \"lunch\")))))))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (Tomorrow)) ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBetweenEvents :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date x0 :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"enjoy the sun\")))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date x0 :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")))))))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have anything between lunch and enjoy the sun tomorrow?","tokens":["Do","I","have","anything","between","lunch","and","enjoy","the","sun","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events on your calendar.","tokens":["No",",","I","did","n't","find","any","events","on","your","calendar","."]},"tags":{"original_lispress":"(let (x0 (Tomorrow)) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventBetweenEvents :event (Constraint[Event]) :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date x0 :event (Constraint[Event] :subject (?~= #(String \"enjoy the sun\"))))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date x0 :event (Constraint[Event] :subject (?~= #(String \"lunch\"))))))))))) #(Number 0))))"}},{"lispress":"(Yield (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 2L)) (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 2L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What is the second event?","tokens":["What","is","the","second","event","?"]},"agent_utterance":{"described_entities":["entity@2021903529"],"original_text":"There are less than 2 events listed.","tokens":["There","are","less","than","2","events","listed","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 2)))) (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateAfterTime (Tomorrow) (^(Event) EmptyStructConstraint) (Lunch))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (Lunch))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What event happens after lunch tomorrow","tokens":["What","event","happens","after","lunch","tomorrow"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event tomorrow after 12:00 PM. It's \"enjoy the sun\" from 3:00 to 3:30 PM.","tokens":["I","found","one","event","tomorrow","after","12",":","00","PM",".","It","'s","\"","enjoy","the","sun","\"","from","3",":","00","to","3",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (Tomorrow) :event (Constraint[Event]) :time (Lunch))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"enjoy the sun\")))))) (Event.end_? (DateTime.time_? (?= (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"enjoy the sun\")))))) :update ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"extend enjoy the sun to end at 4 pm","tokens":["extend","enjoy","the","sun","to","end","at","4","pm"]},"agent_utterance":{"described_entities":["entity@2109048014"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"enjoy the sun\"))))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 4))))))))"}}],"tags":{}}
{"dialogue_id":"5b06f1af-8ad1-4f20-b080-908c612eabc0","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Turkey Day Party\")) (Event.attendees_? (& (AttendeeListHasPeople (FindTeamOf (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kims\"))))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Turkey Day Party\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasPeople :people ^(List Person) (FindTeamOf :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kims\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make a Turkey Day Party with Kims team and remove Abby from it","tokens":["Make","a","Turkey","Day","Party","with","Kims","team","and","remove","Abby","from","it"]},"agent_utterance":{"described_entities":["entity@1308686335"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasPeople :people (FindTeamOf :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kims\"))))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))))) :subject (?= #(String \"Turkey Day Party\"))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"all hands meeting\")) (Event.start_? (DateTime.date_? (?= (Tomorrow))))) (Event.attendees_? (& (AttendeeListHasPeople (FindTeamOf (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Schoffel\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\")))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"all hands meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasPeople :people ^(List Person) (FindTeamOf :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Schoffel\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\")))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"This will work. Also add an all hands meeting for tomorrow with Schoffel's team and include Jake","tokens":["This","will","work",".","Also","add","an","all","hands","meeting","for","tomorrow","with","Schoffel","'s","team","and","include","Jake"]},"agent_utterance":{"described_entities":["entity@1020736371"],"original_text":"I've put that on your calendar tomorrow from 10:00 to 10:30 AM. __BREAK Here are some times when everyone is free.","tokens":["I","'ve","put","that","on","your","calendar","tomorrow","from","10",":","00","to","10",":","30","AM",".","Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasPeople :people (FindTeamOf :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Schoffel\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\"))))))) :start (Constraint[DateTime] :date (?= (Tomorrow))) :subject (?= #(String \"all hands meeting\")))))))"}},{"lispress":"(Yield (RecipientWithNameLike (Execute (ReviseConstraint (refer (^((Constraint Recipient)) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (& (AttendeeListHasPeople (FindTeamOf (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\"))))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (^(Recipient) EmptyStructConstraint)))))))))) (PersonName.apply \"Jesse\")))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((Constraint Recipient)) Yield :output ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^((Constraint Recipient)) Execute :intension ^(CalflowIntension (Constraint Recipient)) (^((Constraint Recipient) Event) ReviseConstraint :rootLocation ^(CalflowIntension (Constraint Recipient)) (^((Constraint Recipient)) refer :constraint ^(Constraint (CalflowIntension (Constraint Recipient))) (^((Constraint Recipient)) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasPeople :people ^(List Person) (FindTeamOf :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint)))))))))) :name ^PersonName (PersonName.apply :name ^String \"Jesse\")))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Lets add Abby's team and remove Jesse","tokens":["Lets","add","Abby","'s","team","and","remove","Jesse"]},"agent_utterance":{"described_entities":["entity@1176496121"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (RecipientWithNameLike :constraint (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (andConstraint (AttendeeListHasPeople :people (FindTeamOf :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\"))))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (Constraint[Recipient])))))))))) :name #(PersonName \"Jesse\")))","do-not-train":""}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"2nd one is good","tokens":["2","nd","one","is","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"f7539805-1635-4728-8c46-e223d128ec19","turns":[{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create a timer for Thursday next week","tokens":["Create","a","timer","for","Thursday","next","week"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}}],"tags":{}}
{"dialogue_id":"2176649b-b577-4d75-9c1c-067f04589860","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"make an appointment my lawyer today","tokens":["make","an","appointment","my","lawyer","today"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book. Please use a full name and try again.","tokens":["I","can","only","look","up","names","in","your","address","book",".","Please","use","a","full","name","and","try","again","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (OnDateAfterTime (Today) (DateTime.time (Now)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jesse\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (OnDateAfterTime :date ^Date (Today) :time ^Time (DateTime.time :obj ^DateTime (Now)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jesse\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"His name is Jesse. Find free time later in the day.","tokens":["His","name","is","Jesse",".","Find","free","time","later","in","the","day","."]},"agent_utterance":{"described_entities":["entity@308574978"],"original_text":"Here are some times when you and Jesse Rosenfeld are free.","tokens":["Here","are","some","times","when","you","and","Jesse","Rosenfeld","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jesse\")))))) :start (OnDateAfterTime :date (Today) :time (:time (Now)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (?> (Execute (refer (extensionConstraint (^(DateTime) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?> :reference ^DateTime (^(DateTime) Execute :intension ^(CalflowIntension DateTime) (^(DateTime) refer :constraint ^(Constraint (CalflowIntension DateTime)) (^(DateTime) extensionConstraint :constraint ^(Constraint DateTime) (^(DateTime) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Make that later","tokens":["Make","that","later"]},"agent_utterance":{"described_entities":["entity@387103227"],"original_text":"Here are some times when you and Jesse are free.","tokens":["Here","are","some","times","when","you","and","Jesse","are","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (?> (Execute :intension (refer (extensionConstraint (Constraint[DateTime])))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (?< (Execute (refer (extensionConstraint (^(DateTime) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?< :reference ^DateTime (^(DateTime) Execute :intension ^(CalflowIntension DateTime) (^(DateTime) refer :constraint ^(Constraint (CalflowIntension DateTime)) (^(DateTime) extensionConstraint :constraint ^(Constraint DateTime) (^(DateTime) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can that be earlier?","tokens":["Can","that","be","earlier","?"]},"agent_utterance":{"described_entities":["entity@1459405262"],"original_text":"Here are some times when you and Jesse are free.","tokens":["Here","are","some","times","when","you","and","Jesse","are","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (?< (Execute :intension (refer (extensionConstraint (Constraint[DateTime])))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"second is free","tokens":["second","is","free"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"ef8a889a-5d74-443c-9468-f004a88a2e21","turns":[{"lispress":"(Yield (IsFree (RecipientAvailability (& (Event.start_? (DateTime.date_? (?= (NextDOW (Tuesday))))) (Event.attendees_? (AttendeeListHasRecipient (toRecipient (CurrentUser))))) true)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (IsFree :eventCandidates ^EventCandidatesWithAndWithoutConflicts (RecipientAvailability :eventConstraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Tuesday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))) :includingMe ^Boolean true)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Am I free on Tuesday?","tokens":["Am","I","free","on","Tuesday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. Here are some times when you are free on Tuesday the 17th.","tokens":["Yes",".","Here","are","some","times","when","you","are","free","on","Tuesday","the","17","th","."]},"tags":{"original_lispress":"(Yield :output (IsFree :eventCandidates (RecipientAvailability :eventConstraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (toRecipient (CurrentUser))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"TUESDAY\"))))) :includingMe #(Boolean true))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (NextWeekList))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Lovely. What about next week?","tokens":["Lovely",".","What","about","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. Here are some times when you are free between Sunday the 15th and Saturday the 21st.","tokens":["Yes",".","Here","are","some","times","when","you","are","free","between","Sunday","the","15","th","and","Saturday","the","21","st","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (NextWeekList))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (Execute (refer (extensionConstraint (^(CreateCommitEvent) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (^(CreateCommitEvent) Execute :intension ^(CalflowIntension CreateCommitEvent) (^(CreateCommitEvent) refer :constraint ^(Constraint (CalflowIntension CreateCommitEvent)) (^(CreateCommitEvent) extensionConstraint :constraint ^(Constraint CreateCommitEvent) (^(CreateCommitEvent) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":["entity@315880579"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (Execute :intension (refer (extensionConstraint (Constraint[CreateCommitEvent]))))))"}},{"lispress":"(Yield (RecipientAvailability (& (Event.start_? (DateTime.date_? (?= (Tomorrow)))) (Event.attendees_? (& (AttendeeListHasRecipient (toRecipient (CurrentUser))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\"))))))))) true))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(EventCandidatesWithAndWithoutConflicts) Yield :output ^EventCandidatesWithAndWithoutConflicts (RecipientAvailability :eventConstraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\"))))))))) :includingMe ^Boolean true))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"When can Jake and I meet on monday?","tokens":["When","can","Jake","and","I","meet","on","monday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here are some times when you and Jake Cobb are free tomorrow.","tokens":["Here","are","some","times","when","you","and","Jake","Cobb","are","free","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (RecipientAvailability :eventConstraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (toRecipient (CurrentUser))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\"))))))) :start (Constraint[DateTime] :date (?= (Tomorrow)))) :includingMe #(Boolean true)))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (NextWeekList))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"what about next week","tokens":["what","about","next","week"]},"agent_utterance":{"described_entities":[],"original_text":"Here are some times when you and Jake are free next week.","tokens":["Here","are","some","times","when","you","and","Jake","are","free","next","week","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (NextWeekList))))))"}}],"tags":{}}
{"dialogue_id":"813d1a5d-5f38-4fec-ae98-27fe82911748","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Natalie\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Natalie\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Show all of my meetings with Natalie coming up","tokens":["Show","all","of","my","meetings","with","Natalie","coming","up"]},"agent_utterance":{"described_entities":[],"original_text":"I found 2 matching events on your calendar.","tokens":["I","found","2","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Natalie\"))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make a appointment to tomorrow 4PM","tokens":["Make","a","appointment","to","tomorrow","4","PM"]},"agent_utterance":{"described_entities":["entity@1246175172"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That looks very good.","tokens":["That","looks","very","good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"doctor appointments\")) (FullMonthofMonth (NextMonth)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctor appointments\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (NextMonth)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Thanks, now show me all doctor appointments next month.","tokens":["Thanks",",","now","show","me","all","doctor","appointments","next","month","."]},"agent_utterance":{"described_entities":[],"original_text":"I found 2 matching events on your calendar.","tokens":["I","found","2","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"doctor appointments\"))) :range (FullMonthofMonth :month (NextMonth)))))"}},{"lispress":"(Yield (Execute (refer (cursorNext (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) cursorNext :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"when is the next one?","tokens":["when","is","the","next","one","?"]},"agent_utterance":{"described_entities":["entity@909956554"],"original_text":"I’ve encountered an error I haven’t been trained to handle. Can you try a different request?","tokens":["I","’ve","encountered","an","error","I","have","n’t","been","trained","to","handle",".","Can","you","try","a","different","request","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (refer (cursorNext (extensionConstraint (Constraint[Event]))))))"}}],"tags":{}}
{"dialogue_id":"601ccf12-fa8c-4068-9958-a04e6f2f0300","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Thursday)) (NumberAM 11L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Robert\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :time ^Time (NumberAM :number ^Long 11L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Robert\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to add lunch with Robert on Thursday at 11AM","tokens":["I","need","to","add","lunch","with","Robert","on","Thursday","at","11","AM"]},"agent_utterance":{"described_entities":["entity@552493849"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Robert\")))))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :time (NumberAM :number #(Number 11)))) :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes this looks good","tokens":["Yes","this","looks","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventAfterDateTime (Event.subject_? (?~= \"sales meeting\")) (Event.end (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventAfterDateTime :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"sales meeting\")) :dateTime ^DateTime (Event.end :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thanks, can you also cancel the sales meeting right after?","tokens":["Thanks",",","can","you","also","cancel","the","sales","meeting","right","after","?"]},"agent_utterance":{"described_entities":["entity@355084394"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventAfterDateTime :dateTime (:end (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :event (Constraint[Event] :subject (?~= #(String \"sales meeting\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes please cancel this","tokens":["Yes","please","cancel","this"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event matching \"sales meeting\".","tokens":["I","'ve","deleted","your","event","matching","\"","sales","meeting","\"","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"7c0195b0-bfb2-409f-972f-36aaee8ecb99","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"pizza party\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"pizza party\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Cancel the pizza party please","tokens":["Cancel","the","pizza","party","please"]},"agent_utterance":{"described_entities":["entity@171543471"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"pizza party\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"06032bb8-ccb9-475c-b595-86d4c1732535","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have any appointments tomorrow?","tokens":["Do","I","have","any","appointments","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events tomorrow.","tokens":["No",",","I","did","n't","find","any","events","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))) #(Number 0)))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Mark tomorrow as \"Free\".","tokens":["Mark","tomorrow","as","\"","Free","\"","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"eaa43d62-cc56-4f60-8c9e-cf47818a2f93","turns":[{"lispress":"(Yield (Person.emailAddress (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dave Pensado\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.emailAddress :obj ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dave Pensado\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need you to tell me what Dave Pensado's email address is, if you can.","tokens":["I","need","you","to","tell","me","what","Dave","Pensado","'s","email","address","is",",","if","you","can","."]},"agent_utterance":{"described_entities":[],"original_text":"The email address of Dave Pensado is D@vepensado.com.","tokens":["The","email","address","of","Dave","Pensado","is","D@vepensado.com","."]},"tags":{"original_lispress":"(Yield :output (:emailAddress (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dave Pensado\"))))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"good thank you","tokens":["good","thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"please update my all events in my calender","tokens":["please","update","my","all","events","in","my","calender"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (Person.phoneNumber (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Matthew\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.phoneNumber :obj ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Matthew\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you get me Matthew's phone number?","tokens":["Can","you","get","me","Matthew","'s","phone","number","?"]},"agent_utterance":{"described_entities":[],"original_text":"The phone number for Matthew Haines is 206-985-6565.","tokens":["The","phone","number","for","Matthew","Haines","is","206","-","985","-","6565","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Matthew\"))))))))"}}],"tags":{}}
{"dialogue_id":"4b387f93-8024-4aed-88bf-fd0875cc48f0","turns":[{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"house party\"))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Salim\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"house party\"))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Salim\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Did Salim confirm attendance to the house party","tokens":["Did","Salim","confirm","attendance","to","the","house","party"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Salim has accepted the \"House Party\" invitation.","tokens":["Yes",",","Salim","has","accepted","the","\"","House","Party","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"house party\")))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Salim\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"party\"))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jeff\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"party\"))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jeff\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Good can you tell me if Jeff got the party invite?","tokens":["Good","can","you","tell","me","if","Jeff","got","the","party","invite","?"]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Jeff in your address book.","tokens":["I","did","n't","find","anyone","named","Jeff","in","your","address","book","."]},"tags":{"do-not-train":"","original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"party\")))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jeff\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"sales call\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"james\")))))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"james\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"sales call\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"james\")))))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"james\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Did james say yes or no to the sales call?","tokens":["Did","james","say","yes","or","no","to","the","sales","call","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, James has accepted the \"Sales Call\" invitation.","tokens":["Yes",",","James","has","accepted","the","\"","Sales","Call","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"james\"))) :subject (?~= #(String \"sales call\")))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"james\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sarah\")))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sarah\")))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Will Sarah be at the meeting on Friday?","tokens":["Will","Sarah","be","at","the","meeting","on","Friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event with Sarah on Friday. It's \"Meeting with Sarah and Damon Straeter\" from 1:00 to 1:30 PM.","tokens":["Yes",",","I","found","one","event","with","Sarah","on","Friday",".","It","'s","\"","Meeting","with","Sarah","and","Damon","Straeter","\"","from","1",":","00","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sarah\")))))))) #(Number 0)))"}},{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"office party\"))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"John\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"office party\"))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"John\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Will John be at the office party?","tokens":["Will","John","be","at","the","office","party","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, John has accepted the \"Office Party\" invitation.","tokens":["Yes",",","John","has","accepted","the","\"","Office","Party","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"office party\")))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"John\")))))))) #(ResponseStatusType \"Accepted\")))"}}],"tags":{}}
{"dialogue_id":"4d52b01b-56f5-4f99-874c-12d5419947cf","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)","do-not-train":""}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Monday)) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Can you delete my meeting on Monday?","tokens":["Can","you","delete","my","meeting","on","Monday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that from your calendar.","tokens":["I","'ve","deleted","that","from","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event])))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"6b019243-8153-4196-9c44-2d7e469b5e74","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= (DateAtTimeWithDefaults (MD 19L (December)) (NumberPM 3L)))) (Event.location_? (?= (LocationKeyphrase.apply \"Starbucks\")))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Chuck\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 19L :month ^Month (December)) :time ^Time (NumberPM :number ^Long 3L)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Starbucks\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Chuck\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to create an event. Create 3pm meeting with Chuck at Starbucks on Thursday December 19th.","tokens":["I","need","to","create","an","event",".","Create","3","pm","meeting","with","Chuck","at","Starbucks","on","Thursday","December","19","th","."]},"agent_utterance":{"described_entities":["entity@1063258029"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Chuck\")))))) :location (?= #(LocationKeyphrase \"Starbucks\")) :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 19) :month #(Month \"DECEMBER\")) :time (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (?= (NextDOW (Wednesday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Wednesday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"No that's wrong. Put that event on Wednesday, not Thursday.","tokens":["No","that","'s","wrong",".","Put","that","event","on","Wednesday",",","not","Thursday","."]},"agent_utterance":{"described_entities":["entity@895280683"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"WEDNESDAY\"))))))))"}}],"tags":{}}
{"dialogue_id":"9d84ccc2-b5b2-4c3e-8435-c3fe8828f5ca","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (nextDayOfMonth (Today) 28L) (NumberAM 11L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 28L) :time ^Time (NumberAM :number ^Long 11L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Set a meeting for the 28th at 11am.","tokens":["Set","a","meeting","for","the","28","th","at","11","am","."]},"agent_utterance":{"described_entities":["entity@1377522654"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (nextDayOfMonth (Today) #(Number 28)) :time (NumberAM :number #(Number 11))))))))","do-not-train":""}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (nextDayOfMonth (Today) 28L) (^(Event) EmptyStructConstraint)))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.duration_? (?= (addDurations (Event.duration x0) (toHours 0.5))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 28L) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (Event.duration :obj x0) :y ^Duration (toHours :hours ^Number 0.5))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Extend Monday's meeting on the 28th by half of an hour.","tokens":["Extend","Monday","'s","meeting","on","the","28","th","by","half","of","an","hour","."]},"agent_utterance":{"described_entities":["entity@289864679"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (nextDayOfMonth (Today) #(Number 28)) :event (Constraint[Event])))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :duration (?= (addDurations (:duration x0) (toHours #(Number 0.5)))))))))","do-not-train":""}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"ok\\","tokens":["ok\\"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be for 1 hour.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","for","1","hour","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))","do-not-train":""}},{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Remind me about my karate lesson Tuesday night at 7 PM","tokens":["Remind","me","about","my","karate","lesson","Tuesday","night","at","7","PM"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}}],"tags":{}}
{"dialogue_id":"f41b561c-bb8b-4760-8be0-f4c688c93a7e","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Tuesday)) (NumberPM 12L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 2L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Chris\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :time ^Time (NumberPM :number ^Long 12L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 2L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Chris\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule a meet with Chris on Tuesday for 12-2 PM","tokens":["Schedule","a","meet","with","Chris","on","Tuesday","for","12","-","2","PM"]},"agent_utterance":{"described_entities":["entity@1060481786"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :time (NumberPM :number #(Number 12)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Chris\")))))) :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 2)))) :start (?= x0))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That'll work.","tokens":["That","'ll","work","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (NextTime (NumberPM 2L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"down time\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 4L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"janice\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 2L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"down time\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 4L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"janice\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"2-4PM is down time with janice.","tokens":["2","-","4","PM","is","down","time","with","janice","."]},"agent_utterance":{"described_entities":["entity@2141187191"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(let (x0 (NextTime :time (NumberPM :number #(Number 2)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"janice\")))))) :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 4)))) :start (?= x0) :subject (?= #(String \"down time\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I'll like this.","tokens":["I","'ll","like","this","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"okay choose the best time","tokens":["okay","choose","the","best","time"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}}],"tags":{}}
{"dialogue_id":"a84cdd08-1d0a-4183-9906-0d1494090ff5","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeek))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeek))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what if u showed me schedule week this one","tokens":["what","if","u","showed","me","schedule","week","this","one"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events this week.","tokens":["I","did","n't","find","any","events","this","week","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (ThisWeek))))"}}],"tags":{}}
{"dialogue_id":"35959caa-7944-48a6-aa09-dc6337baac98","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"mani-pedi\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Sunday)) (NumberPM 2L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"mani-pedi\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :time ^Time (NumberPM :number ^Long 2L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add mani-pedi at 2 on sunday","tokens":["Add","mani","-","pedi","at","2","on","sunday"]},"agent_utterance":{"described_entities":["entity@429004500"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :time (NumberPM :number #(Number 2)))) :subject (?= #(String \"mani-pedi\"))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I need coffee","tokens":["I","need","coffee"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"coffee session\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Sunday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"coffee session\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Sunday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"create a coffee session on sunday","tokens":["create","a","coffee","session","on","sunday"]},"agent_utterance":{"described_entities":["entity@598759908"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"SUNDAY\")))) :subject (?= #(String \"coffee session\"))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"tea","tokens":["tea"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Tuesday)) (NumberPM 1L)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Charles\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :time ^Time (NumberPM :number ^Long 1L)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Charles\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Delete meeting at 1 pm on Tuesday with Charles","tokens":["Delete","meeting","at","1","pm","on","Tuesday","with","Charles"]},"agent_utterance":{"described_entities":["entity@1915364878"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :time (NumberPM :number #(Number 1))) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Charles\"))))))))))))"}}],"tags":{}}
{"dialogue_id":"715004ea-b87c-466f-bd5a-24b47ce0412b","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"sonic fan fiction meeting\")) (Event.start_? (?= (NextTime (NumberPM 4L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"sonic fan fiction meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 4L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Start the sonic fan fiction meeting at 4.","tokens":["Start","the","sonic","fan","fiction","meeting","at","4","."]},"agent_utterance":{"described_entities":["entity@1338031505"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberPM :number #(Number 4)))) :subject (?= #(String \"sonic fan fiction meeting\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That looks just perfect","tokens":["That","looks","just","perfect"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (NumberPM 4L))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (HourMinutePm 5L 30L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :time ^Time (NumberPM :number ^Long 4L))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (HourMinutePm :hours ^Long 5L :minutes ^Long 30L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Oh, actually, can you make it go from 4 to 5:30 instead?","tokens":["Oh",",","actually",",","can","you","make","it","go","from","4","to","5",":","30","instead","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"There aren't any mentioned events.","tokens":["There","are","n't","any","mentioned","events","."]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :time (NumberPM :number #(Number 4)))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (HourMinutePm :hours #(Number 5) :minutes #(Number 30.0)))) :start (?= x0))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Perfect.","tokens":["Perfect","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"furry convention\")) (Event.start_? (?= (NextTime (NumberPM 6L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"furry convention\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 6L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"at 6 is my furry convention.","tokens":["at","6","is","my","furry","convention","."]},"agent_utterance":{"described_entities":["entity@1040723229"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"furry convention\"))))))"}}],"tags":{}}
{"dialogue_id":"b4c621eb-02b9-4de3-87b3-21820f1346ac","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (Today)))) (Event.attendees_? (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Carlos\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Carlos\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"book an appointment with Carlos's manager today","tokens":["book","an","appointment","with","Carlos","'s","manager","today"]},"agent_utterance":{"described_entities":["entity@1718298644"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Carlos\"))))))) :start (Constraint[DateTime] :date (?= (Today)))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"no can you have anything else","tokens":["no","can","you","have","anything","else"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L)))) (Event.attendees_? (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Carlos\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Carlos\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Create an appointment with Carlos's manager for tomorrow at 3 PM.","tokens":["Create","an","appointment","with","Carlos","'s","manager","for","tomorrow","at","3","PM","."]},"agent_utterance":{"described_entities":["entity@1397904813"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Carlos\"))))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"looks okay","tokens":["looks","okay"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Thursday)) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have a meetring on Thursday","tokens":["Do","I","have","a","meetring","on","Thursday"]},"agent_utterance":{"described_entities":[],"original_text":"No, I found no events on Thursday.","tokens":["No",",","I","found","no","events","on","Thursday","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :event (Constraint[Event]))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"f8844682-6c3f-4581-b274-32d08fce576e","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Military Time\")) (Event.start_? (DateTime.time_? (?= (HourMinuteMilitary 6L 23L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Military Time\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteMilitary :hours ^Long 6L :minutes ^Long 23L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make an event at 06h23 called \"Military Time\"","tokens":["Make","an","event","at","06","h23","called","\"","Military","Time","\""]},"agent_utterance":{"described_entities":["entity@887464398"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteMilitary :hours #(Number 6) :minutes #(Number 23)))) :subject (?= #(String \"Military Time\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"the first one please","tokens":["the","first","one","please"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (?= (adjustByPeriodDuration (Event.start x0) (PeriodDuration.apply :duration (toHours 1)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.start :obj x0) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 1)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I can't make that time actually, push it back 1 hours","tokens":["I","ca","n't","make","that","time","actually",",","push","it","back","1","hours"]},"agent_utterance":{"described_entities":["entity@1083406528"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (?= (adjustByPeriodDuration (:start x0) (PeriodDuration :duration (toHours #(Number 1))))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Actually I can make it, nevermind","tokens":["Actually","I","can","make","it",",","nevermind"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}}],"tags":{}}
{"dialogue_id":"1de7b99e-2e6c-4579-bf5c-648b3e82502c","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"vacation\")) (Event.start_? (DateTime.date_? (?= (MD 15L (September)))))) (Event.location_? (?= (LocationKeyphrase.apply \"Universal Studios\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"vacation\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 15L :month ^Month (September)))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Universal Studios\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set up a vacation for September 15 to Universal Studios.","tokens":["Set","up","a","vacation","for","September","15","to","Universal","Studios","."]},"agent_utterance":{"described_entities":["entity@990006591"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Universal Studios\")) :start (Constraint[DateTime] :date (?= (MD :day #(Number 15) :month #(Month \"SEPTEMBER\")))) :subject (?= #(String \"vacation\"))))))"}}],"tags":{}}
{"dialogue_id":"8ce853c7-5828-4432-8547-a80618011020","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Sunday)) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"delete sunday meeting","tokens":["delete","sunday","meeting"]},"agent_utterance":{"described_entities":["entity@569207908"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :event (Constraint[Event])))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"nah dont","tokens":["nah","do","nt"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}}],"tags":{}}
{"dialogue_id":"781bbdd6-2835-4e91-ba4b-35f74b3b7366","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"meetups\")) (NextWeekList))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"meetups\")) :range ^(Constraint Date) (NextWeekList))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have any meetups next week?","tokens":["Do","I","have","any","meetups","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event matching \"meetups\" next week. It's \"AToM Meetup: Advanced Topics on Machine learning\" on April 2nd from 11:30 to 1:30 PM.","tokens":["Yes",",","I","found","one","event","matching","\"","meetups","\"","next","week",".","It","'s","\"","AToM","Meetup",":","Advanced","Topics","on","Machine","learning","\"","on","April","2","nd","from","11",":","30","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"meetups\"))) :range (NextWeekList))))) #(Number 0)))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeek)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeek)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually, I need to know about this week.","tokens":["Actually",",","I","need","to","know","about","this","week","."]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event matching \"meetups\" this week. It's from 11:30 to 1:30 PM.","tokens":["Yes",",","I","found","one","event","matching","\"","meetups","\"","this","week",".","It","'s","from","11",":","30","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventDuringRange :event (Constraint[Event]) :range (ThisWeek)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Got it, thanks!","tokens":["Got","it",",","thanks","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"c3372199-a97b-444d-8f67-92424a4d7c78","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"lunch meeting\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (Lunch))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Pam\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (Lunch))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Pam\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please schedule a lunch meeting with Pam tomorrow at lunch time.","tokens":["Please","schedule","a","lunch","meeting","with","Pam","tomorrow","at","lunch","time","."]},"agent_utterance":{"described_entities":["entity@334374940"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Pam\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (Lunch))) :subject (?= #(String \"lunch meeting\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.subject_? (?= \"dinner meeting\")) (Event.start_? (DateTime.time_? (?= (NumberPM 6L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 6L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"No it was a dinner meeting at 6","tokens":["No","it","was","a","dinner","meeting","at","6"]},"agent_utterance":{"described_entities":["entity@1393674057"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 6)))) :subject (?= #(String \"dinner meeting\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours (+ 1 0.5)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number (^(Number) + :x ^Number 1 :y ^Number 0.5)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"um, yeah, but let's make it an hour and a half.","tokens":["um",",","yeah",",","but","let","'s","make","it","an","hour","and","a","half","."]},"agent_utterance":{"described_entities":["entity@1269603101"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours (+ #(Number 1) #(Number 0.5))))))))"}}],"tags":{}}
{"dialogue_id":"ae8ced6d-51cb-4b2e-8403-bcc32681c640","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.attendees_? (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sally\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Greg\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sally\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Greg\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Is Sally and Greg invited to the meeting today?","tokens":["Is","Sally","and","Greg","invited","to","the","meeting","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 1 event today with Sally and with Greg. It's \"project kickoff\" from 2:30 to 3:00 PM.","tokens":["Yes",",","I","found","1","event","today","with","Sally","and","with","Greg",".","It","'s","\"","project","kickoff","\"","from","2",":","30","to","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sally\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Greg\"))))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"1a4b27e7-73c9-43bf-8fed-8391c2fce2af","turns":[{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"hello i need some calendar help","tokens":["hello","i","need","some","calendar","help"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Damon Ellery\"))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Damon Ellery\"))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I have an event with Damon Ellery ?","tokens":["I","have","an","event","with","Damon","Ellery","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events with Damon Ellery.","tokens":["No",",","I","did","n't","find","any","events","with","Damon","Ellery","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Damon Ellery\"))))))) #(Number 0)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.date_? (?= (MD 17L (May))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 17L :month ^Month (May))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"lets do May 17","tokens":["lets","do","May","17"]},"agent_utterance":{"described_entities":["entity@1215133229"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 17) :month #(Month \"MAY\"))))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Monday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"how does my monday look","tokens":["how","does","my","monday","look"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events on Monday the 20th.","tokens":["I","did","n't","find","any","events","on","Monday","the","20","th","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Cher Roydon\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Cher Roydon\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Cher Roydon appointment","tokens":["Cher","Roydon","appointment"]},"agent_utterance":{"described_entities":["entity@1748776995"],"original_text":"Here are some times when you and Cher Roydon are free.","tokens":["Here","are","some","times","when","you","and","Cher","Roydon","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Cher Roydon\"))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (?= (Thursday))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) ?= :reference ^DayOfWeek (Thursday))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Thursday will work","tokens":["Thursday","will","work"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (?= #(DayOfWeek \"THURSDAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Paige Ashworth\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Paige Ashworth\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Paige Ashworth","tokens":["Paige","Ashworth"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the contact information for Paige Ashworth:","tokens":["Here","is","the","contact","information","for","Paige","Ashworth",":"]},"tags":{"original_lispress":"(Yield :output (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Paige Ashworth\")))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"thank you","tokens":["thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"046f8c65-3f19-4af5-884a-035a09ec0668","turns":[{"lispress":"(Yield (IsFree (RecipientAvailability (& (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (HourMinuteMilitary 13L 0L)))) (Event.attendees_? (AttendeeListHasRecipient (toRecipient (CurrentUser))))) true)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (IsFree :eventCandidates ^EventCandidatesWithAndWithoutConflicts (RecipientAvailability :eventConstraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (HourMinuteMilitary :hours ^Long 13L :minutes ^Long 0L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))) :includingMe ^Boolean true)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have free time on Friday around 1300","tokens":["Do","I","have","free","time","on","Friday","around","1300"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. you are free on Friday.","tokens":["Yes",".","you","are","free","on","Friday","."]},"tags":{"original_lispress":"(Yield :output (IsFree :eventCandidates (RecipientAvailability :eventConstraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (toRecipient (CurrentUser))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (HourMinuteMilitary :hours #(Number 13) :minutes #(Number 0))))) :includingMe #(Boolean true))))"}},{"lispress":"(let (x0 (NextTime (HourMinuteMilitary 12L 30L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"free time\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (HourMinuteMilitary 15L 30L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (NextTime :time ^Time (HourMinuteMilitary :hours ^Long 12L :minutes ^Long 30L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"free time\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (HourMinuteMilitary :hours ^Long 15L :minutes ^Long 30L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Block off a period of time from 1230 to 1530 as free time please","tokens":["Block","off","a","period","of","time","from","1230","to","1530","as","free","time","please"]},"agent_utterance":{"described_entities":["entity@2127227790"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (NextTime :time (HourMinuteMilitary :hours #(Number 12) :minutes #(Number 30.0)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (HourMinuteMilitary :hours #(Number 15) :minutes #(Number 30.0)))) :start (?= x0) :subject (?= #(String \"free time\")))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"pick up kids\")) (Event.start_? (?= (NextTime (HourMinuteMilitary 16L 0L)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"pick up kids\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (HourMinuteMilitary :hours ^Long 16L :minutes ^Long 0L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"perfect and add pick up kids at 16:00","tokens":["perfect","and","add","pick","up","kids","at","16",":","00"]},"agent_utterance":{"described_entities":["entity@1597795970"],"original_text":"I've put that on your calendar. __BREAK How's this?","tokens":["I","'ve","put","that","on","your","calendar",".","How","'s","this","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (HourMinuteMilitary :hours #(Number 16) :minutes #(Number 0)))) :subject (?= #(String \"pick up kids\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (HourMinuteMilitary 17L 0L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinuteMilitary :hours ^Long 17L :minutes ^Long 0L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes, I need it pushed back to 1700 though.","tokens":["Yes",",","I","need","it","pushed","back","to","1700","though","."]},"agent_utterance":{"described_entities":["entity@1267950862"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinuteMilitary :hours #(Number 17) :minutes #(Number 0))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.end_? (DateTime.time_? (?= (HourMinutePm 6L 3L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 6L :minutes ^Long 3L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes looks good, but needs to end at 6.3","tokens":["Yes","looks","good",",","but","needs","to","end","at","6",".","3"]},"agent_utterance":{"described_entities":["entity@1900846233"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 6) :minutes #(Number 3))))))))"}}],"tags":{}}
{"dialogue_id":"737142ed-2ab6-4cf7-b539-67a640ba577a","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dinner\")))))) (Event.start_? (DateTime.time_? (TimeAround (NumberPM 8L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (TimeAround :time ^Time (NumberPM :number ^Long 8L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you move my dinner plan to around 8pm","tokens":["Can","you","move","my","dinner","plan","to","around","8","pm"]},"agent_utterance":{"described_entities":["entity@949852401"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dinner\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (TimeAround :time (NumberPM :number #(Number 8))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTime.time_? (TimeAround (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (TimeAround :time ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you find me some free time around 4?","tokens":["Can","you","find","me","some","free","time","around","4","?"]},"agent_utterance":{"described_entities":["entity@1600767972"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :time (TimeAround :time (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRangeDateTime (^(Event) EmptyStructConstraint) (AroundDateTime (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 6L)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRangeDateTime :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint DateTime) (AroundDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 6L)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you delete that one thing I had on Friday around 6 pm","tokens":["Can","you","delete","that","one","thing","I","had","on","Friday","around","6","pm"]},"agent_utterance":{"described_entities":["entity@1380647695"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRangeDateTime :event (Constraint[Event]) :range (AroundDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 6))))))))))))"}}],"tags":{}}
{"dialogue_id":"97e23aae-9cad-4237-aa8e-5d9b07071e48","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"hi, can you help me schedule a meeting","tokens":["hi",",","can","you","help","me","schedule","a","meeting"]},"agent_utterance":{"described_entities":["entity@406433634"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event]))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (NumberPM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"No, I need it to start at 1pm","tokens":["No",",","I","need","it","to","start","at","1","pm"]},"agent_utterance":{"described_entities":["entity@114241030"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))))))"}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The bottom one but make it last an hour","tokens":["The","bottom","one","but","make","it","last","an","hour"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.time_? (?= (NumberPM 1L)))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"thanks 1PM at for me","tokens":["thanks","1","PM","at","for","me"]},"agent_utterance":{"described_entities":["entity@1073222120"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Look very well","tokens":["Look","very","well"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"7b2066d4-f55c-4d32-b282-41ff96ab04d5","turns":[{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dave\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dave\")))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Where is my meeting with Dave?","tokens":["Where","is","my","meeting","with","Dave","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event with Dave is located at Starbucks.","tokens":["The","event","with","Dave","is","located","at","Starbucks","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dave\")))))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberAM 9L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 9L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I need that meeting to be 9 AM instead of PM","tokens":["I","need","that","meeting","to","be","9","AM","instead","of","PM"]},"agent_utterance":{"described_entities":["entity@716780306"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 9))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.time_? (?= (NumberAM 8L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 8L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"No, change the time to 8 am.","tokens":["No",",","change","the","time","to","8","am","."]},"agent_utterance":{"described_entities":["entity@1673033668"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 8))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.time_? (?= (NumberAM 8L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 8L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I need Meeting with Dave to start at 8.","tokens":["I","need","Meeting","with","Dave","to","start","at","8","."]},"agent_utterance":{"described_entities":["entity@1673033668"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 8))))))))"}}],"tags":{}}
{"dialogue_id":"89cbb5b2-efc0-4bc6-bbaf-372a42a0bd94","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\"))))))) (EventAllDayOnDate (Event.subject_? (?= \"beach trip\")) (NextDOW (Sunday)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\"))))))) :c2 ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"beach trip\")) :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make a beach trip with Abby all day on Sunday","tokens":["Make","a","beach","trip","with","Abby","all","day","on","Sunday"]},"agent_utterance":{"described_entities":["entity@2029452690"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))) :nonEmptyBase (EventAllDayOnDate :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :event (Constraint[Event] :subject (?= #(String \"beach trip\"))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayOnDate (^(Event) EmptyStructConstraint) (Tomorrow)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :date ^Date (Tomorrow)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Make an all day event tomorrow","tokens":["Make","an","all","day","event","tomorrow"]},"agent_utterance":{"described_entities":["entity@112730727"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayOnDate :date (Tomorrow) :event (Constraint[Event])))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.subject_? (?= \"Soccer and trunk or treat\")) (Event.isAllDay_? (?= true))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Soccer and trunk or treat\")) :c2 ^(Constraint Event) (Event.isAllDay_? :obj ^(Constraint Boolean) (^(Boolean) ?= :reference ^Boolean true))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Change appointment to Soccer and trunk or treat, all day","tokens":["Change","appointment","to","Soccer","and","trunk","or","treat",",","all","day"]},"agent_utterance":{"described_entities":["entity@2142109957"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :isAllDay (?= #(Boolean true)) :subject (?= #(String \"Soccer and trunk or treat\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Looks good.","tokens":["Looks","good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"49f5aa46-2193-4f65-851b-223056d2297f","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tina\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tina\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you schedule a meeting with Tina tomorrow at 3 pm?","tokens":["Can","you","schedule","a","meeting","with","Tina","tomorrow","at","3","pm","?"]},"agent_utterance":{"described_entities":["entity@2093420026"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tina\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes thank you","tokens":["Yes","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you delete that?","tokens":["Can","you","delete","that","?"]},"agent_utterance":{"described_entities":["entity@1779394363"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(FencePeopleQa)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FencePeopleQa)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Is Tina in my address book?","tokens":["Is","Tina","in","my","address","book","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I don't have that kind of information about people.","tokens":["I","do","n't","have","that","kind","of","information","about","people","."]},"tags":{"original_lispress":"(FencePeopleQa)"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"ah... yeah, delete it.","tokens":["ah","...","yeah",",","delete","it","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Yes bot, this is correct. Thank you.","tokens":["Yes","bot",",","this","is","correct",".","Thank","you","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"There isn't you've been very helpful. bye now","tokens":["There","is","n't","you","'ve","been","very","helpful",".","bye","now"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"breakfast meeting\")) (Event.start_? (DateTime.date_? (?= (Tomorrow))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ike\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"breakfast meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ike\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"I need a breakfast meeting with Ike tomorrow","tokens":["I","need","a","breakfast","meeting","with","Ike","tomorrow"]},"agent_utterance":{"described_entities":["entity@801363822"],"original_text":"Here are some times when you and Ike are free.","tokens":["Here","are","some","times","when","you","and","Ike","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ike\")))))) :start (Constraint[DateTime] :date (?= (Tomorrow))) :subject (?= #(String \"breakfast meeting\"))))))"}}],"tags":{}}
{"dialogue_id":"1107d49b-3ec6-4a91-b9e2-a80dfa82a923","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"get a haircut\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (HourMinuteAm 11L 45L))))) (Event.location_? (?= (LocationKeyphrase.apply \"the Mall of America\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"get a haircut\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (HourMinuteAm :hours ^Long 11L :minutes ^Long 45L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"the Mall of America\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add get a haircut to my schedule at the Mall of America tomorrow at 11:45 am.","tokens":["Add","get","a","haircut","to","my","schedule","at","the","Mall","of","America","tomorrow","at","11",":","45","am","."]},"agent_utterance":{"described_entities":["entity@493552578"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"the Mall of America\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (HourMinuteAm :hours #(Number 11) :minutes #(Number 45)))) :subject (?= #(String \"get a haircut\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Thats great","tokens":["That","s","great"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (WillRain (WeatherForEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"hair cut\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherForEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"hair cut\"))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Will it be raining out when I get my hair cut?","tokens":["Will","it","be","raining","out","when","I","get","my","hair","cut","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events.","tokens":["I","did","n't","find","any","events","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherForEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"hair cut\")))))))))"}}],"tags":{}}
{"dialogue_id":"da8993c2-14a0-4c8a-9740-a0a9f5ca08de","turns":[{"lispress":"(Yield (Place.url (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"Pizza Party\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Place.url :obj ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Pizza Party\"))))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Show me the website for the Pizza Party tomorrow.","tokens":["Show","me","the","website","for","the","Pizza","Party","tomorrow","."]},"agent_utterance":{"described_entities":[],"original_text":"It's http://url.com","tokens":["It","'s","http://url.com"]},"tags":{"original_lispress":"(Yield :output (:url (singleton (:results (FindPlaceMultiResults :place (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"Pizza Party\")))))))))))))"}},{"lispress":"(Yield (Place.url (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Sunday)) (Event.subject_? (?~= \"Breakfast\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Place.url :obj ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Breakfast\"))))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"show me the website for the Breakfast on Sunday","tokens":["show","me","the","website","for","the","Breakfast","on","Sunday"]},"agent_utterance":{"described_entities":[],"original_text":"It's http://url.com","tokens":["It","'s","http://url.com"]},"tags":{"original_lispress":"(Yield :output (:url (singleton (:results (FindPlaceMultiResults :place (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :event (Constraint[Event] :subject (?~= #(String \"Breakfast\")))))))))))))"}},{"lispress":"(Yield (Place.url (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"the Home Depot in Federal Way\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Place.url :obj ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"the Home Depot in Federal Way\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Show me the website for the Home Depot in Federal Way","tokens":["Show","me","the","website","for","the","Home","Depot","in","Federal","Way"]},"agent_utterance":{"described_entities":[],"original_text":"I found 2 different places matching that description. Can you be more specific?","tokens":["I","found","2","different","places","matching","that","description",".","Can","you","be","more","specific","?"]},"tags":{"original_lispress":"(Yield :output (:url (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"the Home Depot in Federal Way\"))))))"}}],"tags":{}}
{"dialogue_id":"2a672595-0dd1-4d52-b971-c4ffc6b29d41","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"sales meeting\")) (Event.location_? (roomRequest))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"sales meeting\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (roomRequest))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need a room for a sales meeting.","tokens":["I","need","a","room","for","a","sales","meeting","."]},"agent_utterance":{"described_entities":["entity@301504205"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (roomRequest) :subject (?= #(String \"sales meeting\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Looks fantastic","tokens":["Looks","fantastic"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar today from 10:00 to 10:30 AM.","tokens":["I","'ve","put","that","on","your","calendar","today","from","10",":","00","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (DateTime.date_? (?= (Tomorrow)))) (Event.location_? (& (?= (LocationKeyphrase.apply \"Bellevue\")) (roomRequest)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) & :c1 ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Bellevue\")) :c2 ^(Constraint LocationKeyphrase) (roomRequest)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I will be in Bellevue tomorrow with Abby. Can you get us a room","tokens":["I","will","be","in","Bellevue","tomorrow","with","Abby",".","Can","you","get","us","a","room"]},"agent_utterance":{"described_entities":["entity@650448327"],"original_text":"Here are some times when you and Abby Gonano are free.","tokens":["Here","are","some","times","when","you","and","Abby","Gonano","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))) :location (andConstraint (?= #(LocationKeyphrase \"Bellevue\")) (roomRequest)) :start (Constraint[DateTime] :date (?= (Tomorrow)))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Looks really good","tokens":["Looks","really","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberAM 11L)))) (Event.location_? (& (?= (LocationKeyphrase.apply \"NERD\")) (roomRequest)))) (Event.attendees_? (AttendeeListHasPeople (FindTeamOf (toRecipient (CurrentUser)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberAM :number ^Long 11L)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) & :c1 ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"NERD\")) :c2 ^(Constraint LocationKeyphrase) (roomRequest)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasPeople :people ^(List Person) (FindTeamOf :recipient ^Recipient (toRecipient :person ^Person (CurrentUser)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I need to meet my team in a room at NERD for Sat at 11 am.","tokens":["I","need","to","meet","my","team","in","a","room","at","NERD","for","Sat","at","11","am","."]},"agent_utterance":{"described_entities":["entity@131353521"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasPeople :people (FindTeamOf :recipient (toRecipient (CurrentUser)))) :location (andConstraint (?= #(LocationKeyphrase \"NERD\")) (roomRequest)) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberAM :number #(Number 11))))))))"}}],"tags":{}}
{"dialogue_id":"9783f68a-ebf9-4902-9b65-53f3faace50f","turns":[{"lispress":"(Yield (Event.duration (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"baby shower\")) (ThisWeek)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Duration) Yield :output ^Duration (Event.duration :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"baby shower\")) :range ^(Constraint Date) (ThisWeek)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"How long is the baby shower this week?","tokens":["How","long","is","the","baby","shower","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"baby shower\" this week is for a half hour.","tokens":["The","event","matching","\"","baby","shower","\"","this","week","is","for","a","half","hour","."]},"tags":{"original_lispress":"(Yield :output (:duration (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"baby shower\"))) :range (ThisWeek)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?~= \"ultrasound\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"ultrasound\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What about my ultrasound?","tokens":["What","about","my","ultrasound","?"]},"agent_utterance":{"described_entities":[],"original_text":"2 hours, 0 minutes, and 0 seconds","tokens":["2","hours",",","0","minutes",",","and","0","seconds"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :subject (?~= #(String \"ultrasound\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.duration_? (?= (toHours 5))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 5))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Change that to 5 hours. I'm having a litter","tokens":["Change","that","to","5","hours",".","I","'m","having","a","litter"]},"agent_utterance":{"described_entities":["entity@710358442"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :duration (?= (toHours #(Number 5)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes it does.","tokens":["Yes","it","does","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Ultrasound\" to be for 5 hours.","tokens":["I","'ve","changed","\"","Ultrasound","\"","to","be","for","5","hours","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"thanks!","tokens":["thanks","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"f4019877-3588-4e7d-9fa1-f7bc2c511ddd","turns":[{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I am very busy","tokens":["I","am","very","busy"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Cher Roydon\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Cher Roydon\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I need to make an appointment with Cher Roydon","tokens":["I","need","to","make","an","appointment","with","Cher","Roydon"]},"agent_utterance":{"described_entities":["entity@1116833047"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Cher Roydon\"))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The first one will work","tokens":["The","first","one","will","work"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"business meeting\")) (Event.start_? (?= (Execute (refer (extensionConstraint (^(DateTime) EmptyStructConstraint))))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Karl Boon\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"business meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (^(DateTime) Execute :intension ^(CalflowIntension DateTime) (^(DateTime) refer :constraint ^(Constraint (CalflowIntension DateTime)) (^(DateTime) extensionConstraint :constraint ^(Constraint DateTime) (^(DateTime) EmptyStructConstraint))))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Karl Boon\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Actually, I have to fly to a business meeting with Karl Boon at that time","tokens":["Actually",",","I","have","to","fly","to","a","business","meeting","with","Karl","Boon","at","that","time"]},"agent_utterance":{"described_entities":["entity@1780688424"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Karl Boon\")))))) :start (?= (Execute :intension (refer (extensionConstraint (Constraint[DateTime]))))) :subject (?= #(String \"business meeting\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"No, remove Megan Bowen","tokens":["No",",","remove","Megan","Bowen"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"team meeting\")) (Event.attendees_? (AttendeeListHasPeople (FindTeamOf (toRecipient (CurrentUser)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"team meeting\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasPeople :people ^(List Person) (FindTeamOf :recipient ^Recipient (toRecipient :person ^Person (CurrentUser)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":6,"user_utterance":{"original_text":"I also need a team meeting with everyone on my team","tokens":["I","also","need","a","team","meeting","with","everyone","on","my","team"]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I've encountered an internal error (InvalidExpression).","tokens":["I","'ve","encountered","an","internal","error","(","InvalidExpression",")","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasPeople :people (FindTeamOf :recipient (toRecipient (CurrentUser)))) :subject (?= #(String \"team meeting\"))))))","do-not-train":""}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"Look up everyone at set up a meeting","tokens":["Look","up","everyone","at","set","up","a","meeting"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"I am busy, hurry up","tokens":["I","am","busy",",","hurry","up"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)"}}],"tags":{}}
{"dialogue_id":"6c42f6d4-7e4a-4293-af94-f5b50d327888","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"soccer practice\")) (FullMonthofMonth (Date.month (Today))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"soccer practice\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (Date.month :obj ^Date (Today))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Will I have soccer practice this month?","tokens":["Will","I","have","soccer","practice","this","month","?"]},"agent_utterance":{"described_entities":[],"original_text":"No. I didn't find any events on your calendar.","tokens":["No",".","I","did","n't","find","any","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"soccer practice\"))) :range (FullMonthofMonth :month (:month (Today))))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you make an event for Monday at 4pm","tokens":["Can","you","make","an","event","for","Monday","at","4","pm"]},"agent_utterance":{"described_entities":["entity@1968940921"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes this looks much better","tokens":["Yes","this","looks","much","better"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Thank you very much","tokens":["Thank","you","very","much"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"DO I have a meeting on friday?","tokens":["DO","I","have","a","meeting","on","friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event on Friday. It's \"Lunch Meeting\" from 11:00 to 11:30 AM.","tokens":["Yes",",","I","found","one","event","on","Friday",".","It","'s","\"","Lunch","Meeting","\"","from","11",":","00","to","11",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event]))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"cf26fdfc-232b-4d66-b2f3-ef79506d7bf7","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"budgeting meeting\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Thursday)) (NumberPM 3L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"budgeting meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :time ^Time (NumberPM :number ^Long 3L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Can you schedule a budgeting meeting at 3 pm on Thursday.","tokens":["Can","you","schedule","a","budgeting","meeting","at","3","pm","on","Thursday","."]},"agent_utterance":{"described_entities":["entity@439325795"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"do-not-train":"","original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"budgeting meeting\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberPM 2L)))) (Event.end_? (DateTime.time_? (?= (NumberPM 3L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 2L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 3L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Change it to go from 2 pm to 3 pm.","tokens":["Change","it","to","go","from","2","pm","to","3","pm","."]},"agent_utterance":{"described_entities":["entity@1731248872"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 3)))) :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 2))))))))"}}],"tags":{}}
{"dialogue_id":"e48f898e-b74c-4549-a026-282af590a40c","turns":[{"lispress":"(Yield (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Brian T\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Recipient) Yield :output ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Brian T\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Good morning. I'd like to know who the supervisor of Brian T is.","tokens":["Good","morning",".","I","'d","like","to","know","who","the","supervisor","of","Brian","T","is","."]},"agent_utterance":{"described_entities":[],"original_text":"Brian T's manager is Dan Schoffel.","tokens":["Brian","T","'s","manager","is","Dan","Schoffel","."]},"tags":{"original_lispress":"(Yield :output (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Brian T\")))))))"}},{"lispress":"(let (x0 (PersonName.apply \"Molly\")) (Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) x0))))) (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) x0))))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^PersonName (PersonName.apply :name ^String \"Molly\")) ^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name x0))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name x0))))))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"When am I meeting with Molly and her boss?","tokens":["When","am","I","meeting","with","Molly","and","her","boss","?"]},"agent_utterance":{"described_entities":[],"original_text":"Your event with Molly and Dan Schoffel is on Saturday at 9:00 AM.","tokens":["Your","event","with","Molly","and","Dan","Schoffel","is","on","Saturday","at","9",":","00","AM","."]},"tags":{"original_lispress":"(let (x0 #(PersonName \"Molly\")) (Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name x0))))) (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name x0))))))))))))))"}},{"lispress":"(Yield (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Molly\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Recipient) Yield :output ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Molly\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Who is Molly's manager?","tokens":["Who","is","Molly","'s","manager","?"]},"agent_utterance":{"described_entities":[],"original_text":"Molly's manager is Dan Schoffel.","tokens":["Molly","'s","manager","is","Dan","Schoffel","."]},"tags":{"original_lispress":"(Yield :output (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Molly\")))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"looks ok, thanks","tokens":["looks","ok",",","thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"donald trump\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"donald trump\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"add donald trump to this meeting also","tokens":["add","donald","trump","to","this","meeting","also"]},"agent_utterance":{"described_entities":["entity@2113790297"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"donald trump\"))))))))))"}}],"tags":{}}
{"dialogue_id":"7a5d9018-2150-414a-863d-bfc4951bedfd","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"welcome home party\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 26L (March)) (NumberPM 2L))))) (Event.duration_? (?= (toHours 2)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"welcome home party\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 26L :month ^Month (March)) :time ^Time (NumberPM :number ^Long 2L))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule a welcome home party on March 26 at 2 pm for 2 hours.","tokens":["Schedule","a","welcome","home","party","on","March","26","at","2","pm","for","2","hours","."]},"agent_utterance":{"described_entities":["entity@1987532852"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 2))) :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 26) :month #(Month \"MARCH\")) :time (NumberPM :number #(Number 2)))) :subject (?= #(String \"welcome home party\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yup.","tokens":["Yup","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"54b804d9-6a46-4cf3-9e7e-39c7cd6e493c","turns":[{"lispress":"(Yield (FindLastEvent (EventOnDate (Today) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (FindLastEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what's the last meeting i have today","tokens":["what","'s","the","last","meeting","i","have","today"]},"agent_utterance":{"described_entities":[],"original_text":"The last event is \"jump jump\" today from 11:00 to 11:30 PM.","tokens":["The","last","event","is","\"","jump","jump","\"","today","from","11",":","00","to","11",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindLastEvent :constraint (EventOnDate :date (Today) :event (Constraint[Event]))))"}},{"lispress":"(Yield (Event.location (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"haha oh boy! is it at the place I think it is?","tokens":["haha","oh","boy","!","is","it","at","the","place","I","think","it","is","?"]},"agent_utterance":{"described_entities":[],"original_text":"The last event is located at trampoline hut.","tokens":["The","last","event","is","located","at","trampoline","hut","."]},"tags":{"original_lispress":"(Yield :output (:location (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(Yield (Event.location (FindNumNextEvent (EventOnDate (adjustByPeriod (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (toDays 1)) (^(Event) EmptyStructConstraint)) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (adjustByPeriod :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :period ^Period (toDays :days ^Number 1)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yayyyyy, can ya tell me whereabouts my first meeting is the day after","tokens":["yayyyyy",",","can","ya","tell","me","whereabouts","my","first","meeting","is","the","day","after"]},"agent_utterance":{"described_entities":[],"original_text":"The next event tomorrow is located at trampoline forever.","tokens":["The","next","event","tomorrow","is","located","at","trampoline","forever","."]},"tags":{"original_lispress":"(Yield :output (:location (FindNumNextEvent :constraint (EventOnDate :date (adjustByPeriod (Execute :intension (refer (extensionConstraint (Constraint[Date])))) (toDays #(Number 1))) :event (Constraint[Event])) :number #(Number 1))))"}}],"tags":{}}
{"dialogue_id":"649b6e70-a30f-4f52-87db-8e3b0b77df77","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dinner\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"get rid of my dinner event","tokens":["get","rid","of","my","dinner","event"]},"agent_utterance":{"described_entities":["entity@628711868"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dinner\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yep, that's it.","tokens":["Yep",",","that","'s","it","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event matching \"dinner\".","tokens":["I","'ve","deleted","your","event","matching","\"","dinner","\"","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"dinner\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Friday)))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Amy\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Friday)))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Amy\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Add dinner with Amy on Friday.","tokens":["Add","dinner","with","Amy","on","Friday","."]},"agent_utterance":{"described_entities":["entity@2080119727"],"original_text":"Here are some times when you and Amy are free.","tokens":["Here","are","some","times","when","you","and","Amy","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Amy\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"FRIDAY\")))) :subject (?= #(String \"dinner\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"How about the second one.","tokens":["How","about","the","second","one","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Wait, that's dinner at 1PM, can you move it closer to dinner time?","tokens":["Wait",",","that","'s","dinner","at","1","PM",",","can","you","move","it","closer","to","dinner","time","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}}],"tags":{}}
{"dialogue_id":"d5da2ad0-8b46-4360-8fd3-99035cc034e0","turns":[{"lispress":"(let (x0 (NextTime (NumberPM 3L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"bike riding\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (EndOfWorkDay))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jim\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 3L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"bike riding\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (EndOfWorkDay))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jim\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Could you put bike riding with Jim on my calendar for today at 3 pm till the end of the day?","tokens":["Could","you","put","bike","riding","with","Jim","on","my","calendar","for","today","at","3","pm","till","the","end","of","the","day","?"]},"agent_utterance":{"described_entities":["entity@811091678"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (NextTime :time (NumberPM :number #(Number 3)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jim\")))))) :end (?= (TimeAfterDateTime :dateTime x0 :time (EndOfWorkDay))) :start (?= x0) :subject (?= #(String \"bike riding\")))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Friday)) (EndOfWorkDay)) (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (EndOfWorkDay)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Perfect. Can you also see where my friday event is taking place? Its at the end of the work day.","tokens":["Perfect",".","Can","you","also","see","where","my","friday","event","is","taking","place","?","Its","at","the","end","of","the","work","day","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. The event on Friday at 5:00 is located at Battle of the Somme.","tokens":["I","'ve","put","that","on","your","calendar",".","The","event","on","Friday","at","5",":","00","is","located","at","Battle","of","the","Somme","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (EndOfWorkDay)) :event (Constraint[Event]))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"BBQ Party\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (EndOfWorkDay))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"BBQ Party\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (EndOfWorkDay))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Cool, lets make BBQ Party for this Friday at the end of work day.","tokens":["Cool",",","lets","make","BBQ","Party","for","this","Friday","at","the","end","of","work","day","."]},"agent_utterance":{"described_entities":["entity@714473633"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (EndOfWorkDay))) :subject (?= #(String \"BBQ Party\"))))))"}}],"tags":{}}
{"dialogue_id":"f952185a-0230-4925-92b6-3f4261cad67d","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Put on schedule movie date with wife on Friday at 5:00 pm.","tokens":["Put","on","schedule","movie","date","with","wife","on","Friday","at","5",":","00","pm","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book. Please use a full name and try again.","tokens":["I","can","only","look","up","names","in","your","address","book",".","Please","use","a","full","name","and","try","again","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Date night with Meghan\")) (Event.start_? (?= (NextTime (NumberPM 5L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Date night with Meghan\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 5L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Ok... add \"Date night with Meghan\" at 5.","tokens":["Ok","...","add","\"","Date","night","with","Meghan","\"","at","5","."]},"agent_utterance":{"described_entities":["entity@1799327726"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberPM :number #(Number 5)))) :subject (?= #(String \"Date night with Meghan\"))))))"}},{"lispress":"(FencePeopleQa)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FencePeopleQa)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Is Meghan listed as my wife?","tokens":["Is","Meghan","listed","as","my","wife","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I don't have that kind of information about people.","tokens":["I","do","n't","have","that","kind","of","information","about","people","."]},"tags":{"original_lispress":"(FencePeopleQa)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Oh I'll check later then.","tokens":["Oh","I","'ll","check","later","then","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Actually Date night with Meghan looks right to me.","tokens":["Actually","Date","night","with","Meghan","looks","right","to","me","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"brunch\")) (Event.start_? (DateTimeConstraint (Morning) (NextDOW (Sunday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"brunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (NextDOW :dow ^DayOfWeek (Sunday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"and book brunch on Sunday morning.","tokens":["and","book","brunch","on","Sunday","morning","."]},"agent_utterance":{"described_entities":["entity@1384662018"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Morning) :date (NextDOW :dow #(DayOfWeek \"SUNDAY\"))) :subject (?= #(String \"brunch\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?= \"lunch\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Change the name from brunch to lunch.","tokens":["Change","the","name","from","brunch","to","lunch","."]},"agent_utterance":{"described_entities":["entity@230195961"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"Pause ploease.","tokens":["Pause","ploease","."]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}}],"tags":{}}
{"dialogue_id":"1b946840-204f-4a67-a468-57d7f12caa45","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.subject_? (?~= \"work\"))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"work\"))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I'd like to search for a work calendar event","tokens":["I","'d","like","to","search","for","a","work","calendar","event"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events matching \"work\".","tokens":["I","did","n't","find","any","events","matching","\"","work","\"","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"work\")))))"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberPM 12L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"wedding\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 6L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberPM :number ^Long 12L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"wedding\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 6L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you make a calendar event for wedding this Saturday from 12pm to 6pm?","tokens":["Can","you","make","a","calendar","event","for","wedding","this","Saturday","from","12","pm","to","6","pm","?"]},"agent_utterance":{"described_entities":["entity@1183447341"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberPM :number #(Number 12)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 6)))) :start (?= x0) :subject (?= #(String \"wedding\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Thanks","tokens":["Thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"976a9aa3-c775-4622-84db-b3117a0312c7","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch date\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Sunday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch date\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Sunday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"lunch date Sunday","tokens":["lunch","date","Sunday"]},"agent_utterance":{"described_entities":["entity@246678713"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"SUNDAY\")))) :subject (?= #(String \"lunch date\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"second one is good","tokens":["second","one","is","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"308a5ba6-0013-474d-9365-bc5f1748503a","turns":[{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"anniversary party\")))))) (ResponseStatusType.TentativelyAccepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"anniversary party\")))))) :response ^ResponseStatusType (ResponseStatusType.TentativelyAccepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please tell m e who has responded that they tentativley accept that they will come to my anniversary party?","tokens":["Please","tell","m","e","who","has","responded","that","they","tentativley","accept","that","they","will","come","to","my","anniversary","party","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have tentatively accepted \"anniversary party\": Kim Possible.","tokens":["Here","is","the","list","of","attendees","who","have","tentatively","accepted","\"","anniversary","party","\"",":","Kim","Possible","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"anniversary party\"))))))) :response #(ResponseStatusType \"TentativelyAccepted\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"Parks and Games\")) (ThisWeekend)))))) (ResponseStatusType.TentativelyAccepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Parks and Games\")) :range ^(Constraint Date) (ThisWeekend)))))) :response ^ResponseStatusType (ResponseStatusType.TentativelyAccepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"So for the Parks and Games for this weekend who might have accepted it.","tokens":["So","for","the","Parks","and","Games","for","this","weekend","who","might","have","accepted","it","."]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have tentatively accepted \"Parks and Games\": Elli Parker and Jesse Rosenfeld.","tokens":["Here","is","the","list","of","attendees","who","have","tentatively","accepted","\"","Parks","and","Games","\"",":","Elli","Parker","and","Jesse","Rosenfeld","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"Parks and Games\"))) :range (ThisWeekend)))))) :response #(ResponseStatusType \"TentativelyAccepted\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.subject_? (?~= \"Park Meeting\"))))))) (ResponseStatusType.TentativelyAccepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Park Meeting\"))))))) :response ^ResponseStatusType (ResponseStatusType.TentativelyAccepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I wasn't sure if anyone was still considering the Park Meeting this Friday. Is anyone a maybe?","tokens":["I","was","n't","sure","if","anyone","was","still","considering","the","Park","Meeting","this","Friday",".","Is","anyone","a","maybe","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have tentatively accepted \"Park Meeting\": Abby Gonano.","tokens":["Here","is","the","list","of","attendees","who","have","tentatively","accepted","\"","Park","Meeting","\"",":","Abby","Gonano","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :subject (?~= #(String \"Park Meeting\")))))))) :response #(ResponseStatusType \"TentativelyAccepted\")))"}}],"tags":{}}
{"dialogue_id":"9cd57e84-30ee-4ae4-86f7-bd8638b9ab0a","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint)))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTimeConstraint (Morning) (ClosestDayOfWeek (DateTime.date (Event.start x0)) (Friday))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :dow ^DayOfWeek (Friday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Push my today meeting to Friday mid morning","tokens":["Push","my","today","meeting","to","Friday","mid","morning"]},"agent_utterance":{"described_entities":["entity@234195048"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event])))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (DateTimeConstraint :constraint (Morning) :date (ClosestDayOfWeek :date (:date (:start x0)) :dow #(DayOfWeek \"FRIDAY\"))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (OnDateAfterTime (NextDOW (Wednesday)) (Lunch))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Howard\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (OnDateAfterTime :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (Lunch))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Howard\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"can you schedule a meeting with Howard after lunch Wednesday?","tokens":["can","you","schedule","a","meeting","with","Howard","after","lunch","Wednesday","?"]},"agent_utterance":{"described_entities":["entity@1483665196"],"original_text":"I found 2 different people matching your query. Which of these did you mean?","tokens":["I","found","2","different","people","matching","your","query",".","Which","of","these","did","you","mean","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Howard\")))))) :start (OnDateAfterTime :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (Lunch))))))"}}],"tags":{}}
{"dialogue_id":"dc5cd109-2fb5-42ae-b747-9adecb94890b","turns":[{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi, please cancel the appointment with my daughter's pediatrician from 3-4pm today and then make a new appointment at the office in Atlanta for next Monday from 1-2pm. Please add my husband to the invite.","tokens":["Hi",",","please","cancel","the","appointment","with","my","daughter","'s","pediatrician","from","3","-","4","pm","today","and","then","make","a","new","appointment","at","the","office","in","Atlanta","for","next","Monday","from","1","-","2","pm",".","Please","add","my","husband","to","the","invite","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}}],"tags":{}}
{"dialogue_id":"11a324f4-6ed4-4488-98ee-d9ab417178c4","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"doctors appointment\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberAM 9L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"doctors appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberAM :number ^Long 9L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Can you add a doctors appointment for Saturday at 9 am?","tokens":["Can","you","add","a","doctors","appointment","for","Saturday","at","9","am","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"do-not-train":"","original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberAM :number #(Number 9)))) :subject (?= #(String \"doctors appointment\"))))))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The appointment will be open ended.","tokens":["The","appointment","will","be","open","ended","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"6cbba80e-f8ca-4ff6-be06-289b0fbab0a5","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"marketing meeting\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Thursday)) (NumberPM 1L))))))))) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jon\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tina\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"marketing meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :time ^Time (NumberPM :number ^Long 1L))))))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jon\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tina\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Jon and Tina should be at my 1:00 Thursday marketing meeting.","tokens":["Jon","and","Tina","should","be","at","my","1",":","00","Thursday","marketing","meeting","."]},"agent_utterance":{"described_entities":["entity@108386494"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :time (NumberPM :number #(Number 1)))) :subject (?~= #(String \"marketing meeting\"))))))) :update (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jon\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tina\")))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Paul\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Paul\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, that's great, add Paul also please.","tokens":["Yes",",","that","'s","great",",","add","Paul","also","please","."]},"agent_utterance":{"described_entities":["entity@565661936"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Paul\"))))))))))"}}],"tags":{}}
{"dialogue_id":"841bb79c-4b6a-4871-a0f1-324b24bf25e0","turns":[{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"i want to be free all day tomorrow, please delete all the activities on my calendar","tokens":["i","want","to","be","free","all","day","tomorrow",",","please","delete","all","the","activities","on","my","calendar"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}}],"tags":{}}
{"dialogue_id":"b5b3ccd2-65f1-4e4e-a684-3e07d2df3a29","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint)))))) (do (^(Event) EmptyStructConstraint) (do (Path.apply \"attendees\") (do (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alex Han\"))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (?= (adjustByPeriodDuration (Event.start x0) (PeriodDuration.apply :duration (toHours 2))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) ^Unit (^((Constraint Event) Unit) do :arg1 ^(Constraint Event) (^(Event) EmptyStructConstraint) :arg2 ^Unit (^(Path Unit) do :arg1 ^Path (Path.apply :inner ^String \"attendees\") :arg2 ^Unit (^((Constraint (List Attendee)) Unit) do :arg1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alex Han\"))) :arg2 ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.start :obj x0) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 2))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Defer the meeting with Alex Han today by 2 hour.","tokens":["Defer","the","meeting","with","Alex","Han","today","by","2","hour","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I’ve encountered an error I haven’t been trained to handle. Can you try a different request?","tokens":["I","’ve","encountered","an","error","I","have","n’t","been","trained","to","handle",".","Can","you","try","a","different","request","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event])))))) (do (Constraint[Event]) #(Path \"attendees\") (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alex Han\"))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (?= (adjustByPeriodDuration (:start x0) (PeriodDuration :duration (toHours #(Number 2)))))))))))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"it's supposed to be 12-2","tokens":["it","'s","supposed","to","be","12","-","2"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"68c4b4e3-7d2f-416a-a2b9-c3bd0375df33","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"dentist appointment\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dentist appointment\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"delete dentist appointment tomorrow for me","tokens":["delete","dentist","appointment","tomorrow","for","me"]},"agent_utterance":{"described_entities":["entity@197694614"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"dentist appointment\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yep","tokens":["Yep"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event matching \"dentist appointment\" on February 26th.","tokens":["I","'ve","deleted","your","event","matching","\"","dentist","appointment","\"","on","February","26","th","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"1bcb6a23-8b9c-4e81-b4dc-e9828a678caa","turns":[{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Min) (temperature) (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"New York\"))) (DateTime.date_? (?= (Tomorrow))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Temperature) Yield :output ^Temperature (^(Temperature) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Min) :property ^(Lambda WeatherTable Temperature) (temperature) :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"New York\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"How cold is it going to be in New York tomorrow?","tokens":["How","cold","is","it","going","to","be","in","New","York","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"The minimum temperature will be 0.00 °F tomorrow.","tokens":["The","minimum","temperature","will","be","0",".","00","°","F","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"temperature\") :quantifier #(WeatherQuantifier \"Min\") :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"New York\"))) :time (Constraint[DateTime] :date (?= (Tomorrow))))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (rainPrecipProbability) (Execute (refer (extensionConstraint (^(WeatherTable) AlwaysTrueConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dimensionless) Yield :output ^Dimensionless (^(Dimensionless) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Dimensionless) (rainPrecipProbability) :table ^WeatherTable (^(WeatherTable) Execute :intension ^(CalflowIntension WeatherTable) (^(WeatherTable) refer :constraint ^(Constraint (CalflowIntension WeatherTable)) (^(WeatherTable) extensionConstraint :constraint ^(Constraint WeatherTable) (^(WeatherTable) AlwaysTrueConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What's the likelihood of rain?","tokens":["What","'s","the","likelihood","of","rain","?"]},"agent_utterance":{"described_entities":[],"original_text":"The chance of rain is 0.00% tomorrow.","tokens":["The","chance","of","rain","is","0",".","00","%","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"rainPrecipProbability\") :quantifier #(WeatherQuantifier \"Summarize\") :table (Execute :intension (refer (extensionConstraint (AlwaysTrueConstraint[WeatherTable]))))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"New York\"))) (DateTimeConstraint (Morning) (NextDOW (Friday)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"New York\"))) :time ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (NextDOW :dow ^DayOfWeek (Friday)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What will the weather be like in New York Friday morning?","tokens":["What","will","the","weather","be","like","in","New","York","Friday","morning","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F in New York Friday.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","in","New","York","Friday","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"New York\"))) :time (DateTimeConstraint :constraint (Morning) :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"walk\")) (Event.start_? (?= (NextTime (NumberAM 8L))))) (Event.location_? (?= (LocationKeyphrase.apply \"the park\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"walk\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberAM :number ^Long 8L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"the park\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Great schedule a walk in the park at 8 am","tokens":["Great","schedule","a","walk","in","the","park","at","8","am"]},"agent_utterance":{"described_entities":["entity@582552170"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"the park\")) :start (?= (NextTime :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"walk\"))))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (temperature) (Execute (refer (extensionConstraint (^(WeatherTable) AlwaysTrueConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Temperature) Yield :output ^Temperature (^(Temperature) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Temperature) (temperature) :table ^WeatherTable (^(WeatherTable) Execute :intension ^(CalflowIntension WeatherTable) (^(WeatherTable) refer :constraint ^(Constraint (CalflowIntension WeatherTable)) (^(WeatherTable) extensionConstraint :constraint ^(Constraint WeatherTable) (^(WeatherTable) AlwaysTrueConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Is it going to be nice and warm? I need to decide on what to wear.","tokens":["Is","it","going","to","be","nice","and","warm","?","I","need","to","decide","on","what","to","wear","."]},"agent_utterance":{"described_entities":[],"original_text":"The temperature will be 0.00 °F in New York Friday.","tokens":["The","temperature","will","be","0",".","00","°","F","in","New","York","Friday","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"temperature\") :quantifier #(WeatherQuantifier \"Summarize\") :table (Execute :intension (refer (extensionConstraint (AlwaysTrueConstraint[WeatherTable]))))))"}}],"tags":{}}
{"dialogue_id":"fd8feb8c-66f2-4f92-a4d9-679d612a092a","turns":[{"lispress":"(Yield (FindReports (toRecipient (CurrentUser))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Person)) Yield :output ^(List Person) (FindReports :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Who are my reports","tokens":["Who","are","my","reports"]},"agent_utterance":{"described_entities":[],"original_text":"Your direct reports are Abby Gonano, Jesse Rosenfeld and 1 other.","tokens":["Your","direct","reports","are","Abby","Gonano",",","Jesse","Rosenfeld","and","1","other","."]},"tags":{"original_lispress":"(Yield :output (FindReports :recipient (toRecipient (CurrentUser))))"}},{"lispress":"(Yield (FindReports (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Person)) Yield :output ^(List Person) (FindReports :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Who are Abby's direct reports","tokens":["Who","are","Abby","'s","direct","reports"]},"agent_utterance":{"described_entities":[],"original_text":"Abby Gonano has no direct reports.","tokens":["Abby","Gonano","has","no","direct","reports","."]},"tags":{"original_lispress":"(Yield :output (FindReports :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))))"}},{"lispress":"(Yield (FindReports (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Rosenfield\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Person)) Yield :output ^(List Person) (FindReports :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Rosenfield\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Rosenfield's reports","tokens":["Rosenfield","'s","reports"]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Rosenfield in your address book.","tokens":["I","did","n't","find","anyone","named","Rosenfield","in","your","address","book","."]},"tags":{"original_lispress":"(Yield :output (FindReports :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Rosenfield\")))))))"}},{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Are you sure there isn't some sort of error?","tokens":["Are","you","sure","there","is","n't","some","sort","of","error","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)"}},{"lispress":"(Yield (FindReports (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jesse Rosenfeld\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Person)) Yield :output ^(List Person) (FindReports :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jesse Rosenfeld\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Who are Jesse Rosenfeld's reports?","tokens":["Who","are","Jesse","Rosenfeld","'s","reports","?"]},"agent_utterance":{"described_entities":[],"original_text":"Jesse Rosenfeld has no direct reports.","tokens":["Jesse","Rosenfeld","has","no","direct","reports","."]},"tags":{"original_lispress":"(Yield :output (FindReports :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jesse Rosenfeld\")))))))"}}],"tags":{}}
{"dialogue_id":"a9144097-fb9b-4b25-936a-c4cfc002e070","turns":[{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventForRestOfToday (^(Event) EmptyStructConstraint))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dennis\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventForRestOfToday :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dennis\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Is Dennis attending the meeting later today?","tokens":["Is","Dennis","attending","the","meeting","later","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, Dennis has declined the \"staff meeting\" invitation.","tokens":["No",",","Dennis","has","declined","the","\"","staff","meeting","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (EventForRestOfToday :event (Constraint[Event]))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dennis\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ben\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ben\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Thanks. Is Ben going to make it to the meeting?","tokens":["Thanks",".","Is","Ben","going","to","make","it","to","the","meeting","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Ben had accepted the \"staff meeting\" invitation.","tokens":["Yes",",","Ben","had","accepted","the","\"","staff","meeting","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (Execute :intension (refer (extensionConstraint (Constraint[Event])))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ben\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"baby shower\"))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jen\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"baby shower\"))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jen\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Is Jen attending the baby shower?","tokens":["Is","Jen","attending","the","baby","shower","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Jen has accepted the \"baby shower\" invitation.","tokens":["Yes",",","Jen","has","accepted","the","\"","baby","shower","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"baby shower\")))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jen\")))))))) #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"baby shower\")))))) (Event.start_? (DateTime.time_? (?= (NumberAM 12L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"baby shower\")))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 12L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"put on the baby shower at 12.00am","tokens":["put","on","the","baby","shower","at","12",".","00","am"]},"agent_utterance":{"described_entities":["entity@554087072"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"baby shower\"))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 12))))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"baby shower\"))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Deborah\")))))))) (ResponseStatusType.Accepted))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"baby shower\"))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Deborah\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Good. Is Deborah going to make it to the baby shower too?","tokens":["Good",".","Is","Deborah","going","to","make","it","to","the","baby","shower","too","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"baby shower\" to be at 12:00. Deborah is an organizer of \"baby shower\".","tokens":["I","'ve","changed","\"","baby","shower","\"","to","be","at","12",":","00",".","Deborah","is","an","organizer","of","\"","baby","shower","\"","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"baby shower\")))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Deborah\")))))))) #(ResponseStatusType \"Accepted\"))))"}},{"lispress":"(Yield (== (ResponseStatus.response (AttendeeResponseStatus (AttendeeFromEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"Thanksgiving dinner\")) (FullMonthofMonth (NextMonth)))))) (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Laura\")))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(ResponseStatusType) == :x ^ResponseStatusType (ResponseStatus.response :obj ^ResponseStatus (AttendeeResponseStatus :attendee ^Attendee (AttendeeFromEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Thanksgiving dinner\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (NextMonth)))))) :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Laura\")))))))) :y ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Thanks. Is Laura coming to Thanksgiving dinner next month?","tokens":["Thanks",".","Is","Laura","coming","to","Thanksgiving","dinner","next","month","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, Laura has declined the \"Thanksgiving Dinner\" invitation.","tokens":["No",",","Laura","has","declined","the","\"","Thanksgiving","Dinner","\"","invitation","."]},"tags":{"original_lispress":"(Yield :output (== (:response (AttendeeResponseStatus :attendee (AttendeeFromEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"Thanksgiving dinner\"))) :range (FullMonthofMonth :month (NextMonth)))))) :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Laura\")))))))) #(ResponseStatusType \"Accepted\")))"}}],"tags":{}}
{"dialogue_id":"e38d0912-10d1-411c-9a56-5c70dcb678ff","turns":[{"lispress":"(Yield (allows (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tig Trager\"))) (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"Outward Bound experience\")) (FullMonthofMonth (August)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^((List Attendee)) allows :constraint ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tig Trager\"))) :value ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Outward Bound experience\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (August)))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Did you invite Tig Trager to the Outward Bound experience next August?","tokens":["Did","you","invite","Tig","Trager","to","the","Outward","Bound","experience","next","August","?"]},"agent_utterance":{"described_entities":[],"original_text":"Looks like it.","tokens":["Looks","like","it","."]},"tags":{"original_lispress":"(Yield :output (allows (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tig Trager\"))) (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"Outward Bound experience\"))) :range (FullMonthofMonth :month #(Month \"AUGUST\")))))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yeah It's good to have outward bound experience","tokens":["Yeah","It","'s","good","to","have","outward","bound","experience"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.subject_? (?= \"The Experience\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"The Experience\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Please change the title to The Experience.","tokens":["Please","change","the","title","to","The","Experience","."]},"agent_utterance":{"described_entities":["entity@2088608809"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :subject (?= #(String \"The Experience\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"This is fine.","tokens":["This","is","fine","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Outward Bound Experience\" to be named \"The Experience\".","tokens":["I","'ve","changed","\"","Outward","Bound","Experience","\"","to","be","named","\"","The","Experience","\"","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(FenceConditional)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceConditional)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Was Tom added to the invite, if not, please include him.","tokens":["Was","Tom","added","to","the","invite",",","if","not",",","please","include","him","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceConditional)"}}],"tags":{}}
{"dialogue_id":"e359429f-acab-4adb-b938-ffd94061e04a","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"can you tell about my appointment","tokens":["can","you","tell","about","my","appointment"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event])))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeek))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeek))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have an appointments this week?","tokens":["Do","I","have","an","appointments","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event this week. It's \"nail appointment\" tomorrow from 1:00 to 2:00 PM.","tokens":["Yes",",","I","found","one","event","this","week",".","It","'s","\"","nail","appointment","\"","tomorrow","from","1",":","00","to","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (ThisWeek))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberPM 7L))))) (Event.location_? (?= (LocationKeyphrase.apply \"The Meal and Deal\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberPM :number ^Long 7L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"The Meal and Deal\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Schedule a dinner on Saturday at 7 pm and The Meal and Deal.","tokens":["Schedule","a","dinner","on","Saturday","at","7","pm","and","The","Meal","and","Deal","."]},"agent_utterance":{"described_entities":["entity@827735455"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"The Meal and Deal\")) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberPM :number #(Number 7)))) :subject (?= #(String \"dinner\"))))))"}}],"tags":{}}
{"dialogue_id":"8743be24-29e3-4cb6-b39a-082c58b5cdf0","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) (Evening))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Evening))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have anything on my schedule tomorrow evening?","tokens":["Do","I","have","anything","on","my","schedule","tomorrow","evening","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event tomorrow evening. It's \"dinner date\" from 6:30 PM to 8:00.","tokens":["Yes",",","I","found","one","event","tomorrow","evening",".","It","'s","\"","dinner","date","\"","from","6",":","30","PM","to","8",":","00","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :timeRange (Evening))))) #(Number 0)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (Afternoon))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (Afternoon))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I need to make it in the afternoon.","tokens":["I","need","to","make","it","in","the","afternoon","."]},"agent_utterance":{"described_entities":["entity@1776871569"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (Afternoon))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberPM 3L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 3L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"change the time in to 3 in the afternoon","tokens":["change","the","time","in","to","3","in","the","afternoon"]},"agent_utterance":{"described_entities":["entity@1868366746"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"yes!","tokens":["yes","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"dinner date\" to be at 3:00.","tokens":["I","'ve","changed","\"","dinner","date","\"","to","be","at","3",":","00","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"44349c59-5a14-49ee-b087-a648ea02337c","turns":[{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Block my calendar on Tuesday and Thursday this week from 1 to 5. Subject is downtime.","tokens":["Block","my","calendar","on","Tuesday","and","Thursday","this","week","from","1","to","5",".","Subject","is","downtime","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Tuesday)) (NumberPM 1L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"super secret downtime\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 5L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :time ^Time (NumberPM :number ^Long 1L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"super secret downtime\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 5L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I'm having super secret downtime next Tuesday from 1 to 5.","tokens":["I","'m","having","super","secret","downtime","next","Tuesday","from","1","to","5","."]},"agent_utterance":{"described_entities":["entity@1302861253"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :time (NumberPM :number #(Number 1)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 5)))) :start (?= x0) :subject (?= #(String \"super secret downtime\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (?= (ClosestDayOfWeek (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (Wednesday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (ClosestDayOfWeek :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :dow ^DayOfWeek (Wednesday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you make super secret downtime be on Wednesday?","tokens":["Can","you","make","super","secret","downtime","be","on","Wednesday","?"]},"agent_utterance":{"described_entities":["entity@731582834"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (?= (ClosestDayOfWeek :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :dow #(DayOfWeek \"WEDNESDAY\"))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Looks good. Please add.","tokens":["Looks","good",".","Please","add","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"not secret open party\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"not secret open party\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Please cancel not secret open party","tokens":["Please","cancel","not","secret","open","party"]},"agent_utterance":{"described_entities":["entity@1070882678"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"not secret open party\"))))))))))"}}],"tags":{}}
{"dialogue_id":"fcc5c0f9-7efd-4ecc-a672-a4b3f3286e70","turns":[{"lispress":"(Yield (FindManager (toRecipient (CurrentUser))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Recipient) Yield :output ^Recipient (FindManager :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to know who my direct supervisor is.","tokens":["I","need","to","know","who","my","direct","supervisor","is","."]},"agent_utterance":{"described_entities":[],"original_text":"Your manager is Dan Schoffel.","tokens":["Your","manager","is","Dan","Schoffel","."]},"tags":{"original_lispress":"(Yield :output (FindManager :recipient (toRecipient (CurrentUser))))"}},{"lispress":"(Yield (Person.emailAddress (PersonFromRecipient (Execute (refer (extensionConstraint (^(Recipient) EmptyStructConstraint)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.emailAddress :obj ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What is his e-mail address?","tokens":["What","is","his","e","-","mail","address","?"]},"agent_utterance":{"described_entities":[],"original_text":"The email address of Dan Schoffel is dascho@thenextunicorn.com.","tokens":["The","email","address","of","Dan","Schoffel","is","dascho@thenextunicorn.com","."]},"tags":{"original_lispress":"(Yield :output (:emailAddress (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (Constraint[Recipient])))))))"}},{"lispress":"(Yield (CurrentUser))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Person) Yield :output ^Person (CurrentUser))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I have amnesia and I forgot my name.","tokens":["I","have","amnesia","and","I","forgot","my","name","."]},"agent_utterance":{"described_entities":[],"original_text":"You are logged in as Damon Straeter.","tokens":["You","are","logged","in","as","Damon","Straeter","."]},"tags":{"original_lispress":"(Yield :output (CurrentUser))"}},{"lispress":"(Yield (Person.phoneNumber (CurrentUser)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.phoneNumber :obj ^Person (CurrentUser)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What is my phone number?","tokens":["What","is","my","phone","number","?"]},"agent_utterance":{"described_entities":[],"original_text":"The phone number for Damon Straeter is 800-555-1234.","tokens":["The","phone","number","for","Damon","Straeter","is","800","-","555","-","1234","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (CurrentUser)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Thank you for giving me to phone number.","tokens":["Thank","you","for","giving","me","to","phone","number","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"9b91b988-f05b-4ac3-b832-8ba973425919","turns":[{"lispress":"(Yield (NextHolidayFromToday (Holiday.MLKDay)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Date) Yield :output ^Date (NextHolidayFromToday :holiday ^Holiday (Holiday.MLKDay)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what day is martin luther king day","tokens":["what","day","is","martin","luther","king","day"]},"agent_utterance":{"described_entities":[],"original_text":"M L K Day is on Monday, January 20, 2020.","tokens":["M","L","K","Day","is","on","Monday",",","January","20",",","2020","."]},"tags":{"original_lispress":"(Yield :output (NextHolidayFromToday :holiday #(Holiday \"MLKDay\")))"}}],"tags":{}}
{"dialogue_id":"4382e943-b7ab-476d-9d28-13452256197a","turns":[{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Delete all appointments for next week. I deserve a vacation!","tokens":["Delete","all","appointments","for","next","week",".","I","deserve","a","vacation","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"spa date\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Thursday)) (NumberPM 3L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ulga\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"spa date\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ulga\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Can you schedule a spa date for me and Ulga on Thursday afternoon, let's say 3pm?","tokens":["Can","you","schedule","a","spa","date","for","me","and","Ulga","on","Thursday","afternoon",",","let","'s","say","3","pm","?"]},"agent_utterance":{"described_entities":["entity@977029783"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ulga\")))))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"spa date\"))))))","do-not-train":""}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes it does","tokens":["Yes","it","does"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= (PeriodDurationBeforeDateTime (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"spa date\")))))) (PeriodDuration.apply :duration (toHours 1)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (PeriodDurationBeforeDateTime :dateTime ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"spa date\")))))) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 1)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add a hour lunch before the spa date","tokens":["Add","a","hour","lunch","before","the","spa","date"]},"agent_utterance":{"described_entities":["entity@228977920"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (PeriodDurationBeforeDateTime :dateTime (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"spa date\"))))))) :periodDuration (PeriodDuration :duration (toHours #(Number 1))))) :subject (?= #(String \"lunch\"))))))"}}],"tags":{}}
{"dialogue_id":"37a1b5f6-b197-4e14-a685-48211ea17bad","turns":[{"lispress":"(let (x0 (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Karen\")))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (& (AttendeeListHasRecipient x0) (AttendeeListHasRecipient (FindManager x0))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Karen\")))))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient x0) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient x0))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I want a meeting with Karen and her boss.","tokens":["I","want","a","meeting","with","Karen","and","her","boss","."]},"agent_utterance":{"described_entities":["entity@572246149"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Karen\")))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient x0) (AttendeeListHasRecipient :recipient (FindManager :recipient x0))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dan\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dan\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Remove Dan, We don't need him","tokens":["Remove","Dan",",","We","do","n't","need","him"]},"agent_utterance":{"described_entities":["entity@1707356852"],"original_text":"Here are some times when you and Karen are free.","tokens":["Here","are","some","times","when","you","and","Karen","are","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dan\")))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dan Schoffel\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dan Schoffel\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Add Dan Schoffel back actually.","tokens":["Add","Dan","Schoffel","back","actually","."]},"agent_utterance":{"described_entities":["entity@1372958102"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dan Schoffel\"))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (?= (Wednesday))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) ?= :reference ^DayOfWeek (Wednesday))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"wednesday please","tokens":["wednesday","please"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (?= #(DayOfWeek \"WEDNESDAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(let (x0 (PersonName.apply \"Stephanie\")) (Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) x0)) (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) x0))))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^PersonName (PersonName.apply :name ^String \"Stephanie\")) ^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name x0)) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name x0))))))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"By the way, when is my appointment with Stephanie and her boss?","tokens":["By","the","way",",","when","is","my","appointment","with","Stephanie","and","her","boss","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event with Stephanie and Dan Schoffel is on Monday the 21st at 3:00 PM.","tokens":["The","event","with","Stephanie","and","Dan","Schoffel","is","on","Monday","the","21","st","at","3",":","00","PM","."]},"tags":{"original_lispress":"(let (x0 #(PersonName \"Stephanie\")) (Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name x0)) (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name x0))))))))))))))"}}],"tags":{}}
{"dialogue_id":"7c565bc0-5434-4b09-a9f6-da71d2322d6b","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Tuesday))))) (Event.attendees_? (& (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Emelia\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Parker\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Caleb\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Rylan\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Tuesday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Emelia\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Parker\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Caleb\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Rylan\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Put a meeting on my calendar with Emelia, Parker, Caleb and Rylan on Tuesday","tokens":["Put","a","meeting","on","my","calendar","with","Emelia",",","Parker",",","Caleb","and","Rylan","on","Tuesday"]},"agent_utterance":{"described_entities":["entity@1463141613"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Emelia\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Parker\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Caleb\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Rylan\"))))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"TUESDAY\"))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The second option will work better for me.","tokens":["The","second","option","will","work","better","for","me","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.duration_? (?= (addDurations (Event.duration x0) (toHours 1))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (Event.duration :obj x0) :y ^Duration (toHours :hours ^Number 1))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Actually, I need to extend that by an hour.","tokens":["Actually",",","I","need","to","extend","that","by","an","hour","."]},"agent_utterance":{"described_entities":["entity@383447281"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :duration (?= (addDurations (:duration x0) (toHours #(Number 1)))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Works for me.","tokens":["Works","for","me","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with Emelia, Parker, Damon Straeter and 2 others\" to be for an hour and a half.","tokens":["I","'ve","changed","\"","Meeting","with","Emelia",",","Parker",",","Damon","Straeter","and","2","others","\"","to","be","for","an","hour","and","a","half","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"thanks","tokens":["thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"60847f4b-1e9c-4593-8a23-7fc559cf25c6","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"gym time\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 7L))))) (Event.duration_? (?= (toMinutes 45)))) (Event.location_? (?= (LocationKeyphrase.apply \"Bally Total Fitness\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"gym time\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 7L))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 45)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Bally Total Fitness\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Block off 45 minutes for gym time at Bally Total Fitness tomorrow evening at 7pm.","tokens":["Block","off","45","minutes","for","gym","time","at","Bally","Total","Fitness","tomorrow","evening","at","7","pm","."]},"agent_utterance":{"described_entities":["entity@1193346122"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toMinutes #(Number 45))) :location (?= #(LocationKeyphrase \"Bally Total Fitness\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 7)))) :subject (?= #(String \"gym time\"))))))","do-not-train":""}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTimeConstraint (Night) (Tomorrow))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Night) :date ^Date (Tomorrow))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"What will the weather be like tomorrow evening?","tokens":["What","will","the","weather","be","like","tomorrow","evening","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F tomorrow.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (DateTimeConstraint :constraint (Night) :date (Tomorrow))))","do-not-train":""}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^((Constraint Point)) roleConstraint (Path.apply \"place\")) (intension (AtPlace (FindPlace (LocationKeyphrase.apply \"Detroit\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Point)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Point))) (^((Constraint Point)) roleConstraint :path ^Path (Path.apply :inner ^String \"place\")) :value ^(CalflowIntension (Constraint Point)) (^((Constraint Point)) intension :extension ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Detroit\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Detroit","tokens":["Detroit"]},"agent_utterance":{"described_entities":[],"original_text":"It was clear with a high of 0.00 °F and a low of 0.00 °F on Wednesday the 16th.","tokens":["It","was","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","on","Wednesday","the","16","th","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (roleConstraint (append #(List[Path] []) #(Path \"place\"))) :value (intension (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Detroit\")))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Conference\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Wednesday)))))) (Event.location_? (?= (LocationKeyphrase.apply \"London\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Conference\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Wednesday)))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"London\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"I'm going to be in London next Wednesday for a Conference.","tokens":["I","'m","going","to","be","in","London","next","Wednesday","for","a","Conference","."]},"agent_utterance":{"described_entities":["entity@1891061840"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"London\")) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")))) :subject (?= #(String \"Conference\"))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"b30ba7ec-f22d-436d-993f-1dbc3ba79bc1","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dinner meet\")) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"reliya\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner meet\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"reliya\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"put dinner meet withreliya","tokens":["put","dinner","meet","withreliya"]},"agent_utterance":{"described_entities":["entity@2019046074"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"reliya\")))))) :subject (?= #(String \"dinner meet\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I think the first one would be preferable.","tokens":["I","think","the","first","one","would","be","preferable","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"well","tokens":["well"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Festival\")) (Event.start_? (DateTime.date_? (?= (MD 21L (Date.month (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))))))))) (Event.attendees_? (& (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Josh\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jamie\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Liz\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Parker\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Festival\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 21L :month ^Month (Date.month :obj ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))))))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Josh\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jamie\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Liz\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Parker\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you schedule a Festival with Josh, Jamie, Liz, and Parker for the 21st?","tokens":["Can","you","schedule","a","Festival","with","Josh",",","Jamie",",","Liz",",","and","Parker","for","the","21","st","?"]},"agent_utterance":{"described_entities":["entity@1211002744"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Josh\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jamie\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Liz\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Parker\"))))))) :start (Constraint[DateTime] :date (?= (MD :day #(Number 21) :month (:month (Execute :intension (refer (extensionConstraint (Constraint[Date])))))))) :subject (?= #(String \"Festival\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 8))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 8))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"It's going to last 8 hours.","tokens":["It","'s","going","to","last","8","hours","."]},"agent_utterance":{"described_entities":["entity@1357798696"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 8)))))))"}}],"tags":{}}
{"dialogue_id":"32fc4a1d-5ba4-4a6d-952c-baf195910016","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberPM 2L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"football game\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 5L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberPM :number ^Long 2L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"football game\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 5L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"create football game monday at 2-5","tokens":["create","football","game","monday","at","2","-","5"]},"agent_utterance":{"described_entities":["entity@1687436062"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberPM :number #(Number 2)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 5)))) :start (?= x0) :subject (?= #(String \"football game\")))))))","do-not-train":""}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"e56b5b93-a859-4788-93be-a471f2cf6be1","turns":[{"lispress":"(Yield (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteCommitEvent) Yield :output ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"hi, remove my event tomorrow","tokens":["hi",",","remove","my","event","tomorrow"]},"agent_utterance":{"described_entities":[],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))))))","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.id_? (negate (?= (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))) (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Is there anything else on my calendar for tomorrow?","tokens":["Is","there","anything","else","on","my","calendar","for","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events tomorrow.","tokens":["No",",","I","did","n't","find","any","events","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :id (negate (?= (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))) :nonEmptyBase (EventOnDate :date (Tomorrow) :event (Constraint[Event])))))) #(Number 0)))","do-not-train":""}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Add a new event for thursday called x-rays and then add another event for friday morning called doctors appointment located at the medical center","tokens":["Add","a","new","event","for","thursday","called","x","-","rays","and","then","add","another","event","for","friday","morning","called","doctors","appointment","located","at","the","medical","center"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}}],"tags":{}}
{"dialogue_id":"92cacf51-e1c1-44d6-9623-9753bca0bd1d","turns":[{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"rag da da","tokens":["rag","da","da"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)"}},{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"purple dogs fly","tokens":["purple","dogs","fly"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)"}},{"lispress":"(FenceGibberish)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceGibberish)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"lopapalsodplaspsa","tokens":["lopapalsodplaspsa"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I didn't understand that. Could you say it in a different way?","tokens":["I","did","n't","understand","that",".","Could","you","say","it","in","a","different","way","?"]},"tags":{"original_lispress":"(FenceGibberish)"}}],"tags":{}}
{"dialogue_id":"9fb7ad1f-d51f-415f-b99d-eda0a7262efd","turns":[{"lispress":"(let (x0 (DateTimeAndConstraintBetweenEvents (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"morning call\"))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventAtTime (^(Event) EmptyStructConstraint) (NumberPM 2L))))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"brunch\")) (Event.start_? x0)) (Event.end_? x0))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^(Constraint DateTime) (DateTimeAndConstraintBetweenEvents :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"morning call\"))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventAtTime :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (NumberPM :number ^Long 2L))))))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"brunch\")) :c2 ^(Constraint Event) (Event.start_? :obj x0)) :c2 ^(Constraint Event) (Event.end_? :obj x0))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set up a brunch between my morning call and 2pm appointment","tokens":["Set","up","a","brunch","between","my","morning","call","and","2","pm","appointment"]},"agent_utterance":{"described_entities":["entity@364877185"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(let (x0 (DateTimeAndConstraintBetweenEvents :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"morning call\")))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventAtTime :event (Constraint[Event]) :time (NumberPM :number #(Number 2)))))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end x0 :start x0 :subject (?= #(String \"brunch\")))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (FindEventWrapperWithDefaults (EventBetweenEvents (^(Event) EmptyStructConstraint) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventAtTime (^(Event) EmptyStructConstraint) (NumberPM 2L))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"dinner\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ron\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBetweenEvents :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventAtTime :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (NumberPM :number ^Long 2L))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ron\"))))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The first one is good. Is there anything between the 2PM appointment and my dinner with Ron?","tokens":["The","first","one","is","good",".","Is","there","anything","between","the","2","PM","appointment","and","my","dinner","with","Ron","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. I didn't find any events on Tuesday the 17th between 2:30 and 5:00 PM.","tokens":["I","'ve","put","that","on","your","calendar",".","I","did","n't","find","any","events","on","Tuesday","the","17","th","between","2",":","30","and","5",":","00","PM","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint))))) (Yield :output (FindEventWrapperWithDefaults :constraint (EventBetweenEvents :event (Constraint[Event]) :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventAtTime :event (Constraint[Event]) :time (NumberPM :number #(Number 2)))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ron\"))) :subject (?~= #(String \"dinner\"))))))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventBetweenEvents (^(Event) EmptyStructConstraint) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"golf lessons\"))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"homecoming parade\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBetweenEvents :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"golf lessons\"))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"homecoming parade\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have something scheduled in between golf lessons and the homecoming parade?","tokens":["Do","I","have","something","scheduled","in","between","golf","lessons","and","the","homecoming","parade","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event on Tuesday the 17th between 11:30 and 7:00 PM. It's \"dinner\" from 5:00 to 5:30 PM.","tokens":["Yes",",","I","found","one","event","on","Tuesday","the","17","th","between","11",":","30","and","7",":","00","PM",".","It","'s","\"","dinner","\"","from","5",":","00","to","5",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventBetweenEvents :event (Constraint[Event]) :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"golf lessons\")))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"homecoming parade\")))))))))) #(Number 0)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventBetweenEvents (^(Event) EmptyStructConstraint) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"breakfast\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Elli\")))))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"golf game\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBetweenEvents :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"breakfast\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Elli\")))))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"golf game\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\")))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What's between my breakfast with Elli and my golf game with Kim?","tokens":["What","'s","between","my","breakfast","with","Elli","and","my","golf","game","with","Kim","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events on Saturday the 21st between 9:30 and 11:00 AM.","tokens":["I","did","n't","find","any","events","on","Saturday","the","21","st","between","9",":","30","and","11",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventBetweenEvents :event (Constraint[Event]) :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Elli\"))) :subject (?~= #(String \"breakfast\")))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\"))) :subject (?~= #(String \"golf game\")))))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventBetweenEvents (^(Event) EmptyStructConstraint) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\"))))))) (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dinner\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventBetweenEvents :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :event1 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\"))))))) :event2 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Will I have anything next Wednesday between the meeting with Abby and dinner?","tokens":["Will","I","have","anything","next","Wednesday","between","the","meeting","with","Abby","and","dinner","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events tomorrow between 12:30 and 8:00 PM.","tokens":["No",",","I","did","n't","find","any","events","tomorrow","between","12",":","30","and","8",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventBetweenEvents :event (Constraint[Event]) :event1 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\"))))))) :event2 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dinner\")))))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"e7bbc2fd-2e7d-49d3-96b4-d55a30a2d005","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (MDY 19L (April) (Year.apply 2019L)) (NumberPM 5L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Connor\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MDY :day ^Long 19L :month ^Month (April) :year ^Year (Year.apply :value ^Long 2019L)) :time ^Time (NumberPM :number ^Long 5L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Connor\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Plan an event with Connor on April 19 at 5pm","tokens":["Plan","an","event","with","Connor","on","April","19","at","5","pm"]},"agent_utterance":{"described_entities":["entity@243497762"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Connor\")))))) :start (?= (DateAtTimeWithDefaults :date (MDY :day #(Number 19) :month #(Month \"APRIL\") :year #(Number 2019)) :time (NumberPM :number #(Number 5))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (?= (adjustByPeriodDuration (Event.end (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"Lunch date\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Grace\"))))))))) (PeriodDuration.apply :duration (toHours 1))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.end :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Lunch date\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Grace\"))))))))) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 1))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Change the time to be one hour after my Lunch date with Grace.","tokens":["Change","the","time","to","be","one","hour","after","my","Lunch","date","with","Grace","."]},"agent_utterance":{"described_entities":["entity@2030827480"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (?= (adjustByPeriodDuration (:end (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Grace\"))) :subject (?~= #(String \"Lunch date\"))))))) (PeriodDuration :duration (toHours #(Number 1)))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (NumberPM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Please change it to 1 pm","tokens":["Please","change","it","to","1","pm"]},"agent_utterance":{"described_entities":["entity@1060150645"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yea, that is right.","tokens":["Yea",",","that","is","right","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Thanks , it's very well","tokens":["Thanks",",","it","'s","very","well"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"a9b544d8-bb57-43e1-8a30-dd651577425c","turns":[{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"check out on the arrival of a shipment before leaving office","tokens":["check","out","on","the","arrival","of","a","shipment","before","leaving","office"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"check on the shipment arrival\")) (Event.start_? (?= (NextTime (NumberPM 4L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"check on the shipment arrival\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 4L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Set a reminder a 4 pm to check on the shipment arrival.","tokens":["Set","a","reminder","a","4","pm","to","check","on","the","shipment","arrival","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (NumberPM :number #(Number 4)))) :subject (?= #(String \"check on the shipment arrival\"))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"bc8fdc82-4430-43be-bf48-d610c995b738","turns":[{"lispress":"(Yield (EventAttendance :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"go to the museum\"))))) :response (ResponseStatusType.Declined)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"go to the museum\"))))) :response ^ResponseStatusType (ResponseStatusType.Declined)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I am no longer available to go to the museum today.","tokens":["I","am","no","longer","available","to","go","to","the","museum","today","."]},"agent_utterance":{"described_entities":["entity@933985502"],"original_text":"I will decline \"go to the museum\". Is that ok?","tokens":["I","will","decline","\"","go","to","the","museum","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"go to the museum\")))))) :response #(ResponseStatusType \"Declined\")))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (extensionConstraint (^(ResponseStatusType) AlwaysTrueConstraint)) (intension (ResponseStatusType.Accepted)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic ResponseStatusType) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension ResponseStatusType)) (^(ResponseStatusType) extensionConstraint :constraint ^(Constraint ResponseStatusType) (^(ResponseStatusType) AlwaysTrueConstraint)) :value ^(CalflowIntension ResponseStatusType) (^(ResponseStatusType) intension :extension ^ResponseStatusType (ResponseStatusType.Accepted)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually I can go.","tokens":["Actually","I","can","go","."]},"agent_utterance":{"described_entities":["entity@1549799126"],"original_text":"I will accept \"go to the museum\". Is that ok?","tokens":["I","will","accept","\"","go","to","the","museum","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (extensionConstraint (AlwaysTrueConstraint[ResponseStatusType])) :value (intension #(ResponseStatusType \"Accepted\")))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (extensionConstraint (^(RespondComment) AlwaysTrueConstraint)) (intension (RespondComment.apply \"I can't stay for long\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic RespondComment) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension RespondComment)) (^(RespondComment) extensionConstraint :constraint ^(Constraint RespondComment) (^(RespondComment) AlwaysTrueConstraint)) :value ^(CalflowIntension RespondComment) (^(RespondComment) intension :extension ^RespondComment (RespondComment.apply :inner ^String \"I can't stay for long\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yeah, go to the museum, but also send a message saying that I can't stay for long.","tokens":["Yeah",",","go","to","the","museum",",","but","also","send","a","message","saying","that","I","ca","n't","stay","for","long","."]},"agent_utterance":{"described_entities":["entity@884215115"],"original_text":"I will accept \"go to the museum\" and send a response to the organizer with the following comment: \"I can't stay for long\". Is that ok?","tokens":["I","will","accept","\"","go","to","the","museum","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","I","ca","n't","stay","for","long","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (extensionConstraint (AlwaysTrueConstraint[RespondComment])) :value (intension #(RespondComment \"I can't stay for long\")))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (extensionConstraint (^(RespondComment) AlwaysTrueConstraint)) (intension (RespondComment.apply \"I can't stay for long, but I can stay longer if it's possible to reschedule\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic RespondComment) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension RespondComment)) (^(RespondComment) extensionConstraint :constraint ^(Constraint RespondComment) (^(RespondComment) AlwaysTrueConstraint)) :value ^(CalflowIntension RespondComment) (^(RespondComment) intension :extension ^RespondComment (RespondComment.apply :inner ^String \"I can't stay for long, but I can stay longer if it's possible to reschedule\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Actually, amend that message to say that I can't stay for long, but I can stay longer if it's possible to reschedule.","tokens":["Actually",",","amend","that","message","to","say","that","I","ca","n't","stay","for","long",",","but","I","can","stay","longer","if","it","'s","possible","to","reschedule","."]},"agent_utterance":{"described_entities":["entity@632125056"],"original_text":"I will accept \"go to the museum\" and send a response to the organizer with the following comment: \"I can't stay for long, but I can stay longer if it's possible to reschedule\". Is that ok?","tokens":["I","will","accept","\"","go","to","the","museum","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","I","ca","n't","stay","for","long",",","but","I","can","stay","longer","if","it","'s","possible","to","reschedule","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (extensionConstraint (AlwaysTrueConstraint[RespondComment])) :value (intension #(RespondComment \"I can't stay for long, but I can stay longer if it's possible to reschedule\")))))"}}],"tags":{}}
{"dialogue_id":"d4948b81-7a5c-46de-a484-5c39af96c18b","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRangeDateTime (^(Event) EmptyStructConstraint) (AroundDateTime (DateAtTimeWithDefaults (Today) (NumberPM 8L))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRangeDateTime :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint DateTime) (AroundDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 8L))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have anything at around 8 tonight?","tokens":["Do","I","have","anything","at","around","8","tonight","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event between today at 7:00 PM and today at 9:00. It's \"Free your mind\" from 9:00 to 9:30.","tokens":["Yes",",","I","found","one","event","between","today","at","7",":","00","PM","and","today","at","9",":","00",".","It","'s","\"","Free","your","mind","\"","from","9",":","00","to","9",":","30","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRangeDateTime :event (Constraint[Event]) :range (AroundDateTime :dateTime (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 8)))))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (AroundDateTime (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (AroundDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you make me an event next monday at around 4","tokens":["Can","you","make","me","an","event","next","monday","at","around","4"]},"agent_utterance":{"described_entities":["entity@143286817"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (AroundDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberPM :number #(Number 4))))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRangeDateTime (^(Event) EmptyStructConstraint) (AroundDateTime (DateAtTimeWithDefaults (NextDOW (Saturday)) (Noon))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRangeDateTime :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint DateTime) (AroundDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (Noon))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes, schedule the second one/. Now delete that one thing I had around noon Saturday","tokens":["Yes",",","schedule","the","second","one/.","Now","delete","that","one","thing","I","had","around","noon","Saturday"]},"agent_utterance":{"described_entities":["entity@18832257"],"original_text":"I've put that on your calendar. __BREAK Is this what you want me to cancel?","tokens":["I","'ve","put","that","on","your","calendar",".","Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint))))) (Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRangeDateTime :event (Constraint[Event]) :range (AroundDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (Noon))))))))))))"}}],"tags":{}}
{"dialogue_id":"099ced3d-ce1f-4114-aa47-488cff521feb","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"football game\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Friday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"football game\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Friday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"create football game for friday","tokens":["create","football","game","for","friday"]},"agent_utterance":{"described_entities":["entity@779859808"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"FRIDAY\")))) :subject (?= #(String \"football game\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (LateAfternoon))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (LateAfternoon))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make it for the late afternoon","tokens":["Make","it","for","the","late","afternoon"]},"agent_utterance":{"described_entities":["entity@1718646086"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (LateAfternoon))))))"}}],"tags":{}}
{"dialogue_id":"3d1315ae-5fd7-44db-beb1-a7f20c0f0400","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (HourMinutePm 4L 30L)))) (Event.location_? (?= (LocationKeyphrase.apply \"Hermann Park\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (HourMinutePm :hours ^Long 4L :minutes ^Long 30L)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Hermann Park\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set up a meeting for 4:30 this Saturday at Hermann Park.","tokens":["Set","up","a","meeting","for","4",":","30","this","Saturday","at","Hermann","Park","."]},"agent_utterance":{"described_entities":["entity@1041900479"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Hermann Park\")) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (HourMinutePm :hours #(Number 4) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes schedule that please","tokens":["Yes","schedule","that","please"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (WillRain (WeatherForEvent (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherForEvent :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Will there be any rain during then?","tokens":["Will","there","be","any","rain","during","then","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% for \"Appointment\" on Saturday from 4:30 to 5:00.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","for","\"","Appointment","\"","on","Saturday","from","4",":","30","to","5",":","00","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherForEvent :event (Execute :intension (refer (extensionConstraint (Constraint[Event])))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Alright, good to know then","tokens":["Alright",",","good","to","know","then"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I've got a concert with a friend at the Crystal Ballroom in Portland.","tokens":["I","'ve","got","a","concert","with","a","friend","at","the","Crystal","Ballroom","in","Portland","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}}],"tags":{}}
{"dialogue_id":"e7492e5b-808a-45f1-a341-4c51d92e86fd","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"abby\")))) (EventAtTime (^(Event) EmptyStructConstraint) (NumberPM 2L))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"abby\")))) :c2 ^(Constraint Event) (EventAtTime :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (NumberPM :number ^Long 2L))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you cancel my meeting with Abby this afternoon at 2 pm?","tokens":["Can","you","cancel","my","meeting","with","Abby","this","afternoon","at","2","pm","?"]},"agent_utterance":{"described_entities":["entity@725534852"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"abby\"))) :nonEmptyBase (EventAtTime :event (Constraint[Event]) :time (NumberPM :number #(Number 2)))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventOnDateWithTimeRange (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) (Afternoon)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Afternoon)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Sorry it is tomorrow afternoon.","tokens":["Sorry","it","is","tomorrow","afternoon","."]},"agent_utterance":{"described_entities":["entity@1200837870"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventOnDateWithTimeRange :event (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :timeRange (Afternoon)))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes, please cancel this.","tokens":["Yes",",","please","cancel","this","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Allen\")))) (EventOnDate (NextDOW (Friday)) (Event.subject_? (?~= \"cookie bake sale\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Allen\")))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"cookie bake sale\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I need to cancel the cookie bake sale with Allen on Friday.","tokens":["I","need","to","cancel","the","cookie","bake","sale","with","Allen","on","Friday","."]},"agent_utterance":{"described_entities":["entity@1403897940"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Allen\"))) :nonEmptyBase (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :subject (?~= #(String \"cookie bake sale\"))))))))))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^(Recipient) ConstraintTypeIntension) (intension (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Aaron\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Recipient)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Recipient))) (^(Recipient) ConstraintTypeIntension) :value ^(CalflowIntension (Constraint Recipient)) (^((Constraint Recipient)) intension :extension ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Aaron\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Sorry I meant with Aaron.","tokens":["Sorry","I","meant","with","Aaron","."]},"agent_utterance":{"described_entities":["entity@1126347216"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (Constraint[Constraint[Recipient]]) :value (intension (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Aaron\"))))))"}}],"tags":{}}
{"dialogue_id":"6b1fb11e-94c1-4dc9-b052-0e52b4dbbc8e","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (NextTime (NumberPM 1L)) (^(Event) EmptyStructConstraint)))))) (EventRescheduled (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 1L)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (EventRescheduled :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please reschedule my 1 o'clock appointment","tokens":["Please","reschedule","my","1","o'clock","appointment"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events today at 1:00 PM.","tokens":["I","did","n't","find","any","events","today","at","1",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (NextTime :time (NumberPM :number #(Number 1))) :event (Constraint[Event])))))) :update (EventRescheduled :event (Constraint[Event])))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you change my appointment?","tokens":["Can","you","change","my","appointment","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}}],"tags":{}}
{"dialogue_id":"2b730418-3f5b-403e-a1d9-f41edecba01f","turns":[{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"charity car wash\")))))) (ResponseStatusType.None)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"charity car wash\")))))) :response ^ResponseStatusType (ResponseStatusType.None)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Who has not responded to the charity car wash event?","tokens":["Who","has","not","responded","to","the","charity","car","wash","event","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have not responded to \"charity car wash\": you, Jake Cobb, and Jennifer Watts.","tokens":["Here","is","the","list","of","attendees","who","have","not","responded","to","\"","charity","car","wash","\"",":","you",",","Jake","Cobb",",","and","Jennifer","Watts","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"charity car wash\"))))))) :response #(ResponseStatusType \"None\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"kickoff\")))))) (ResponseStatusType.None)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"kickoff\")))))) :response ^ResponseStatusType (ResponseStatusType.None)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"which people did not respond to the kickoff invite?","tokens":["which","people","did","not","respond","to","the","kickoff","invite","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have not responded to \"kickoff\": you and Elli Parker.","tokens":["Here","is","the","list","of","attendees","who","have","not","responded","to","\"","kickoff","\"",":","you","and","Elli","Parker","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"kickoff\"))))))) :response #(ResponseStatusType \"None\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"monthly work meetup\")))))) (ResponseStatusType.None)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"monthly work meetup\")))))) :response ^ResponseStatusType (ResponseStatusType.None)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Of all the individuals invited to the monthly work meetup, who has not responded to the invite?","tokens":["Of","all","the","individuals","invited","to","the","monthly","work","meetup",",","who","has","not","responded","to","the","invite","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have not responded to \"monthly work meetup\": you, Jake, and Abby Gonano.","tokens":["Here","is","the","list","of","attendees","who","have","not","responded","to","\"","monthly","work","meetup","\"",":","you",",","Jake",",","and","Abby","Gonano","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"monthly work meetup\"))))))) :response #(ResponseStatusType \"None\")))"}}],"tags":{}}
{"dialogue_id":"31856dc3-23e3-4dc8-b935-aa4f2606298d","turns":[{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"no thanks","tokens":["no","thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What events do I have for tomorrow","tokens":["What","events","do","I","have","for","tomorrow"]},"agent_utterance":{"described_entities":[],"original_text":"Here's what I found:","tokens":["Here","'s","what","I","found",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Let's cancel that please.","tokens":["Let","'s","cancel","that","please","."]},"agent_utterance":{"described_entities":["entity@802379620"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"yes thats the one","tokens":["yes","that","s","the","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (NextDOW (Tuesday)) (^(Event) EmptyStructConstraint)) (Morning))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Morning))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Good, look up any morning meetings next Tuesday.","tokens":["Good",",","look","up","any","morning","meetings","next","Tuesday","."]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events on Tuesday the 7th in the morning.","tokens":["I","did","n't","find","any","events","on","Tuesday","the","7","th","in","the","morning","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event])) :timeRange (Morning))))"}}],"tags":{}}
{"dialogue_id":"2dd2f62a-7e8b-4db1-a208-4923f57239f9","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Thursday)) (Event.subject_? (?~= \"mt Dr.'s Appointment\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"mt Dr.'s Appointment\"))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What time is mt Dr.'s Appointment on Thursday","tokens":["What","time","is","mt","Dr.","'s","Appointment","on","Thursday"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"mt Dr.'s Appointment\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","mt","Dr.","'s","Appointment","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :event (Constraint[Event] :subject (?~= #(String \"mt Dr.'s Appointment\")))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kristen Clifford\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kristen Clifford\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make a lunch with Kristen Clifford","tokens":["Make","a","lunch","with","Kristen","Clifford"]},"agent_utterance":{"described_entities":["entity@1469512337"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kristen Clifford\")))))) :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (?= (MD 17L (May))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 17L :month ^Month (May))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"May 17 works best","tokens":["May","17","works","best"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 17) :month #(Month \"MAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"co workers party\")) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barack Obama\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"co workers party\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barack Obama\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Make a co workers party with Barack Obama","tokens":["Make","a","co","workers","party","with","Barack","Obama"]},"agent_utterance":{"described_entities":["entity@1659652359"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barack Obama\")))))) :subject (?= #(String \"co workers party\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (?= (MD 16L (May))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 16L :month ^Month (May))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"May 16 works best","tokens":["May","16","works","best"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 16) :month #(Month \"MAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"I need a date available for a birthday party with Wade Blakeley","tokens":["I","need","a","date","available","for","a","birthday","party","with","Wade","Blakeley"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Fine arts\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Tuesday)))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Wade Blakeley\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Fine arts\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Tuesday)))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Wade Blakeley\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Put Fine arts with Wade Blakeley on Tuesday","tokens":["Put","Fine","arts","with","Wade","Blakeley","on","Tuesday"]},"agent_utterance":{"described_entities":["entity@376281544"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Wade Blakeley\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"TUESDAY\")))) :subject (?= #(String \"Fine arts\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":7,"user_utterance":{"original_text":"May21 works best","tokens":["May21","works","best"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar on Tuesday the 21st from 1:00 to 1:30 PM.","tokens":["I","'ve","put","that","on","your","calendar","on","Tuesday","the","21","st","from","1",":","00","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Monday))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Cher Roydon\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Monday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Cher Roydon\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":8,"user_utterance":{"original_text":"Cher Roydon has a date with me can you put it on the calendar for Monday","tokens":["Cher","Roydon","has","a","date","with","me","can","you","put","it","on","the","calendar","for","Monday"]},"agent_utterance":{"described_entities":["entity@1531142108"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Cher Roydon\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"MONDAY\"))))))))","do-not-train":""}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (?= (MD 20L (May))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 20L :month ^Month (May))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":9,"user_utterance":{"original_text":"MAy 20 works best","tokens":["MAy","20","works","best"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 20.0) :month #(Month \"MAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"73b91f13-83f9-4fe0-9c13-638c3c8bd82e","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"carla\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"carla\")))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What time is my appointment with carla?","tokens":["What","time","is","my","appointment","with","carla","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event with carla is on September 9th at 3:00 PM.","tokens":["The","event","with","carla","is","on","September","9","th","at","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"carla\")))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (& (Event.start_? (DateTime.time_? (?= (NumberPM 4L)))) (Event.end_? (DateTime.time_? (?= (HourMinutePm 4L 30L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 4L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 4L :minutes ^Long 30L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"change the meeting 4.00 pm - 4.30 pm","tokens":["change","the","meeting","4",".","00","pm","-","4",".","30","pm"]},"agent_utterance":{"described_entities":["entity@1680975097"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 4) :minutes #(Number 30.0)))) :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes it looks right, thanks!","tokens":["Yes","it","looks","right",",","thanks","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with carla and Damon Straeter\" to be at 4:00.","tokens":["I","'ve","changed","\"","Meeting","with","carla","and","Damon","Straeter","\"","to","be","at","4",":","00","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(FenceRecurring)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceRecurring)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you make this meeting repeat every week?","tokens":["Can","you","make","this","meeting","repeat","every","week","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I am not able to process recurring events right now.","tokens":["I","am","not","able","to","process","recurring","events","right","now","."]},"tags":{"original_lispress":"(FenceRecurring)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"What events do I have tomorrow","tokens":["What","events","do","I","have","tomorrow"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events on your calendar tomorrow.","tokens":["I","did","n't","find","any","events","on","your","calendar","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))"}}],"tags":{}}
{"dialogue_id":"566b8036-db28-456e-a15f-a284e1127671","turns":[{"lispress":"(Yield (Event.start (FindNumNextEvent (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Katie\")))) (NextWeekList)) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Katie\")))) :range ^(Constraint Date) (NextWeekList)) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my next meeting with Katie next week? Please search.","tokens":["When","is","my","next","meeting","with","Katie","next","week","?","Please","search","."]},"agent_utterance":{"described_entities":[],"original_text":"The first event with Katie next week is on Monday the 21st at 9:00 AM.","tokens":["The","first","event","with","Katie","next","week","is","on","Monday","the","21","st","at","9",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Katie\")))) :range (NextWeekList)) :number #(Number 1))))"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Erica\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Erica\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"When am I meeting next with Erica?","tokens":["When","am","I","meeting","next","with","Erica","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Erica is on November 10th at 2:00 PM.","tokens":["The","next","event","with","Erica","is","on","November","10","th","at","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Erica\")))) :number #(Number 1))))"}},{"lispress":"(Yield (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ingrid\")))) 1L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ingrid\")))) :number ^Long 1L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What is my next thing with Ingrid?","tokens":["What","is","my","next","thing","with","Ingrid","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Ingrid is \"Controversy Topics\" on Tuesday the 22nd from 1:00 to 2:00 PM.","tokens":["The","next","event","with","Ingrid","is","\"","Controversy","Topics","\"","on","Tuesday","the","22","nd","from","1",":","00","to","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ingrid\")))) :number #(Number 1)))"}},{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Larry\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Larry\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"When is the first time I am meeting with Larry?","tokens":["When","is","the","first","time","I","am","meeting","with","Larry","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Larry is on November 2nd at 11:00 AM.","tokens":["The","next","event","with","Larry","is","on","November","2","nd","at","11",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Larry\")))) :number #(Number 1))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"thanks!","tokens":["thanks","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"bb43c3d8-6113-43b2-a193-75b4252d80c1","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch meeting\")) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Perter\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch meeting\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Perter\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set up a lunch meeting with Perter","tokens":["Set","up","a","lunch","meeting","with","Perter"]},"agent_utterance":{"described_entities":["entity@1312215440"],"original_text":"Here are some times when you and Perter are free.","tokens":["Here","are","some","times","when","you","and","Perter","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Perter\")))))) :subject (?= #(String \"lunch meeting\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"The second one will work fine.","tokens":["The","second","one","will","work","fine","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (& (Event.subject_? (?= \"discuss the new cosmetics line\")) (Event.start_? (?= (DateAtTimeWithDefaults (nextDayOfMonth (Today) 15L) (NumberAM 11L))))) (Event.duration_? (?= (toHours 3)))) (Event.location_? (?= (LocationKeyphrase.apply \"Walmart\")))) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kylie\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jennifer\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"discuss the new cosmetics line\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 15L) :time ^Time (NumberAM :number ^Long 11L))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 3)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Walmart\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kylie\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jennifer\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Block off three hours starting at 11 am on the 15th with Kylie and Jennifer to discuss the new cosmetics line at Walmart.","tokens":["Block","off","three","hours","starting","at","11","am","on","the","15","th","with","Kylie","and","Jennifer","to","discuss","the","new","cosmetics","line","at","Walmart","."]},"agent_utterance":{"described_entities":["entity@168200100"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kylie\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jennifer\"))))))) :duration (?= (toHours #(Number 3))) :location (?= #(LocationKeyphrase \"Walmart\")) :start (?= (DateAtTimeWithDefaults :date (nextDayOfMonth (Today) #(Number 15)) :time (NumberAM :number #(Number 11)))) :subject (?= #(String \"discuss the new cosmetics line\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes that works, can't wait","tokens":["Yes","that","works",",","ca","n't","wait"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))) x1 (Event.end x0)) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateAfterTime (DateTime.date x1) (& (Event.id_? (negate (?= (Event.id x0)))) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kylie\"))))) (DateTime.time x1))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))) x1 ^DateTime (Event.end :obj x0)) ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (DateTime.date :obj x1) :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj x0)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kylie\"))))) :time ^Time (DateTime.time :obj x1))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have anything else with Kylie after that?","tokens":["Do","I","have","anything","else","with","Kylie","after","that","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any other events with Kylie after 2:00 PM.","tokens":["No",",","I","did","n't","find","any","other","events","with","Kylie","after","2",":","00","PM","."]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event])))) x1 (:end x0)) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (:date x1) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kylie\"))) :id (negate (?= (:id x0)))) :time (:time x1))))) #(Number 0))))"}}],"tags":{}}
{"dialogue_id":"87007848-e8bc-45d7-a277-248d7700ee11","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"coffee\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 10L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Josh\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"coffee\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 10L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Josh\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add coffee with Josh for tomorrow at 10am.","tokens":["Add","coffee","with","Josh","for","tomorrow","at","10","am","."]},"agent_utterance":{"described_entities":["entity@522469583"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Josh\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 10.0)))) :subject (?= #(String \"coffee\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberAM 10L)))) (Event.end_? (DateTime.time_? (?= (NumberAM 11L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 10L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 11L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"make it from 10 til 11","tokens":["make","it","from","10","til","11"]},"agent_utterance":{"described_entities":["entity@342148380"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberAM :number #(Number 11)))) :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 10.0))))))))"}},{"lispress":"(let (x0 (Execute (^(Dynamic) ConfirmAndReturnAction))) (do (Yield x0) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= (Event.end (^(Dynamic) item x0))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) ^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output x0) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Event.end :obj ^Event (^(Dynamic) item :t x0))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Great also schedule my lunch after this","tokens":["Great","also","schedule","my","lunch","after","this"]},"agent_utterance":{"described_entities":["entity@1749660257"],"original_text":"I've put that on your calendar. __BREAK Is this what you're looking for?","tokens":["I","'ve","put","that","on","your","calendar",".","Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (ConfirmAndReturnAction))) (do (Yield :output x0) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (:end (:item x0))) :subject (?= #(String \"lunch\"))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= (Event.end (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberAM 11L)) (Event.subject_? (?~= \"coffee\")))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Event.end :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberAM :number ^Long 11L)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"coffee\")))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I need to schedule lunch after coffee on Saturday at 11:00 am.","tokens":["I","need","to","schedule","lunch","after","coffee","on","Saturday","at","11",":","00","am","."]},"agent_utterance":{"described_entities":["entity@1497303890"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (:end (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberAM :number #(Number 11))) :event (Constraint[Event] :subject (?~= #(String \"coffee\"))))))))) :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberAM 11L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberAM :number ^Long 11L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Schedule Lunch on Saturday at 11:00 am.","tokens":["Schedule","Lunch","on","Saturday","at","11",":","00","am","."]},"agent_utterance":{"described_entities":["entity@1051554042"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberAM :number #(Number 11)))) :subject (?= #(String \"Lunch\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"yup","tokens":["yup"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"cf36c929-4573-4fa3-a7f1-a4e13bafbe5c","turns":[{"lispress":"(GenericPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (GenericPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you with your calendar.","tokens":["I","can","help","you","with","your","calendar","."]},"tags":{"original_lispress":"(GenericPleasantry)"}},{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes,change time to calendar","tokens":["yes",",","change","time","to","calendar"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"OK CREATE A FILE AND NAME IT AS PERSONAL EVENTS","tokens":["OK","CREATE","A","FILE","AND","NAME","IT","AS","PERSONAL","EVENTS"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"OK","tokens":["OK"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tara\")))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (& (AttendeeListHasRecipient x0) (AttendeeListHasRecipient (FindManager x0))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tara\")))))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient x0) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient x0))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I need to schedule a meeting with Tara and her manager.","tokens":["I","need","to","schedule","a","meeting","with","Tara","and","her","manager","."]},"agent_utterance":{"described_entities":["entity@1411564242"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tara\")))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient x0) (AttendeeListHasRecipient :recipient (FindManager :recipient x0))))))))"}}],"tags":{}}
{"dialogue_id":"06eb72e5-8b51-4987-b6b3-7283c284e4c2","turns":[{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to meet with Patricia Conners sometime next week. Give me Wednesday at 2 PM if my calendar is clear for that time.","tokens":["I","need","to","meet","with","Patricia","Conners","sometime","next","week",".","Give","me","Wednesday","at","2","PM","if","my","calendar","is","clear","for","that","time","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"You got it","tokens":["You","got","it"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"John\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"John\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Add John to that meeting as well please","tokens":["Add","John","to","that","meeting","as","well","please"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"There aren't any mentioned events.","tokens":["There","are","n't","any","mentioned","events","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"John\"))))))))))","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Perfect.","tokens":["Perfect","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"f568f7d0-01d8-4a26-82b3-543d2c7e751d","turns":[{"lispress":"(Yield (Place.phoneNumber (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Pablanos in Evans\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Place.phoneNumber :obj ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Pablanos in Evans\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What do I call to reach Pablanos in Evans?","tokens":["What","do","I","call","to","reach","Pablanos","in","Evans","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's (555) 555-5555.","tokens":["It","'s","(","555",")","555","-","5555","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Pablanos in Evans\"))))))"}},{"lispress":"(Yield (Place.phoneNumber (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Greene Inn in LA\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Place.phoneNumber :obj ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Greene Inn in LA\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I want to get in touch with the Greene Inn in LA. What is their number?","tokens":["I","want","to","get","in","touch","with","the","Greene","Inn","in","LA",".","What","is","their","number","?"]},"agent_utterance":{"described_entities":["entity@2065812090"],"original_text":"I can't find a phone number for Los Angeles.","tokens":["I","ca","n't","find","a","phone","number","for","Los","Angeles","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Greene Inn in LA\"))))))"}},{"lispress":"(Yield (Place.phoneNumber (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Queen Street Cafe & Grill in Hawaii\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Place.phoneNumber :obj ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Queen Street Cafe & Grill in Hawaii\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you get me the phone number for Queen Street Cafe & Grill in Hawaii?","tokens":["Can","you","get","me","the","phone","number","for","Queen","Street","Cafe","&","Grill","in","Hawaii","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's (555) 555-5555.","tokens":["It","'s","(","555",")","555","-","5555","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Queen Street Cafe & Grill in Hawaii\"))))))"}}],"tags":{}}
{"dialogue_id":"4bdd318a-4c0e-4f43-b03e-ca41950c6601","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayOnDate (Event.subject_? (?= \"car show\")) (NextDOW (Wednesday))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"car show\")) :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"the car show will be all day on wednesday","tokens":["the","car","show","will","be","all","day","on","wednesday"]},"agent_utterance":{"described_entities":["entity@1163278002"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayOnDate :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :event (Constraint[Event] :subject (?= #(String \"car show\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That's great","tokens":["That","'s","great"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"great","tokens":["great"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayOnDate (Event.subject_? (?= \"eat dinner\")) (NextDOW (Monday))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"eat dinner\")) :date ^Date (NextDOW :dow ^DayOfWeek (Monday))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I have do eat dinner all day on monday","tokens":["I","have","do","eat","dinner","all","day","on","monday"]},"agent_utterance":{"described_entities":["entity@740874637"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event] :subject (?= #(String \"eat dinner\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (?= (ClosestDayOfWeek (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (Tuesday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (ClosestDayOfWeek :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :dow ^DayOfWeek (Tuesday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"change it to tuesday","tokens":["change","it","to","tuesday"]},"agent_utterance":{"described_entities":["entity@215685236"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (?= (ClosestDayOfWeek :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :dow #(DayOfWeek \"TUESDAY\"))))))))"}}],"tags":{}}
{"dialogue_id":"00d97d61-b2a5-4a1b-b407-24a071149a1e","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What events do I have scheduled for today?","tokens":["What","events","do","I","have","scheduled","for","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here's your agenda for today:","tokens":["Here","'s","your","agenda","for","today",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event]))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (?= (DateAtTimeWithDefaults (ClosestDayOfWeek (DateTime.date (Event.start (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Friday)) (DateTime.time (Event.start (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :dow ^DayOfWeek (Friday)) :time ^Time (DateTime.time :obj ^DateTime (Event.start :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Reschedule that for friday, same time","tokens":["Reschedule","that","for","friday",",","same","time"]},"agent_utterance":{"described_entities":["entity@972638109"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (ClosestDayOfWeek :date (:date (:start (Execute :intension (refer (extensionConstraint (Constraint[Event])))))) :dow #(DayOfWeek \"FRIDAY\")) :time (:time (:start (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jimmy\")))))))) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (HourMinutePm 2L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jimmy\")))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (HourMinutePm :hours ^Long 2L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Change the meeting with Jimmy to 2:30 pm on Friday.","tokens":["Change","the","meeting","with","Jimmy","to","2",":","30","pm","on","Friday","."]},"agent_utterance":{"described_entities":["entity@1286979139"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jimmy\")))))))) :update (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (HourMinutePm :hours #(Number 2) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"cbccffce-0ad0-47f8-a565-94341c11644b","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (Today) (NumberPM 6L)) (Event.subject_? (?~= \"family dinner\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 6L)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"family dinner\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Delete event for family dinner at 6pm today.","tokens":["Delete","event","for","family","dinner","at","6","pm","today","."]},"agent_utterance":{"described_entities":["entity@719906260"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 6))) :event (Constraint[Event] :subject (?~= #(String \"family dinner\")))))))))))","do-not-train":""}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Janet\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Janet\")))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"When is my meeting with Janet?","tokens":["When","is","my","meeting","with","Janet","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events with Janet.","tokens":["I","did","n't","find","any","events","with","Janet","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Janet\")))))))))","do-not-train":""}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Janet\")))))))) (Yield (FindEventWrapperWithDefaults (EventOnDateAfterTime (DateTime.date (Event.start x0)) (^(Event) EmptyStructConstraint) (DateTime.time (Event.end x0))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Janet\")))))))) ^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (DateTime.time :obj ^DateTime (Event.end :obj x0))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What do I have scheduled after my meeting with Janet?","tokens":["What","do","I","have","scheduled","after","my","meeting","with","Janet","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events with Janet.","tokens":["I","did","n't","find","any","events","with","Janet","."]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Janet\")))))))) (Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (:date (:start x0)) :event (Constraint[Event]) :time (:time (:end x0))))))"}}],"tags":{}}
{"dialogue_id":"5e5abe82-6a40-4b26-9c90-32ae1759233e","turns":[{"lispress":"(Yield (Event.start (FindLastEvent (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindLastEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my last meeting tomorrow?","tokens":["When","is","my","last","meeting","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"The last event tomorrow is at 3:00 PM.","tokens":["The","last","event","tomorrow","is","at","3",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindLastEvent :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event])))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.end_? (DateTime.time_? (?= (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"change the end time as 4 PM","tokens":["change","the","end","time","as","4","PM"]},"agent_utterance":{"described_entities":["entity@638844780"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Good","tokens":["Good"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Appointment\" to be.","tokens":["I","'ve","changed","\"","Appointment","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.subject_? (?= \"apointemnt\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"apointemnt\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"make a new time for apointemnt","tokens":["make","a","new","time","for","apointemnt"]},"agent_utterance":{"described_entities":["entity@912562783"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :subject (?= #(String \"apointemnt\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"fix the second one","tokens":["fix","the","second","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"811dc88d-0d79-4566-be40-9b8a2b6e9472","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"baskball game\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Tuesday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"baskball game\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Tuesday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make an event to the baskball game on Tuesday","tokens":["Make","an","event","to","the","baskball","game","on","Tuesday"]},"agent_utterance":{"described_entities":["entity@363510206"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"TUESDAY\")))) :subject (?= #(String \"baskball game\"))))))"}}],"tags":{}}
{"dialogue_id":"b9384245-8957-45f7-a00b-752520e68024","turns":[{"lispress":"(Yield (EventAttendance (RespondComment.apply \"i won't be able to make it\") :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"dinner\")) (EventOnDateWithTimeRange (EventOnDate (Today) (^(Event) EmptyStructConstraint)) (Night)))))) :response (ResponseStatusType.Declined) :sendResponse (RespondShouldSend.apply true)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :comment ^RespondComment (RespondComment.apply :inner ^String \"i won't be able to make it\") :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Night)))))) :response ^ResponseStatusType (ResponseStatusType.Declined) :sendResponse ^RespondShouldSend (RespondShouldSend.apply :inner ^Boolean true)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"decline my invitation to tonight's dinner, and say \"i won't be able to make it\"","tokens":["decline","my","invitation","to","tonight","'s","dinner",",","and","say","\"","i","wo","n't","be","able","to","make","it","\""]},"agent_utterance":{"described_entities":["entity@1725102067"],"original_text":"I will decline \"Dinner with El Diablo\" and send a response to the organizer with the following comment: \"i won't be able to make it\". Is that ok?","tokens":["I","will","decline","\"","Dinner","with","El","Diablo","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","i","wo","n't","be","able","to","make","it","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :comment #(RespondComment \"i won't be able to make it\") :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :nonEmptyBase (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event])) :timeRange (Night)) :subject (?~= #(String \"dinner\")))))) :response #(ResponseStatusType \"Declined\") :sendResponse #(RespondShouldSend true)))","do-not-train":""}},{"lispress":"(Yield (EventAttendance (RespondComment.apply \"I will accept all terms.\") :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"johnson proposal\"))))) :response (ResponseStatusType.Accepted) :sendResponse (RespondShouldSend.apply true)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :comment ^RespondComment (RespondComment.apply :inner ^String \"I will accept all terms.\") :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"johnson proposal\"))))) :response ^ResponseStatusType (ResponseStatusType.Accepted) :sendResponse ^RespondShouldSend (RespondShouldSend.apply :inner ^Boolean true)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Accept the johnson proposal and tell them I will accept all terms.","tokens":["Accept","the","johnson","proposal","and","tell","them","I","will","accept","all","terms","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I will accept \"Johnson Proposal\" and send a response to the organizer with the following comment: \"I will accept all terms.\". Is that ok?","tokens":["I","will","accept","\"","Johnson","Proposal","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","I","will","accept","all","terms",".","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :comment #(RespondComment \"I will accept all terms.\") :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"johnson proposal\")))))) :response #(ResponseStatusType \"Accepted\") :sendResponse #(RespondShouldSend true)))","do-not-train":""}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes, perfect!","tokens":["Yes",",","perfect","!"]},"agent_utterance":{"described_entities":[],"original_text":"I will accept \"Johnson Proposal\" and send a response to the organizer with the following comment: \"I will accept all terms.\". Is that ok?","tokens":["I","will","accept","\"","Johnson","Proposal","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","I","will","accept","all","terms",".","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (EventAttendance (RespondComment.apply \"I am sick\") :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dinner\"))))) :response (ResponseStatusType.Declined) :sendResponse (RespondShouldSend.apply true)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :comment ^RespondComment (RespondComment.apply :inner ^String \"I am sick\") :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\"))))) :response ^ResponseStatusType (ResponseStatusType.Declined) :sendResponse ^RespondShouldSend (RespondShouldSend.apply :inner ^Boolean true)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Okay, decline the invitation to dinner, and send a message that I am sick.","tokens":["Okay",",","decline","the","invitation","to","dinner",",","and","send","a","message","that","I","am","sick","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I will decline \"Dinner\" and send a response to the organizer with the following comment: \"I am sick\". Is that ok?","tokens":["I","will","decline","\"","Dinner","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","I","am","sick","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :comment #(RespondComment \"I am sick\") :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dinner\")))))) :response #(ResponseStatusType \"Declined\") :sendResponse #(RespondShouldSend true)))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"5f21cf0e-2606-4411-9e92-aec341ac08d2","turns":[{"lispress":"(FenceRecurring)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceRecurring)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule a meeting with the Supervisors every 12 days for the next two months at 3:50 pm.","tokens":["Schedule","a","meeting","with","the","Supervisors","every","12","days","for","the","next","two","months","at","3",":","50","pm","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can't schedule recurring events right now.","tokens":["I","ca","n't","schedule","recurring","events","right","now","."]},"tags":{"original_lispress":"(FenceRecurring)"}}],"tags":{}}
{"dialogue_id":"8c5ae807-50ac-4765-ba3e-5e6f046e30d6","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)) (Morning))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Morning))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is scheduled for tomorrow morning","tokens":["What","is","scheduled","for","tomorrow","morning"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events tomorrow morning.","tokens":["I","did","n't","find","any","events","tomorrow","morning","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :timeRange (Morning))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"trip to Jamaica\")) (FullMonthofMonth (January)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"trip to Jamaica\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (January)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is my trip to Jamaica in January?","tokens":["Is","my","trip","to","Jamaica","in","January","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event matching \"trip to Jamaica\" in January. It's from January 15, 2020 to January 21, 2020.","tokens":["Yes",",","I","found","one","event","matching","\"","trip","to","Jamaica","\"","in","January",".","It","'s","from","January","15",",","2020","to","January","21",",","2020","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"trip to Jamaica\"))) :range (FullMonthofMonth :month #(Month \"JANUARY\")))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Monday)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Steve\")))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Steve\")))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do you know if I have anything with Steve next monday?","tokens":["Do","you","know","if","I","have","anything","with","Steve","next","monday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event with Steve on Monday the 28th. It's a \"Meeting with Steve and Damon Straeter\" from 11:00 to 11:30 AM.","tokens":["Yes",",","I","found","one","event","with","Steve","on","Monday","the","28","th",".","It","'s","a","\"","Meeting","with","Steve","and","Damon","Straeter","\"","from","11",":","00","to","11",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Steve\")))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (& (Event.subject_? (?~= \"lunch\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Mary\"))))) (NextWeekList))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Mary\"))))) :range ^(Constraint Date) (NextWeekList))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Do I have lunch scheduled with Mary next week?","tokens":["Do","I","have","lunch","scheduled","with","Mary","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"lunch\" with Mary next week.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","lunch","\"","with","Mary","next","week","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Mary\"))) :subject (?~= #(String \"lunch\"))) :range (NextWeekList))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (& (Event.subject_? (?~= \"lunch\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Mary\"))))) (WeekOfDateNew (adjustByPeriod (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (toWeeks 1))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Mary\"))))) :range ^(Constraint Date) (WeekOfDateNew :date ^Date (adjustByPeriod :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :period ^Period (toWeeks :weeks ^Number 1))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have lunch scheduled with Mary the following week?","tokens":["Do","I","have","lunch","scheduled","with","Mary","the","following","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"lunch\" with Mary between November 3rd and November 9th.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","lunch","\"","with","Mary","between","November","3","rd","and","November","9","th","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Mary\"))) :subject (?~= #(String \"lunch\"))) :range (WeekOfDateNew :date (adjustByPeriod (Execute :intension (refer (extensionConstraint (Constraint[Date])))) (toWeeks #(Number 1)))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"f7ba66be-d23b-40df-96fa-9bc554e2beb9","turns":[{"lispress":"(Yield (WillRain (WeatherForEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"Musical\")) (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherForEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Musical\")) :c2 ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Is it going to rain tomorrow at my Musical","tokens":["Is","it","going","to","rain","tomorrow","at","my","Musical"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% for \"Musical\" tomorrow from 5:00 to 5:30 PM.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","for","\"","Musical","\"","tomorrow","from","5",":","00","to","5",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherForEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :nonEmptyBase (EventOnDate :date (Tomorrow) :event (Constraint[Event])) :subject (?~= #(String \"Musical\")))))))))"}},{"lispress":"(Yield (WeatherForEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"marathon\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherForEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"marathon\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What is the weather going to be like for the marathon on saturday?","tokens":["What","is","the","weather","going","to","be","like","for","the","marathon","on","saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a temperature of 0.00 °F for \"Marathon\" on Saturday from 10:00 to 10:30 AM.","tokens":["It","will","be","clear","with","a","temperature","of","0",".","00","°","F","for","\"","Marathon","\"","on","Saturday","from","10",":","00","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (WeatherForEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"marathon\")))))))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (rainPrecipProbability) (WeatherForEvent (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"walk\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dimensionless) Yield :output ^Dimensionless (^(Dimensionless) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Dimensionless) (rainPrecipProbability) :table ^WeatherTable (WeatherForEvent :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"walk\")))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What is the chance of rain on Saturday during walk.","tokens":["What","is","the","chance","of","rain","on","Saturday","during","walk","."]},"agent_utterance":{"described_entities":[],"original_text":"The chance of rain will be 0.00% for \"Walk\" on Saturday from 4:00 to 4:30 PM.","tokens":["The","chance","of","rain","will","be","0",".","00","%","for","\"","Walk","\"","on","Saturday","from","4",":","00","to","4",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"rainPrecipProbability\") :quantifier #(WeatherQuantifier \"Summarize\") :table (WeatherForEvent :event (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"walk\"))))))))))"}}],"tags":{}}
{"dialogue_id":"7e8707ca-8066-49d1-a148-234deffafc69","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alexandra\")))) (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alexandra\")))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I know I have some meetings with Alexandra tomorrow. Can you tell me when and where those meetings are?","tokens":["I","know","I","have","some","meetings","with","Alexandra","tomorrow",".","Can","you","tell","me","when","and","where","those","meetings","are","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 3 events with Alexandra tomorrow.","tokens":["I","found","3","events","with","Alexandra","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alexandra\"))) :nonEmptyBase (EventOnDate :date (Tomorrow) :event (Constraint[Event])))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^(Recipient) ConstraintTypeIntension) (intension (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jesse\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Recipient)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Recipient))) (^(Recipient) ConstraintTypeIntension) :value ^(CalflowIntension (Constraint Recipient)) (^((Constraint Recipient)) intension :extension ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jesse\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I meant Jesse","tokens":["I","meant","Jesse"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event with Jesse tomorrow. It's \"Eat Shower Scum\" from 9:00 to 9:30 AM.","tokens":["I","found","one","event","with","Jesse","tomorrow",".","It","'s","\"","Eat","Shower","Scum","\"","from","9",":","00","to","9",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (Constraint[Constraint[Recipient]]) :value (intension (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jesse\"))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.id_? (negate (?= (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jesse\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jesse\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What else do I have with Jesse?","tokens":["What","else","do","I","have","with","Jesse","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any other events with Jesse.","tokens":["I","did","n't","find","any","other","events","with","Jesse","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jesse\"))) :id (negate (?= (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^(Recipient) ConstraintTypeIntension) (intension (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sarah\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint Recipient)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint Recipient))) (^(Recipient) ConstraintTypeIntension) :value ^(CalflowIntension (Constraint Recipient)) (^((Constraint Recipient)) intension :extension ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sarah\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"And what about Sarah?","tokens":["And","what","about","Sarah","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one other event with Sarah. It's \"Meeting with Sarah and Damon Straeter\" on Tuesday the 10th from 9:00 to 9:30 AM.","tokens":["I","found","one","other","event","with","Sarah",".","It","'s","\"","Meeting","with","Sarah","and","Damon","Straeter","\"","on","Tuesday","the","10","th","from","9",":","00","to","9",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (Constraint[Constraint[Recipient]]) :value (intension (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sarah\"))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.id_? (negate (?= (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sarah\")))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sarah\")))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have anything else with Sarah at all?","tokens":["Do","I","have","anything","else","with","Sarah","at","all","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any other events with Sarah.","tokens":["No",",","I","did","n't","find","any","other","events","with","Sarah","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sarah\"))) :id (negate (?= (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"68d3abfb-16ec-4c15-a8fd-e4f7c498c0e8","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"baseball game\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Tuesday)) (NumberPM 5L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"baseball game\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :time ^Time (NumberPM :number ^Long 5L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"create baseball game on tuesday at 5","tokens":["create","baseball","game","on","tuesday","at","5"]},"agent_utterance":{"described_entities":["entity@974569111"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :time (NumberPM :number #(Number 5)))) :subject (?= #(String \"baseball game\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yep the baseball game is right.","tokens":["yep","the","baseball","game","is","right","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"baseball game\")))))) (Event.end_? (DateTime.time_? (?= (NumberPM 7L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"baseball game\")))))) :update ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 7L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Have baseball game end at 7 PM.","tokens":["Have","baseball","game","end","at","7","PM","."]},"agent_utterance":{"described_entities":["entity@250607147"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"baseball game\"))))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 7))))))))"}},{"lispress":"(let (x0 (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (Event.subject_? (?~= \"baseball game\")))))))) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateAfterTime (DateTime.date x0) (EventOnDate (NextDOW (Tuesday)) (^(Event) EmptyStructConstraint)) (DateTime.time x0))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"baseball game\")))))))) ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (DateTime.date :obj x0) :event ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :time ^Time (DateTime.time :obj x0))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Is the baseball game the last thing on my schedule on Tuesday?","tokens":["Is","the","baseball","game","the","last","thing","on","my","schedule","on","Tuesday","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events matching \"baseball game\" on August 6th.","tokens":["I","did","n't","find","any","events","matching","\"","baseball","game","\"","on","August","6","th","."]},"tags":{"original_lispress":"(let (x0 (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event] :subject (?~= #(String \"baseball game\"))))))))) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (:date x0) :event (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event])) :time (:time x0))))) #(Number 0))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Unwind with Margaritas\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (EndOfWorkDay))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Unwind with Margaritas\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (EndOfWorkDay))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"At the end of the day on Friday, schedule Unwind with Margaritas.","tokens":["At","the","end","of","the","day","on","Friday",",","schedule","Unwind","with","Margaritas","."]},"agent_utterance":{"described_entities":["entity@1830579286"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (EndOfWorkDay))) :subject (?= #(String \"Unwind with Margaritas\"))))))"}}],"tags":{}}
{"dialogue_id":"09c803ca-bee0-4f36-8fb7-9741ac617f79","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"tomorrow appointment cancel immediately","tokens":["tomorrow","appointment","cancel","immediately"]},"agent_utterance":{"described_entities":["entity@1531210363"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event])))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes please","tokens":["yes","please"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event tomorrow.","tokens":["I","'ve","deleted","your","event","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"thank you kindly","tokens":["thank","you","kindly"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"thanks that is all for now","tokens":["thanks","that","is","all","for","now"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"9eb49f5c-452e-4c73-a42c-4be0d2700745","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"concert\")) (FullMonthofMonth (Date.month (Today)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"concert\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (Date.month :obj ^Date (Today)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Delete concert event for this month.","tokens":["Delete","concert","event","for","this","month","."]},"agent_utterance":{"described_entities":["entity@1846107039"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"concert\"))) :range (FullMonthofMonth :month (:month (Today)))))))))))"}}],"tags":{}}
{"dialogue_id":"0251a8dd-db61-4999-a110-fe696fa37ace","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Thursday))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Janice\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Thursday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Janice\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please set up a meeting with Janice next Thursday","tokens":["Please","set","up","a","meeting","with","Janice","next","Thursday"]},"agent_utterance":{"described_entities":["entity@769997649"],"original_text":"Here are some times when you and Janice Kang are free.","tokens":["Here","are","some","times","when","you","and","Janice","Kang","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Janice\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"THURSDAY\"))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"no","tokens":["no"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (NumberPM 3L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 3L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you make it at 3pm","tokens":["Can","you","make","it","at","3","pm"]},"agent_utterance":{"described_entities":["entity@1823617559"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (ConfirmCreateAndReturnAction (Event.start_? (DateTime.date_? (?= (MD 20L (June))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (^(CreateEventResponse) Execute :intension ^(CalflowIntension CreateEventResponse) (ConfirmCreateAndReturnAction :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 20L :month ^Month (June))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"ok,that jun 20 is ok to me","tokens":["ok",",","that","jun","20","is","ok","to","me"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmCreateAndReturnAction :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 20.0) :month #(Month \"JUNE\"))))))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"do you fix appointment in another day","tokens":["do","you","fix","appointment","in","another","day"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"fed24fc2-76eb-4491-abcf-00422b19e66f","turns":[{"lispress":"(FenceRecurring)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceRecurring)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"check mails every day in the office","tokens":["check","mails","every","day","in","the","office"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I am not able to process recurring events right now.","tokens":["I","am","not","able","to","process","recurring","events","right","now","."]},"tags":{"original_lispress":"(FenceRecurring)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 4L)))) (Event.showAs_? (?= (ShowAsStatus.Busy)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 4L)))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.Busy)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you set my status to busy today at 4 pm?","tokens":["Can","you","set","my","status","to","busy","today","at","4","pm","?"]},"agent_utterance":{"described_entities":["entity@714339567"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :showAs (?= #(ShowAsStatus \"Busy\")) :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 4))))))))"}}],"tags":{}}
{"dialogue_id":"21ea1e70-f665-4641-b922-22a248e93a85","turns":[{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what the change made in it.","tokens":["what","the","change","made","in","it","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Today) (^(Event) EmptyStructConstraint)) (Evening))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Evening))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What is on my schedule this evening?","tokens":["What","is","on","my","schedule","this","evening","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event this evening. It was \"dinner\" today from 5:30 to 6:00 PM.","tokens":["I","found","one","event","this","evening",".","It","was","\"","dinner","\"","today","from","5",":","30","to","6",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event])) :timeRange (Evening))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"movie\")) (Event.start_? (?= (NextTime (HourMinutePm 6L 30L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"movie\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (HourMinutePm :hours ^Long 6L :minutes ^Long 30L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"great add a movie event at 6:30","tokens":["great","add","a","movie","event","at","6",":","30"]},"agent_utterance":{"described_entities":["entity@1171694875"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (NextTime :time (HourMinutePm :hours #(Number 6) :minutes #(Number 30.0)))) :subject (?= #(String \"movie\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (HourMinutePm 6L 30L)))) (Event.end_? (DateTime.time_? (?= (HourMinutePm 8L 30L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 6L :minutes ^Long 30L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 8L :minutes ^Long 30L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"make it 6:30 - 8:30 pm","tokens":["make","it","6",":","30","-","8",":","30","pm"]},"agent_utterance":{"described_entities":["entity@123199673"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 8) :minutes #(Number 30.0)))) :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 6) :minutes #(Number 30.0))))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tom\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tom\")))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"looks good, what time is Tom coming in tomorrow for the meeting?","tokens":["looks","good",",","what","time","is","Tom","coming","in","tomorrow","for","the","meeting","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. The event Tom tomorrow is tomorrow at 12:00.","tokens":["I","'ve","put","that","on","your","calendar",".","The","event","Tom","tomorrow","is","tomorrow","at","12",":","00","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tom\")))))))))))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tom\")))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tom\")))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"And what time is the meeting with Tom?","tokens":["And","what","time","is","the","meeting","with","Tom","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event with Tom is at 12:00 PM.","tokens":["The","event","with","Tom","is","at","12",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tom\")))))))))"}}],"tags":{}}
{"dialogue_id":"aa28780b-fe85-4f9c-bc4b-b6ec1e7b9b3d","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Let's make a schedule for 4 today.","tokens":["Let","'s","make","a","schedule","for","4","today","."]},"agent_utterance":{"described_entities":["entity@215166228"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 2))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Running late. Push it off to 2 hours later.","tokens":["Running","late",".","Push","it","off","to","2","hours","later","."]},"agent_utterance":{"described_entities":["entity@1227533518"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 2)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?= \"dinner with Sanders\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner with Sanders\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Good. Name it dinner with Sanders.","tokens":["Good",".","Name","it","dinner","with","Sanders","."]},"agent_utterance":{"described_entities":["entity@1760389318"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :subject (?= #(String \"dinner with Sanders\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"dinner with scouts is exactly what I was looking for","tokens":["dinner","with","scouts","is","exactly","what","I","was","looking","for"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Good. Now add lunch with Rick and the boys tomorrow.","tokens":["Good",".","Now","add","lunch","with","Rick","and","the","boys","tomorrow","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book. Please use a full name and try again.","tokens":["I","can","only","look","up","names","in","your","address","book",".","Please","use","a","full","name","and","try","again","."]},"tags":{"original_lispress":"(FenceAttendee)"}}],"tags":{}}
{"dialogue_id":"af0b6b8b-d13d-46c1-9a93-5d18a3ab6a52","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateFromTimeToTime (NextDOW (Friday)) (^(Event) EmptyStructConstraint) (NumberPM 2L) (NumberPM 5L))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateFromTimeToTime :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time1 ^Time (NumberPM :number ^Long 2L) :time2 ^Time (NumberPM :number ^Long 5L))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you find any meetings scheduled between 2 and 5 pm next Friday?","tokens":["Can","you","find","any","meetings","scheduled","between","2","and","5","pm","next","Friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event on Friday the 19th between 2:00 and 5:00 PM. It's \"Planning meeting\" from 3:00 to 3:30 PM.","tokens":["I","found","one","event","on","Friday","the","19","th","between","2",":","00","and","5",":","00","PM",".","It","'s","\"","Planning","meeting","\"","from","3",":","00","to","3",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateFromTimeToTime :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event]) :time1 (NumberPM :number #(Number 2)) :time2 (NumberPM :number #(Number 5)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"team meeting\")) (Event.start_? (?= (adjustByPeriodDuration (Event.end (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (PeriodDuration.apply :duration (toHours 1)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"team meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.end :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 1)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Book a team meeting one hour after our planning meeting on Friday.","tokens":["Book","a","team","meeting","one","hour","after","our","planning","meeting","on","Friday","."]},"agent_utterance":{"described_entities":["entity@1914534291"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (adjustByPeriodDuration (:end (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (PeriodDuration :duration (toHours #(Number 1))))) :subject (?= #(String \"team meeting\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I think so","tokens":["I","think","so"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Marketing Planning meeting\")) (Event.start_? (?= (Event.end (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"product mock up meeting\"))))))))) (Event.end_? (?= (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"team meeting\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Marketing Planning meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Event.end :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"product mock up meeting\"))))))))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"team meeting\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Create Marketing Planning meeting before team meeting but after the product mock up meeting.","tokens":["Create","Marketing","Planning","meeting","before","team","meeting","but","after","the","product","mock","up","meeting","."]},"agent_utterance":{"described_entities":["entity@937962658"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"team meeting\")))))))) :start (?= (:end (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"product mock up meeting\")))))))) :subject (?= #(String \"Marketing Planning meeting\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Correct.","tokens":["Correct","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"d8a9d343-b585-4f5e-8e3d-b336ee0c5345","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"filmmaking workshop\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Saturday)) (NumberAM 11L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"filmmaking workshop\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :time ^Time (NumberAM :number ^Long 11L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi there, can you add a filmmaking workshop on this Saturday at 11 am?","tokens":["Hi","there",",","can","you","add","a","filmmaking","workshop","on","this","Saturday","at","11","am","?"]},"agent_utterance":{"described_entities":["entity@181621086"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :time (NumberAM :number #(Number 11)))) :subject (?= #(String \"filmmaking workshop\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, but it will last for an hour","tokens":["Yes",",","but","it","will","last","for","an","hour"]},"agent_utterance":{"described_entities":["entity@181762548"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 1)))))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Change the Meeting Time of Filmmaking.","tokens":["Change","the","Meeting","Time","of","Filmmaking","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventAtTime (Event.subject_? (?~= \"filmmaking workshop\")) (NumberPM 12L)))))) (Event.start_? (DateTime.time_? (?= (NumberPM 2L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventAtTime :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"filmmaking workshop\")) :time ^Time (NumberPM :number ^Long 12L)))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 2L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"i want to change the time for the meeting filmmaking workshop from 12pm to 2 pm","tokens":["i","want","to","change","the","time","for","the","meeting","filmmaking","workshop","from","12","pm","to","2","pm"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"filmmaking workshop\" on your calendar at 12:00 PM.","tokens":["I","did","n't","find","any","events","named","\"","filmmaking","workshop","\"","on","your","calendar","at","12",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventAtTime :event (Constraint[Event] :subject (?~= #(String \"filmmaking workshop\"))) :time (NumberPM :number #(Number 12))))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 2))))))))"}}],"tags":{}}
{"dialogue_id":"a8560d3a-022f-4cb9-a0b7-3dbb12f7ad21","turns":[{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Allen\")))) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Allen\")))) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi, can you help me figure out when I'm next meeting with Allen?","tokens":["Hi",",","can","you","help","me","figure","out","when","I","'m","next","meeting","with","Allen","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Allen is tomorrow at 5:00 PM.","tokens":["The","next","event","with","Allen","is","tomorrow","at","5",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Allen\")))) :number #(Number 1))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"thanks for allocated for my schedule","tokens":["thanks","for","allocated","for","my","schedule"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Mark\")))) 1L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Mark\")))) :number ^Long 1L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes, can you tell me when my next meeting with Mark is scheduled?","tokens":["Yes",",","can","you","tell","me","when","my","next","meeting","with","Mark","is","scheduled","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event with Mark is \"Meeting with Mark and Megan Bowen\" on Saturday from 5:00 to 7:00 PM.","tokens":["The","next","event","with","Mark","is","\"","Meeting","with","Mark","and","Megan","Bowen","\"","on","Saturday","from","5",":","00","to","7",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Mark\")))) :number #(Number 1)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"mark\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"mark\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Cancel my meeting with mark","tokens":["Cancel","my","meeting","with","mark"]},"agent_utterance":{"described_entities":["entity@1854196968"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"mark\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event mark.","tokens":["I","'ve","deleted","your","event","mark","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"534a3b0a-8048-4fe0-b99c-08a6c1b9b1d5","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"reading time\")) (Event.start_? (DateTimeConstraint (Night) (Today)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"reading time\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Night) :date ^Date (Today)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"create reading time tonight","tokens":["create","reading","time","tonight"]},"agent_utterance":{"described_entities":["entity@1339246953"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Night) :date (Today)) :subject (?= #(String \"reading time\"))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"reading time\")) (Event.start_? (DateTimeConstraint (Night) (Today)))) (Event.duration_? (?= (toHours 1)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"reading time\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Night) :date ^Date (Today)))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"create 1 hour reading time tonight","tokens":["create","1","hour","reading","time","tonight"]},"agent_utterance":{"described_entities":["entity@1666900791"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 1))) :start (DateTimeConstraint :constraint (Night) :date (Today)) :subject (?= #(String \"reading time\"))))))","do-not-train":""}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberPM 7L)))) (Event.end_? (DateTime.time_? (?= (NumberPM 8L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 7L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 8L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"between 7:00 pm and 8:00 pm","tokens":["between","7",":","00","pm","and","8",":","00","pm"]},"agent_utterance":{"described_entities":["entity@1048649078"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 8)))) :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 7))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":4,"user_utterance":{"original_text":"thank you","tokens":["thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":5,"user_utterance":{"original_text":"no thank you","tokens":["no","thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"4a5639eb-d493-495e-903b-bcc858cd2e2c","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Do I have any meetings today?","tokens":["Do","I","have","any","meetings","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events for the rest of today.","tokens":["No",",","I","did","n't","find","any","events","for","the","rest","of","today","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event]))))) #(Number 0)))","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Do I have any events at all on my calendar today?","tokens":["Do","I","have","any","events","at","all","on","my","calendar","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events for the rest of today.","tokens":["No",",","I","did","n't","find","any","events","for","the","rest","of","today","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event]))))) #(Number 0)))","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Do I have any tomorrow?","tokens":["Do","I","have","any","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event tomorrow. It's \"meeting\" from 3:00 to 5:00 PM.","tokens":["Yes",",","I","found","one","event","tomorrow",".","It","'s","\"","meeting","\"","from","3",":","00","to","5",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event]))))) #(Number 0)))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"88bc95ed-179c-4dbf-8b9b-a8f5a37a667a","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Billboard meeting\")))))) (Event.attendees_? (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Terry\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Billboard meeting\")))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Terry\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Univite Terry from Billboard meeting","tokens":["Univite","Terry","from","Billboard","meeting"]},"agent_utterance":{"described_entities":["entity@905867191"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Billboard meeting\"))))))) :update (Constraint[Event] :attendees (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Terry\")))))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (FindNumNextEvent (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"billings\")))) 1L)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"billings\")))) :number ^Long 1L)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"cancel the next meeting with billings","tokens":["cancel","the","next","meeting","with","billings"]},"agent_utterance":{"described_entities":["entity@1780933760"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (FindNumNextEvent :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"billings\")))) :number #(Number 1))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"billings\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"billings\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"No. Disinvite billings since he can't come.","tokens":["No",".","Disinvite","billings","since","he","ca","n't","come","."]},"agent_utterance":{"described_entities":["entity@927549449"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"billings\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"ok thank you","tokens":["ok","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with billings and Megan Bowen\" to be without billings.","tokens":["I","'ve","changed","\"","Meeting","with","billings","and","Megan","Bowen","\"","to","be","without","billings","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint))))) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (HourMinuteAm 9L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (HourMinuteAm :hours ^Long 9L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you schedule the meeting tomorrow 9:30 AM also.","tokens":["Can","you","schedule","the","meeting","tomorrow","9",":","30","AM","also","."]},"agent_utterance":{"described_entities":["entity@638104847"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event]))))) :update (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (HourMinuteAm :hours #(Number 9) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"4fc25ed2-2899-4588-985a-27f93e07ed63","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dr. Smith\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dr. Smith\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please add an appointment with Dr. Smith to my caldendar","tokens":["Please","add","an","appointment","with","Dr.","Smith","to","my","caldendar"]},"agent_utterance":{"described_entities":["entity@711118770"],"original_text":"Here are some times when you and Dr. Smith are free in the next five days.","tokens":["Here","are","some","times","when","you","and","Dr.","Smith","are","free","in","the","next","five","days","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dr. Smith\"))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent (BottomResult) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long (BottomResult) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"the bottom one","tokens":["the","bottom","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index (BottomResult) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(let (x0 (Event.end (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateAfterTime (DateTime.date x0) (^(Event) EmptyStructConstraint) (DateTime.time x0))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (Event.end :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (DateTime.date :obj x0) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (DateTime.time :obj x0))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Great, now do I have anything scheduled after that on the same day?","tokens":["Great",",","now","do","I","have","anything","scheduled","after","that","on","the","same","day","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events on Monday the 25th after 10:30 AM.","tokens":["No",",","I","did","n't","find","any","events","on","Monday","the","25","th","after","10",":","30","AM","."]},"tags":{"original_lispress":"(let (x0 (:end (Execute :intension (refer (extensionConstraint (Constraint[Event])))))) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (:date x0) :event (Constraint[Event]) :time (:time x0))))) #(Number 0))))"}}],"tags":{}}
{"dialogue_id":"cad61fad-0630-42f9-a4cb-2e0a0223c438","turns":[{"lispress":"(let (x0 (MD 15L (NextMonth)) x1 (DateAtTimeWithDefaults x0 (NumberPM 3L))) (do (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Monday)) (Event.subject_? (?~= \"doctor's appointment\"))))))) (Event.start_? (?= (DateAtTimeWithDefaults x0 (NumberPM 2L))))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"pick up Katie\")) (Event.start_? (?= x1))) (Event.end_? (?= (TimeAfterDateTime x1 (NumberPM 4L))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (MD :day ^Long 15L :month ^Month (NextMonth)) x1 ^DateTime (DateAtTimeWithDefaults :date x0 :time ^Time (NumberPM :number ^Long 3L))) ^Unit (^(Unit Unit) do :arg1 ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctor's appointment\"))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date x0 :time ^Time (NumberPM :number ^Long 2L))))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"pick up Katie\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x1))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x1 :time ^Time (NumberPM :number ^Long 4L))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Cancel my doctor's appointment next Monday and reschedule it for next month on the 15th at 2pm and then schedule me to pick up Katie afterwards from 3-4pm","tokens":["Cancel","my","doctor","'s","appointment","next","Monday","and","reschedule","it","for","next","month","on","the","15","th","at","2","pm","and","then","schedule","me","to","pick","up","Katie","afterwards","from","3","-","4","pm"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed your doctor's appointment to March 15th at 2:00 PM. I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","changed","your","doctor","'s","appointment","to","March","15","th","at","2",":","00","PM",".","I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(let (x0 (MD :day #(Number 15) :month (NextMonth)) x1 (DateAtTimeWithDefaults :date x0 :time (NumberPM :number #(Number 3)))) (do (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event] :subject (?~= #(String \"doctor's appointment\")))))))) :update (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date x0 :time (NumberPM :number #(Number 2)))))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x1 :time (NumberPM :number #(Number 4)))) :start (?= x1) :subject (?= #(String \"pick up Katie\"))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"ee49131a-dd6f-4ef2-af9f-e9e26bc8d47b","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (NextTime (NumberPM 6L)) (^(Event) EmptyStructConstraint)))))) (Event.duration_? (?= (toHours 3))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 6L)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 3))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"make my 6pm last for 3 hours","tokens":["make","my","6","pm","last","for","3","hours"]},"agent_utterance":{"described_entities":["entity@1226091027"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (NextTime :time (NumberPM :number #(Number 6))) :event (Constraint[Event])))))) :update (Constraint[Event] :duration (?= (toHours #(Number 3)))))))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"dinner\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sophi\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sophi\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"When is my dinner with Sophi?","tokens":["When","is","my","dinner","with","Sophi","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event \"dinner\" with Sophi is on November 4th at 7:00 PM.","tokens":["The","event","\"","dinner","\"","with","Sophi","is","on","November","4","th","at","7",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sophi\"))) :subject (?~= #(String \"dinner\"))))))))"}},{"lispress":"(Yield (Event.duration (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Duration) Yield :output ^Duration (Event.duration :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"How long will it last?","tokens":["How","long","will","it","last","?"]},"agent_utterance":{"described_entities":[],"original_text":"The \"dinner\" is for a half hour.","tokens":["The","\"","dinner","\"","is","for","a","half","hour","."]},"tags":{"original_lispress":"(Yield :output (:duration (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?~= \"lunch\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What about my lunch?","tokens":["What","about","my","lunch","?"]},"agent_utterance":{"described_entities":[],"original_text":"The \"Lunch\" is for 2 hours.","tokens":["The","\"","Lunch","\"","is","for","2","hours","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :subject (?~= #(String \"lunch\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"lunch\")))))) (& (Event.start_? (DateTime.time_? (?= (NumberPM 12L)))) (Event.end_? (DateTime.time_? (?= (NumberPM 2L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")))))) :update ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 12L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 2L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"change the time for lunch at 12.00 pm - 2.00 pm","tokens":["change","the","time","for","lunch","at","12",".","00","pm","-","2",".","00","pm"]},"agent_utterance":{"described_entities":["entity@435962778"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"lunch\"))))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 2)))) :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 12))))))))"}}],"tags":{}}
{"dialogue_id":"609a25ac-8696-4c76-830b-f0930e54a207","turns":[{"lispress":"(Yield (FindNumNextEvent (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeek)) 2L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeek)) :number ^Long 2L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"what my 2 event this week","tokens":["what","my","2","event","this","week"]},"agent_utterance":{"described_entities":[],"original_text":"The 2nd this week is \"Office Meeting\" on Saturday from 5:00 to 5:30 PM.","tokens":["The","2","nd","this","week","is","\"","Office","Meeting","\"","on","Saturday","from","5",":","00","to","5",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindNumNextEvent :constraint (EventDuringRange :event (Constraint[Event]) :range (ThisWeek)) :number #(Number 2)))"}},{"lispress":"(Yield (Event.location (FindNumNextEvent (EventOnDate (MDY 29L (February) (Year.apply 2020L)) (^(Event) EmptyStructConstraint)) 2L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (MDY :day ^Long 29L :month ^Month (February) :year ^Year (Year.apply :value ^Long 2020L)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :number ^Long 2L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Where did my second Event happen on February 29 2020?","tokens":["Where","did","my","second","Event","happen","on","February","29","2020","?"]},"agent_utterance":{"described_entities":[],"original_text":"The 2nd event on February 29th was located at Yahooo.","tokens":["The","2","nd","event","on","February","29","th","was","located","at","Yahooo","."]},"tags":{"original_lispress":"(Yield :output (:location (FindNumNextEvent :constraint (EventOnDate :date (MDY :day #(Number 29) :month #(Month \"FEBRUARY\") :year #(Number 2020.0)) :event (Constraint[Event])) :number #(Number 2))))"}},{"lispress":"(Yield (Event.location (FindNumNextEvent (EventOnDate (NextDOW (Tuesday)) (^(Event) EmptyStructConstraint)) 2L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :number ^Long 2L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"where is my second event on tuesday?","tokens":["where","is","my","second","event","on","tuesday","?"]},"agent_utterance":{"described_entities":[],"original_text":"The 2nd event on Tuesday the 10th is located at Get Buff Gym.","tokens":["The","2","nd","event","on","Tuesday","the","10","th","is","located","at","Get","Buff","Gym","."]},"tags":{"original_lispress":"(Yield :output (:location (FindNumNextEvent :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event])) :number #(Number 2))))"}}],"tags":{}}
{"dialogue_id":"6dc3fa77-8ac3-47ec-8ba2-87ab3b2d88bf","turns":[{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Going camping at Yosemite for 2 days starting on Saturday.","tokens":["Going","camping","at","Yosemite","for","2","days","starting","on","Saturday","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"c4e1df26-477b-401b-9926-d6ebe816ed9f","turns":[{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Today) (Event.subject_? (?~= \"dinner\"))) (Night)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\"))) :timeRange ^(Constraint Time) (Night)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Tell me the restaurant I am having dinner at tonight","tokens":["Tell","me","the","restaurant","I","am","having","dinner","at","tonight"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"dinner\" tonight is located at Restaurant R'evolution.","tokens":["The","event","matching","\"","dinner","\"","tonight","is","located","at","Restaurant","R'evolution","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event] :subject (?~= #(String \"dinner\")))) :timeRange (Night)))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"DO they have a bar there?","tokens":["DO","they","have","a","bar","there","?"]},"agent_utterance":{"described_entities":["entity@1431336952"],"original_text":"I'm unable to find whether Restaurant R'evolution has a full bar. You'll have to contact them.","tokens":["I","'m","unable","to","find","whether","Restaurant","R'evolution","has","a","full","bar",".","You","'ll","have","to","contact","them","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.GoodforGroups) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.GoodforGroups) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can the restaurant seat large parties?","tokens":["Can","the","restaurant","seat","large","parties","?"]},"agent_utterance":{"described_entities":["entity@1431336952"],"original_text":"I'm unable to find whether Restaurant R'evolution is good for groups. You'll have to contact them.","tokens":["I","'m","unable","to","find","whether","Restaurant","R'evolution","is","good","for","groups",".","You","'ll","have","to","contact","them","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"GoodforGroups\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.Casual) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Brussels\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.Casual) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Brussels\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Is the dress code casual for Brussels?","tokens":["Is","the","dress","code","casual","for","Brussels","?"]},"agent_utterance":{"described_entities":["entity@1062296814"],"original_text":"I'm unable to find whether Brussels is casual. You'll have to contact them.","tokens":["I","'m","unable","to","find","whether","Brussels","is","casual",".","You","'ll","have","to","contact","them","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"Casual\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Brussels\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.OutdoorDining) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.OutdoorDining) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Is there a place outside to sit and eat?","tokens":["Is","there","a","place","outside","to","sit","and","eat","?"]},"agent_utterance":{"described_entities":["entity@1062296814"],"original_text":"I'm unable to find whether Brussels has outdoor dining. You'll have to contact them.","tokens":["I","'m","unable","to","find","whether","Brussels","has","outdoor","dining",".","You","'ll","have","to","contact","them","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"OutdoorDining\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}}],"tags":{}}
{"dialogue_id":"e489d5ea-8eab-4080-9cdb-9668dc772746","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Sunday)) (Event.subject_? (?~= \"soccer\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"soccer\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"get rid of soccer event on Sunday","tokens":["get","rid","of","soccer","event","on","Sunday"]},"agent_utterance":{"described_entities":["entity@1641358006"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :event (Constraint[Event] :subject (?~= #(String \"soccer\")))))))))))"}}],"tags":{}}
{"dialogue_id":"baff736c-6f31-4275-9dec-d27cbeec8abf","turns":[{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have enough time after my staff meeting to run and get a coffee?","tokens":["Do","I","have","enough","time","after","my","staff","meeting","to","run","and","get","a","coffee","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"93003449-918d-4cf8-b6dd-297d439ad5d9","turns":[{"lispress":"(Yield (Now))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Now))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I'd like to know this moment's time","tokens":["I","'d","like","to","know","this","moment","'s","time"]},"agent_utterance":{"described_entities":[],"original_text":"The time is currently 12:57 PM.","tokens":["The","time","is","currently","12",":","57","PM","."]},"tags":{"original_lispress":"(Yield :output (Now))"}}],"tags":{}}
{"dialogue_id":"3865dd3f-243d-4221-a64f-106153dddae0","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Will you be able to delete the date I setup with my girlfriend?","tokens":["Will","you","be","able","to","delete","the","date","I","setup","with","my","girlfriend","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}}],"tags":{}}
{"dialogue_id":"66ae3dca-1e46-4c0b-80f9-3e2f3ee35195","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 10L)))) (Event.duration_? (?= (toHours 1)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 10L)))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I have a meeting tomorrow morning at 10 am, it will last an hour","tokens":["I","have","a","meeting","tomorrow","morning","at","10","am",",","it","will","last","an","hour"]},"agent_utterance":{"described_entities":["entity@376070198"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 1))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 10.0))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"No","tokens":["No"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.location_? (roomRequest)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (roomRequest)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you add that it will be in the conference room please","tokens":["Can","you","add","that","it","will","be","in","the","conference","room","please"]},"agent_utterance":{"described_entities":["entity@1721146502"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :location (roomRequest)))))"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I see that, thank y ou. What does 04:00 mean?","tokens":["I","see","that",",","thank","y","ou",".","What","does","04",":","00","mean","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 7L))))) (Event.location_? (?= (LocationKeyphrase.apply \"Red Robin's\")))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Joyce\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 7L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Red Robin's\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Joyce\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Would you add dinner with Joyce at 7pm tomorrow night at Red Robin's","tokens":["Would","you","add","dinner","with","Joyce","at","7","pm","tomorrow","night","at","Red","Robin","'s"]},"agent_utterance":{"described_entities":["entity@1940227735"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Joyce\")))))) :location (?= #(LocationKeyphrase \"Red Robin's\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 7)))) :subject (?= #(String \"dinner\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Ok","tokens":["Ok"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"b6553480-12b6-4c55-8713-669854201522","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.subject_? (?~= \"performance review\")))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"performance review\")))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Is there a performance review today?","tokens":["Is","there","a","performance","review","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events.","tokens":["No",",","I","did","n't","find","any","events","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :subject (?~= #(String \"performance review\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\"))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\"))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have anything with Abby soon?","tokens":["Do","I","have","anything","with","Abby","soon","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event. It's a \"Meeting with Abby Gonano and Damon Straeter\".","tokens":["Yes",",","I","found","one","event",".","It","'s","a","\"","Meeting","with","Abby","Gonano","and","Damon","Straeter","\"","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (& (Event.subject_? (?~= \"baseball game\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"baseball game\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have a baseball game with Kim coming up Saturday?","tokens":["Do","I","have","a","baseball","game","with","Kim","coming","up","Saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event with Kim on Saturday. It's a \"baseball game\".","tokens":["Yes",",","I","found","one","event","with","Kim","on","Saturday",".","It","'s","a","\"","baseball","game","\"","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\"))) :subject (?~= #(String \"baseball game\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Monday)) (& (Event.subject_? (?~= \"lunch\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Are we having lunch with Kim on Monday?","tokens":["Are","we","having","lunch","with","Kim","on","Monday","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"lunch\" with Kim on Monday the 28th.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","lunch","\"","with","Kim","on","Monday","the","28","th","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\"))) :subject (?~= #(String \"lunch\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (& (Event.subject_? (?~= \"dinner\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Donna\"))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Donna\"))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Am I having dinner with Donna on Friday?","tokens":["Am","I","having","dinner","with","Donna","on","Friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"dinner\" with Donna on Friday.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","dinner","\"","with","Donna","on","Friday","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Donna\"))) :subject (?~= #(String \"dinner\"))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"ac7d5b3c-07c9-4c46-ae87-b60ca448ad19","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayOnDate (Event.subject_? (?= \"conference\")) (NextDOW (Saturday))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"conference\")) :date ^Date (NextDOW :dow ^DayOfWeek (Saturday))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you make a Saturday conference that is scheduled for all day?","tokens":["Can","you","make","a","Saturday","conference","that","is","scheduled","for","all","day","?"]},"agent_utterance":{"described_entities":["entity@183508665"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?= #(String \"conference\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, looks great, thank you","tokens":["Yes",",","looks","great",",","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"date\")) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Monica\")))))))) (EventAllDayOnDate (^(Event) EmptyStructConstraint) (NextDOW (Sunday)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"date\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Monica\")))))))) :c2 ^(Constraint Event) (EventAllDayOnDate :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Put an all day date with Monica for Sunday","tokens":["Put","an","all","day","date","with","Monica","for","Sunday"]},"agent_utterance":{"described_entities":["entity@1547331705"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Monica\")))))) :nonEmptyBase (EventAllDayOnDate :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :event (Constraint[Event])) :subject (?= #(String \"date\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"That looks great, thanks.","tokens":["That","looks","great",",","thanks","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.isAllDay_? (?= true))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.isAllDay_? :obj ^(Constraint Boolean) (^(Boolean) ?= :reference ^Boolean true))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you cancel my all day Band Practice on Saturday?","tokens":["Can","you","cancel","my","all","day","Band","Practice","on","Saturday","?"]},"agent_utterance":{"described_entities":["entity@1845661479"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :isAllDay (?= #(Boolean true)))))))))))"}}],"tags":{}}
{"dialogue_id":"e86c4fc6-749b-4e4e-abc9-3b33e31566c5","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"dentis appointment\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dentis appointment\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What time is my dentis appointment?","tokens":["What","time","is","my","dentis","appointment","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"dentis appointment\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","dentis","appointment","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"dentis appointment\"))))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Dental appointment\"))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Dental appointment\"))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Ok check with the name as Dental appointment.","tokens":["Ok","check","with","the","name","as","Dental","appointment","."]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events named \"Dental appointment\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","Dental","appointment","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Dental appointment\")))))"}},{"lispress":"(Yield (Event.duration (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"dentist appointment\")) (NextWeekList)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Duration) Yield :output ^Duration (Event.duration :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dentist appointment\")) :range ^(Constraint Date) (NextWeekList)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"How long is my dentist appointment next week?","tokens":["How","long","is","my","dentist","appointment","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's for a half hour.","tokens":["It","'s","for","a","half","hour","."]},"tags":{"original_lispress":"(Yield :output (:duration (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"dentist appointment\"))) :range (NextWeekList)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.subject_? (?~= \"hair appointment\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"hair appointment\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What about the hair appointment?","tokens":["What","about","the","hair","appointment","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's for a half hour.","tokens":["It","'s","for","a","half","hour","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :subject (?~= #(String \"hair appointment\"))))))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.duration_? (?= (addDurations (Event.duration x0) (toHours 1))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (Event.duration :obj x0) :y ^Duration (toHours :hours ^Number 1))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"please extend one hour","tokens":["please","extend","one","hour"]},"agent_utterance":{"described_entities":["entity@1584683729"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :duration (?= (addDurations (:duration x0) (toHours #(Number 1)))))))))"}}],"tags":{}}
{"dialogue_id":"54d83867-68af-42b4-b10a-c69753ee15c0","turns":[{"lispress":"(let (x0 (NextDOW (Thursday))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"vacation\")) (EventAllDayForDateRange (^(Event) EmptyStructConstraint) (DateAndConstraint x0 (nextDayOfWeek x0 (Wednesday)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (NextDOW :dow ^DayOfWeek (Thursday))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"vacation\")) :c2 ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :dateRange ^(Constraint Date) (DateAndConstraint :date1 x0 :date2 ^Date (nextDayOfWeek :date x0 :day ^DayOfWeek (Wednesday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Block off thursday through next wednesday for vacation","tokens":["Block","off","thursday","through","next","wednesday","for","vacation"]},"agent_utterance":{"described_entities":["entity@268525502"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (NextDOW :dow #(DayOfWeek \"THURSDAY\"))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :nonEmptyBase (EventAllDayForDateRange :dateRange (DateAndConstraint :date1 x0 :date2 (nextDayOfWeek x0 #(DayOfWeek \"WEDNESDAY\"))) :event (Constraint[Event])) :subject (?= #(String \"vacation\")))))))"}}],"tags":{}}
{"dialogue_id":"82a6bebe-09f2-49d8-abbc-8cd8af981d5d","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.subject_? (?~= \"concert performance\"))))))) (Event.attendees_? (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ariel\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"concert performance\"))))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ariel\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need Ariel removed from today's concert performance.","tokens":["I","need","Ariel","removed","from","today","'s","concert","performance","."]},"agent_utterance":{"described_entities":["entity@605611849"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :subject (?~= #(String \"concert performance\")))))))) :update (Constraint[Event] :attendees (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ariel\")))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.attendees_? (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tom\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tom\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I don't want Tom to be invited to the event.","tokens":["I","do","n't","want","Tom","to","be","invited","to","the","event","."]},"agent_utterance":{"described_entities":["entity@779468904"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :attendees (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tom\")))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yeah k","tokens":["yeah","k"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"sing and dance concert performance\" to be without Ariel Mermaid and without Tom.","tokens":["I","'ve","changed","\"","sing","and","dance","concert","performance","\"","to","be","without","Ariel","Mermaid","and","without","Tom","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (HourMinuteAm 10L 30L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alex\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (HourMinuteAm :hours ^Long 10L :minutes ^Long 30L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alex\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you schedule a meeting with Alex on tomorrow 10:30 AM","tokens":["Can","you","schedule","a","meeting","with","Alex","on","tomorrow","10",":","30","AM"]},"agent_utterance":{"described_entities":["entity@1231340834"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alex\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (HourMinuteAm :hours #(Number 10.0) :minutes #(Number 30.0))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"alex\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"alex\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Nevermind, take alex off that meeting.","tokens":["Nevermind",",","take","alex","off","that","meeting","."]},"agent_utterance":{"described_entities":["entity@2030422532"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"alex\")))))))))))"}}],"tags":{}}
{"dialogue_id":"cc14f0ce-93a1-4181-83dc-d122c300e47e","turns":[{"lispress":"(Yield (Person.emailAddress (PersonFromRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jenna\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.emailAddress :obj ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jenna\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hey, can you tell me what Jenna's email is?","tokens":["Hey",",","can","you","tell","me","what","Jenna","'s","email","is","?"]},"agent_utterance":{"described_entities":[],"original_text":"The email address of Jenna is j@email.com.","tokens":["The","email","address","of","Jenna","is","j@email.com","."]},"tags":{"original_lispress":"(Yield :output (:emailAddress (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jenna\"))))))))"}},{"lispress":"(Yield (Person.phoneNumber (PersonFromRecipient (Execute (refer (extensionConstraint (^(Recipient) EmptyStructConstraint)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(String) Yield :output ^String (Person.phoneNumber :obj ^Person (PersonFromRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What's her phone number?","tokens":["What","'s","her","phone","number","?"]},"agent_utterance":{"described_entities":[],"original_text":"The phone number for Jenna is 2068798452.","tokens":["The","phone","number","for","Jenna","is","2068798452","."]},"tags":{"original_lispress":"(Yield :output (:phoneNumber (PersonFromRecipient :recipient (Execute :intension (refer (extensionConstraint (Constraint[Recipient])))))))"}},{"lispress":"(FencePeopleQa)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FencePeopleQa)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What is her fax number?","tokens":["What","is","her","fax","number","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I don't have that kind of information about people.","tokens":["I","do","n't","have","that","kind","of","information","about","people","."]},"tags":{"original_lispress":"(FencePeopleQa)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTimeConstraint (Afternoon) (NextDOW (Monday)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Afternoon) :date ^Date (NextDOW :dow ^DayOfWeek (Monday)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Ok Create a meeting in the afternoon on Monday","tokens":["Ok","Create","a","meeting","in","the","afternoon","on","Monday"]},"agent_utterance":{"described_entities":["entity@1021094279"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (Afternoon) :date (NextDOW :dow #(DayOfWeek \"MONDAY\")))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes, the second one works.","tokens":["Yes",",","the","second","one","works","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"1ba15194-1611-40de-b3f5-4667c812d967","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.attendees_? (& (& (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kevin\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Ross\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jared\"))))) (EventOnDate (Tomorrow) (Event.subject_? (?~= \"skiing\"))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kevin\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Ross\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jared\"))))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"skiing\"))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Aren't I going skiing tomorrow with Kevin, Ross, Kim, and Jared?","tokens":["Are","n't","I","going","skiing","tomorrow","with","Kevin",",","Ross",",","Kim",",","and","Jared","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event matching \"skiing\" with Kevin, Ross, Kim, and Jared tomorrow. It's \"Ski Trip\" from 8:00 to 8:30 AM.","tokens":["Yes",",","I","found","one","event","matching","\"","skiing","\"","with","Kevin",",","Ross",",","Kim",",","and","Jared","tomorrow",".","It","'s","\"","Ski","Trip","\"","from","8",":","00","to","8",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kevin\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Ross\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jared\")))) :nonEmptyBase (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"skiing\")))))))) #(Number 0)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.end_? (DateTime.time_? (?= (NumberPM 5L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 5L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Thanks, can you update that to end at 5:00 PM?","tokens":["Thanks",",","can","you","update","that","to","end","at","5",":","00","PM","?"]},"agent_utterance":{"described_entities":["entity@1989830689"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 5))))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (& (Event.subject_? (?~= \"lunch\")) (Event.location_? (?= (LocationKeyphrase.apply \"Charity committee center\")))) (Event.attendees_? (& (& (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jesse\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Charity committee center\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jesse\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\"))))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thanks. And when is my next lunch at the Charity committee center with Jake, Jesse, Abby and Kim?","tokens":["Thanks",".","And","when","is","my","next","lunch","at","the","Charity","committee","center","with","Jake",",","Jesse",",","Abby","and","Kim","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Ski Trip\" to be. The event matching \"lunch\" Jake, Jesse, Abby, and Kim at Charity committee center is on Thursday the 12th at 12:00.","tokens":["I","'ve","changed","\"","Ski","Trip","\"","to","be",".","The","event","matching","\"","lunch","\"","Jake",",","Jesse",",","Abby",",","and","Kim","at","Charity","committee","center","is","on","Thursday","the","12","th","at","12",":","00","."]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jesse\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\")))) :location (?= #(LocationKeyphrase \"Charity committee center\")) :subject (?~= #(String \"lunch\")))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Could you delete that?","tokens":["Could","you","delete","that","?"]},"agent_utterance":{"described_entities":["entity@998019206"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes cancel.","tokens":["Yes","cancel","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"863b0ab0-5d3c-4eb4-ad6e-5e2970f152bc","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Search event","tokens":["Search","event"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event])))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Create","tokens":["Create"]},"agent_utterance":{"described_entities":["entity@1299810998"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event]))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (?= (MD 9L (April))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 9L :month ^Month (April))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"April 9","tokens":["April","9"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 9) :month #(Month \"APRIL\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Create event","tokens":["Create","event"]},"agent_utterance":{"described_entities":["entity@1299810998"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event]))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (?= (MD 8L (April))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 8L :month ^Month (April))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"April 8","tokens":["April","8"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 8) :month #(Month \"APRIL\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Update event","tokens":["Update","event"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Update","tokens":["Update"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (^(Event) EmptyStructConstraint)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"Search","tokens":["Search"]},"agent_utterance":{"described_entities":[],"original_text":"Here's what I found:","tokens":["Here","'s","what","I","found",":"]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event])))"}}],"tags":{}}
{"dialogue_id":"ae32c163-1347-41c6-aa4d-c7eba60308ff","turns":[{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipient (FindManager (toRecipient (CurrentUser))))))))) (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))))))) :response ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Who accepted the meeting with my manager?","tokens":["Who","accepted","the","meeting","with","my","manager","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have accepted \"Meeting with David Lax, Kim Possible, and Damon Straeter\": Kim Possible.","tokens":["Here","is","the","list","of","attendees","who","have","accepted","\"","Meeting","with","David","Lax",",","Kim","Possible",",","and","Damon","Straeter","\"",":","Kim","Possible","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (toRecipient (CurrentUser))))))))) :response #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (Event.subject_? (?~= \"Kickboxing Match\"))))))) (ResponseStatusType.Declined)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Kickboxing Match\"))))))) :response ^ResponseStatusType (ResponseStatusType.Declined)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Great, that's good news. Who has declined my Kickboxing Match on next Tuesday?","tokens":["Great",",","that","'s","good","news",".","Who","has","declined","my","Kickboxing","Match","on","next","Tuesday","?"]},"agent_utterance":{"described_entities":[],"original_text":"There are no attendees who have declined \"Kickboxing Match\".","tokens":["There","are","no","attendees","who","have","declined","\"","Kickboxing","Match","\"","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event] :subject (?~= #(String \"Kickboxing Match\")))))))) :response #(ResponseStatusType \"Declined\")))"}}],"tags":{}}
{"dialogue_id":"572e15b7-6152-4969-ac4e-045120e15bf8","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Thursday))))) (Event.attendees_? (AttendeeListHasRecipient (FindManager (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"tommy\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Thursday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"tommy\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I want to add a meeting with tommy's boss next Thursday.","tokens":["I","want","to","add","a","meeting","with","tommy","'s","boss","next","Thursday","."]},"agent_utterance":{"described_entities":["entity@188425096"],"original_text":"Here are some times when you and Dan Schoffel are free.","tokens":["Here","are","some","times","when","you","and","Dan","Schoffel","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"tommy\"))))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"THURSDAY\"))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?> (Execute (refer (& (^(Time) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Time) EmptyStructConstraint)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?> :reference ^Time (^(Time) Execute :intension ^(CalflowIntension Time) (^(Time) refer :constraint ^(Constraint (CalflowIntension Time)) (^((CalflowIntension Time)) & :c1 ^(Constraint (CalflowIntension Time)) (^(Time) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Time)) (^(Time) extensionConstraint :constraint ^(Constraint Time) (^(Time) EmptyStructConstraint)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is there anything later in the day?","tokens":["Is","there","anything","later","in","the","day","?"]},"agent_utterance":{"described_entities":["entity@1632744788"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?> (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Time])))))))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.id_? (negate (?= (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))) (EventOnDate (NextDOW (Thursday)) (^(Event) EmptyStructConstraint)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have any other events for Thursday?","tokens":["Do","I","have","any","other","events","for","Thursday","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any matching events.","tokens":["I","did","n't","find","any","matching","events","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :id (negate (?= (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))) :nonEmptyBase (EventOnDate :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :event (Constraint[Event])))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (Noon)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Greg\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (Noon)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Greg\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I want a meeting with Greg on Friday at noon.","tokens":["I","want","a","meeting","with","Greg","on","Friday","at","noon","."]},"agent_utterance":{"described_entities":["entity@1789176813"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Greg\")))))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (Noon)))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"greg\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"greg\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"arrange anthor timeing to meeting whit greg","tokens":["arrange","anthor","timeing","to","meeting","whit","greg"]},"agent_utterance":{"described_entities":["entity@1851897312"],"original_text":"Here are some times when you and Greg are free.","tokens":["Here","are","some","times","when","you","and","Greg","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"greg\"))))))))))"}}],"tags":{}}
{"dialogue_id":"149a8a40-e172-4a52-87da-11bb47c032e4","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"interviews\")) (Event.duration_? (?= (toHours 4)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"interviews\")) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 4)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"book 4 hours for interviews","tokens":["book","4","hours","for","interviews"]},"agent_utterance":{"described_entities":["entity@1324077451"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 4))) :subject (?= #(String \"interviews\"))))))"}}],"tags":{}}
{"dialogue_id":"90482129-3c4f-4f21-a2c5-98aea3f18797","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Print flight tickets\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 6L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Print flight tickets\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 6L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Create an event for 6 AM tomorrow: \"Print flight tickets\"","tokens":["Create","an","event","for","6","AM","tomorrow",":","\"","Print","flight","tickets","\""]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 6)))) :subject (?= #(String \"Print flight tickets\"))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"flight\")) (Event.start_? (?= (DateAtTimeWithDefaults (adjustByPeriod (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (toDays 1)) (NumberPM 7L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"flight\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (adjustByPeriod :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :period ^Period (toDays :days ^Number 1)) :time ^Time (NumberPM :number ^Long 7L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Schedule flight the day after that at 7 pm.","tokens":["Schedule","flight","the","day","after","that","at","7","pm","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (adjustByPeriod (Execute :intension (refer (extensionConstraint (Constraint[Date])))) (toDays #(Number 1))) :time (NumberPM :number #(Number 7)))) :subject (?= #(String \"flight\"))))))","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Today) (^(Event) EmptyStructConstraint)) (Morning))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Morning))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Is there going to be anything going on this morning?","tokens":["Is","there","going","to","be","anything","going","on","this","morning","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events this morning.","tokens":["No",",","I","did","n't","find","any","events","this","morning","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event])) :timeRange (Morning))))) #(Number 0)))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"8dd596e9-1f32-4724-8717-eee5665b4668","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 2L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 5L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 2L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 5L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"meeting between 2 and 5 pm next Friday","tokens":["meeting","between","2","and","5","pm","next","Friday"]},"agent_utterance":{"described_entities":["entity@211377122"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 2)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 5)))) :start (?= x0))))))"}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually can you wait a minute.","tokens":["Actually","can","you","wait","a","minute","."]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Okay, that is perfect","tokens":["Okay",",","that","is","perfect"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"okay that is great","tokens":["okay","that","is","great"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"going to the mall\")) (Event.start_? (DateTime.date_? (?= (Tomorrow))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"going to the mall\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"i'm going to the mall tomorrow","tokens":["i","'m","going","to","the","mall","tomorrow"]},"agent_utterance":{"described_entities":["entity@43505272"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (Tomorrow))) :subject (?= #(String \"going to the mall\"))))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Today)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"what is the weather today","tokens":["what","is","the","weather","today"]},"agent_utterance":{"described_entities":["entity@1828293586"],"original_text":"I'm sorry, you haven't shared your current location with me. Where are you?","tokens":["I","'m","sorry",",","you","have","n't","shared","your","current","location","with","me",".","Where","are","you","?"]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Today)))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":6,"user_utterance":{"original_text":"ok sorry, the first event will be best","tokens":["ok","sorry",",","the","first","event","will","be","best"]},"agent_utterance":{"described_entities":["entity@30005124"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (Execute (ConfirmCreateAndReturnAction (Event.subject_? (?= \"going to the mall\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (^(CreateEventResponse) Execute :intension ^(CalflowIntension CreateEventResponse) (ConfirmCreateAndReturnAction :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"going to the mall\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"I will going to the mall.","tokens":["I","will","going","to","the","mall","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmCreateAndReturnAction :constraint (Constraint[Event] :subject (?= #(String \"going to the mall\"))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateFromTimeToTime (NextDOW (Friday)) (^(Event) EmptyStructConstraint) (NumberPM 2L) (NumberPM 5L))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateFromTimeToTime :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time1 ^Time (NumberPM :number ^Long 2L) :time2 ^Time (NumberPM :number ^Long 5L))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":8,"user_utterance":{"original_text":"Can you find any meetings scheduled between 2 and 5 pm next Friday?","tokens":["Can","you","find","any","meetings","scheduled","between","2","and","5","pm","next","Friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 on your calendar. It's \"Appointment\" on Friday from 2:00 to 5:00 PM.","tokens":["I","found","1","on","your","calendar",".","It","'s","\"","Appointment","\"","on","Friday","from","2",":","00","to","5",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateFromTimeToTime :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event]) :time1 (NumberPM :number #(Number 2)) :time2 (NumberPM :number #(Number 5)))))"}}],"tags":{}}
{"dialogue_id":"854afd1d-5021-4d30-8bc3-0726ff601914","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.isOneOnOne_? (?= true)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alan\"))))))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTimeConstraint (Morning) (ClosestDayOfWeek (DateTime.date (Event.start x0)) (Thursday))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.isOneOnOne_? :obj ^(Constraint Boolean) (^(Boolean) ?= :reference ^Boolean true)) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alan\"))))))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Morning) :date ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :dow ^DayOfWeek (Thursday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Reschedule one-one with Alan for Thursday morning.","tokens":["Reschedule","one","-","one","with","Alan","for","Thursday","morning","."]},"agent_utterance":{"described_entities":["entity@808338094"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alan\"))) :isOneOnOne (?= #(Boolean true))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (DateTimeConstraint :constraint (Morning) :date (ClosestDayOfWeek :date (:date (:start x0)) :dow #(DayOfWeek \"THURSDAY\"))))))))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.isOneOnOne_? (?= true)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alan\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.isOneOnOne_? :obj ^(Constraint Boolean) (^(Boolean) ?= :reference ^Boolean true)) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alan\"))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"When is my 1-1 with Alan","tokens":["When","is","my","1","-","1","with","Alan"]},"agent_utterance":{"described_entities":[],"original_text":"It starts on Tuesday the 16th at 10:00 AM.","tokens":["It","starts","on","Tuesday","the","16","th","at","10",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alan\"))) :isOneOnOne (?= #(Boolean true))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberAM 9L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 9L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"ok but set the starting time at 9.00 am","tokens":["ok","but","set","the","starting","time","at","9",".","00","am"]},"agent_utterance":{"described_entities":["entity@1135434800"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 9))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.end_? (DateTime.time_? (?= (NumberAM 11L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 11L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"It ends at 11.","tokens":["It","ends","at","11","."]},"agent_utterance":{"described_entities":["entity@1040954956"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberAM :number #(Number 11))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"ok then fix the meeting","tokens":["ok","then","fix","the","meeting"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Meeting with Alan\" to be between 11:00 AM and 9:00.","tokens":["I","'ve","changed","\"","Meeting","with","Alan","\"","to","be","between","11",":","00","AM","and","9",":","00","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"d3e9a898-6355-4500-aa16-1f212d6b01f4","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Today) (Event.subject_? (?~= \"dinner date\"))) (Night)))))) (Event.start_? (DateTime.time_? (?= (NumberPM 6L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner date\"))) :timeRange ^(Constraint Time) (Night)))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 6L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to change my dinner date tonight form 8pm to 6pm.","tokens":["I","need","to","change","my","dinner","date","tonight","form","8","pm","to","6","pm","."]},"agent_utterance":{"described_entities":["entity@1451049054"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event] :subject (?~= #(String \"dinner date\")))) :timeRange (Night)))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 6))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.duration_? (?= (toMinutes 30))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 30))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"No it should only be 30 minutes","tokens":["No","it","should","only","be","30","minutes"]},"agent_utterance":{"described_entities":["entity@1293286309"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :duration (?= (toMinutes #(Number 30.0)))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.time_? (?= (NumberPM 10L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 10L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"OK, Move my dinner date tonight down to 10:00pm.","tokens":["OK",",","Move","my","dinner","date","tonight","down","to","10",":","00","pm","."]},"agent_utterance":{"described_entities":["entity@893244621"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 10.0))))))))"}}],"tags":{}}
{"dialogue_id":"eb3b6727-1444-479d-98dc-a5ab27d47c52","turns":[{"lispress":"(Yield (Event.attendees (FindLastEvent (EventOnDate (NextDOW (Friday)) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (Event.attendees :obj ^Event (FindLastEvent :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Who is my last meeting with friday?","tokens":["Who","is","my","last","meeting","with","friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"The attendees for the last on August 2nd are: you and Joey Black.","tokens":["The","attendees","for","the","last","on","August","2","nd","are",":","you","and","Joey","Black","."]},"tags":{"original_lispress":"(Yield :output (:attendees (FindLastEvent :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event])))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Ohh! It's well","tokens":["Ohh","!","It","'s","well"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"HR Meeting\")))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.date_? (?= (adjustByPeriod (DateTime.date (Event.start x0)) (toDays 1)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"HR Meeting\")))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (adjustByPeriod :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :period ^Period (toDays :days ^Number 1)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you move the HR Meeting forward a day?","tokens":["Can","you","move","the","HR","Meeting","forward","a","day","?"]},"agent_utterance":{"described_entities":["entity@1179139108"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"HR Meeting\"))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (adjustByPeriod (:date (:start x0)) (toDays #(Number 1))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yep it does.","tokens":["Yep","it","does","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"HR Meeting\" to be.","tokens":["I","'ve","changed","\"","HR","Meeting","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (HourMinutePm 3L 30L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 30L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Thanks, also change the start time to 3:30pm.","tokens":["Thanks",",","also","change","the","start","time","to","3",":","30","pm","."]},"agent_utterance":{"described_entities":["entity@1810616822"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (HourMinutePm :hours #(Number 3) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"9ae295e6-4e76-48d7-beca-54468a5ffc37","turns":[{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"seattle\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"seattle\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is the weather in seattle?","tokens":["What","is","the","weather","in","seattle","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"seattle\"))) :time (?= (Now))))"}},{"lispress":"(Yield (IsRainy (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"miami\"))) (?= (Now)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (IsRainy :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"miami\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is it raining in miami?","tokens":["Is","it","raining","in","miami","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The total rainfall is 0.00 inches per hour right now.","tokens":["Yes",".","The","total","rainfall","is","0",".","00","inches","per","hour","right","now","."]},"tags":{"original_lispress":"(Yield :output (IsRainy :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"miami\"))) :time (?= (Now)))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (snowPrecipProbability) (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Vancouver\"))) (DateTime.date_? (?= (Today))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dimensionless) Yield :output ^Dimensionless (^(Dimensionless) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Dimensionless) (snowPrecipProbability) :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Vancouver\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What is the chance of snow in Vancouver?","tokens":["What","is","the","chance","of","snow","in","Vancouver","?"]},"agent_utterance":{"described_entities":[],"original_text":"The chance of snow is 0.00 % today.","tokens":["The","chance","of","snow","is","0",".","00","%","today","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"snowPrecipProbability\") :quantifier #(WeatherQuantifier \"Summarize\") :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Vancouver\"))) :time (Constraint[DateTime] :date (?= (Today))))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (humidity) (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Charlotte\"))) (?= (Now)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dimensionless) Yield :output ^Dimensionless (^(Dimensionless) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Dimensionless) (humidity) :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Charlotte\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"How humid is it in Charlotte","tokens":["How","humid","is","it","in","Charlotte"]},"agent_utterance":{"described_entities":[],"original_text":"The humidity is 0.00 % right now.","tokens":["The","humidity","is","0",".","00","%","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"humidity\") :quantifier #(WeatherQuantifier \"Summarize\") :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Charlotte\"))) :time (?= (Now)))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (humidity) (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Boston\"))) (?= (Now)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dimensionless) Yield :output ^Dimensionless (^(Dimensionless) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Dimensionless) (humidity) :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Boston\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"What is the humidity in Boston","tokens":["What","is","the","humidity","in","Boston"]},"agent_utterance":{"described_entities":[],"original_text":"The humidity is 0.00 % right now.","tokens":["The","humidity","is","0",".","00","%","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"humidity\") :quantifier #(WeatherQuantifier \"Summarize\") :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Boston\"))) :time (?= (Now)))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (windSpeed) (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Los angeles\"))) (?= (Now)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Velocity) Yield :output ^Velocity (^(Velocity) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable Velocity) (windSpeed) :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Los angeles\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"How much wind is there in Los angeles?","tokens":["How","much","wind","is","there","in","Los","angeles","?"]},"agent_utterance":{"described_entities":[],"original_text":"The wind speed is 0.00 mph right now.","tokens":["The","wind","speed","is","0",".","00","mph","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"windSpeed\") :quantifier #(WeatherQuantifier \"Summarize\") :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Los angeles\"))) :time (?= (Now)))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Salt Lake City\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Salt Lake City\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"What is the weather in Salt Lake City?","tokens":["What","is","the","weather","in","Salt","Lake","City","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Salt Lake City\"))) :time (?= (Now))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Min) (temperature) (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Kansas City\"))) (DateTime.date_? (?= (Today))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Temperature) Yield :output ^Temperature (^(Temperature) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Min) :property ^(Lambda WeatherTable Temperature) (temperature) :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Kansas City\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":7,"user_utterance":{"original_text":"What is the low in Kansas City?","tokens":["What","is","the","low","in","Kansas","City","?"]},"agent_utterance":{"described_entities":[],"original_text":"The minimum temperature is 0.00 °F today.","tokens":["The","minimum","temperature","is","0",".","00","°","F","today","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"temperature\") :quantifier #(WeatherQuantifier \"Min\") :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Kansas City\"))) :time (Constraint[DateTime] :date (?= (Today))))))"}}],"tags":{}}
{"dialogue_id":"58c826d2-e703-4e84-9548-436e16beda9f","turns":[{"lispress":"(Yield (Event.duration (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"dinner\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Duration) Yield :output ^Duration (Event.duration :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"HOw long is dinner tomorrow?","tokens":["HOw","long","is","dinner","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's for 2 hours.","tokens":["It","'s","for","2","hours","."]},"tags":{"original_lispress":"(Yield :output (:duration (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"dinner\")))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventOnDate (ClosestDayOfWeek (Execute (refer (& (^(Date) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Date) EmptyStructConstraint))))) (Friday)) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventOnDate :date ^Date (ClosestDayOfWeek :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^((CalflowIntension Date)) & :c1 ^(Constraint (CalflowIntension Date)) (^(Date) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint))))) :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":1,"user_utterance":{"original_text":"And on friday?","tokens":["And","on","friday","?"]},"agent_utterance":{"described_entities":["entity@167504401"],"original_text":"Sorry, I'm not sure what you're referring to.","tokens":["Sorry",",","I","'m","not","sure","what","you","'re","referring","to","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventOnDate :date (ClosestDayOfWeek :date (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Date]))))) :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event])))))","do-not-train":""}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"cancel the today events on calender","tokens":["cancel","the","today","events","on","calender"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 1L)) (extensionConstraint (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 1L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Cancel the first event.","tokens":["Cancel","the","first","event","."]},"agent_utterance":{"described_entities":["entity@584167149"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 1)))) (extensionConstraint (Constraint[Event])))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yes!","tokens":["yes","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted that.","tokens":["I","'ve","deleted","that","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"31664df2-0ff6-417c-aed8-ca0d1eca417b","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need an appointment","tokens":["I","need","an","appointment"]},"agent_utterance":{"described_entities":["entity@95341821"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event]))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes","tokens":["yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar tomorrow from 10:00 to 10:30 AM.","tokens":["I","'ve","put","that","on","your","calendar","tomorrow","from","10",":","00","to","10",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"good","tokens":["good"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"52165461-ffb8-46ab-801b-1b004f18ff30","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"travel\")) (ThisWeek))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"travel\")) :range ^(Constraint Date) (ThisWeek))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What is my travel schedule this week?","tokens":["What","is","my","travel","schedule","this","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events named \"travel\" on your calendar this week.","tokens":["I","did","n't","find","any","events","named","\"","travel","\"","on","your","calendar","this","week","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"travel\"))) :range (ThisWeek))))"}}],"tags":{}}
{"dialogue_id":"ecd9f782-4773-4569-989e-35355afda942","turns":[{"lispress":"(let (x0 (MD 12L (December))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayForDateRange (Event.subject_? (?= \"work retreat\")) (DateAndConstraint x0 (nextMonthDay x0 (December) 12L)))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (MD :day ^Long 12L :month ^Month (December))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"work retreat\")) :dateRange ^(Constraint Date) (DateAndConstraint :date1 x0 :date2 ^Date (nextMonthDay :date x0 :month ^Month (December) :day ^Long 12L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please make a work retreat to last from Friday the 10th of December to Sunday the 12th of December","tokens":["Please","make","a","work","retreat","to","last","from","Friday","the","10","th","of","December","to","Sunday","the","12","th","of","December"]},"agent_utterance":{"described_entities":["entity@289656568"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (MD :day #(Number 12) :month #(Month \"DECEMBER\"))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayForDateRange :dateRange (DateAndConstraint :date1 x0 :date2 (nextMonthDay x0 #(Month \"DECEMBER\") #(Number 12))) :event (Constraint[Event] :subject (?= #(String \"work retreat\"))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That looks fantastic","tokens":["That","looks","fantastic"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.date_? (?= (MD 11L (December))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 11L :month ^Month (December))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"make it on dec 11","tokens":["make","it","on","dec","11"]},"agent_utterance":{"described_entities":["entity@1688110261"],"original_text":"Is this the update you want?","tokens":["Is","this","the","update","you","want","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 11) :month #(Month \"DECEMBER\"))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"no","tokens":["no"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(let (x0 (MD 12L (December))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayForDateRange (^(Event) EmptyStructConstraint) (DateAndConstraint x0 (nextMonthDay x0 (December) 16L)))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (MD :day ^Long 12L :month ^Month (December))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :dateRange ^(Constraint Date) (DateAndConstraint :date1 x0 :date2 ^Date (nextMonthDay :date x0 :month ^Month (December) :day ^Long 16L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Make an event From DEcember 12 to December 16","tokens":["Make","an","event","From","DEcember","12","to","December","16"]},"agent_utterance":{"described_entities":["entity@1251213710"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(let (x0 (MD :day #(Number 12) :month #(Month \"DECEMBER\"))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayForDateRange :dateRange (DateAndConstraint :date1 x0 :date2 (nextMonthDay x0 #(Month \"DECEMBER\") #(Number 16))) :event (Constraint[Event]))))))"}}],"tags":{}}
{"dialogue_id":"378b14f5-2b52-40c4-a970-df7c618fb891","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.attendees_? (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Adam\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Luna\"))))) (EventOnDate (NextDOW (Saturday)) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Adam\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Luna\"))))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Tell me what I have on my calendar for next Saturday with Adam and Luna.","tokens":["Tell","me","what","I","have","on","my","calendar","for","next","Saturday","with","Adam","and","Luna","."]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 event on your calendar on Saturday with Adam and Luna. It's a \"birthday party\" from 11:00 to 11:30 AM.","tokens":["I","found","1","event","on","your","calendar","on","Saturday","with","Adam","and","Luna",".","It","'s","a","\"","birthday","party","\"","from","11",":","00","to","11",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Adam\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Luna\")))) :nonEmptyBase (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event])))))"}},{"lispress":"(RepeatAgent)","expansion_lispress":null,"fully_typed_lispress":"^Unit (RepeatAgent)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I'm sorry. What did you just say?","tokens":["I","'m","sorry",".","What","did","you","just","say","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 event on your calendar on Saturday with Adam and Luna. It's a \"birthday party\" from 11:00 to 11:30 AM.","tokens":["I","found","1","event","on","your","calendar","on","Saturday","with","Adam","and","Luna",".","It","'s","a","\"","birthday","party","\"","from","11",":","00","to","11",":","30","AM","."]},"tags":{"original_lispress":"(RepeatAgent)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Thanks.","tokens":["Thanks","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"67508236-c5fe-47ae-b2c4-b5b8f0d550fd","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"doctor appointment\")) (Event.start_? (DateTime.date_? (NextWeekList)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"doctor appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"I want to make a doctor appointment next week","tokens":["I","want","to","make","a","doctor","appointment","next","week"]},"agent_utterance":{"described_entities":["entity@1635633708"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (NextWeekList)) :subject (?= #(String \"doctor appointment\"))))))","do-not-train":""}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (NumberPM 12L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 12L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"12pm please","tokens":["12","pm","please"]},"agent_utterance":{"described_entities":["entity@897876761"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 12))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (?= (Monday))))) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) ?= :reference ^DayOfWeek (Monday))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Oh, Monday please","tokens":["Oh",",","Monday","please"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (?= #(DayOfWeek \"MONDAY\"))))) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"That's great! Thank you.","tokens":["That","'s","great","!","Thank","you","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"2884546a-142e-4aac-aa0a-7026abf3db5f","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTimeConstraint (?= (EndOfWorkDay)) (Today))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (^(Time) ?= :reference ^Time (EndOfWorkDay)) :date ^Date (Today))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make me something to do at the end of work today","tokens":["Make","me","something","to","do","at","the","end","of","work","today"]},"agent_utterance":{"described_entities":["entity@337884024"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (?= (EndOfWorkDay)) :date (Today))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That works, thanks.","tokens":["That","works",",","thanks","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"office dinner party\")) (Event.start_? (DateTimeConstraint (?= (EndOfWorkDay)) (Today)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"office dinner party\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (^(Time) ?= :reference ^Time (EndOfWorkDay)) :date ^Date (Today)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Make me a office dinner party at the end of work today","tokens":["Make","me","a","office","dinner","party","at","the","end","of","work","today"]},"agent_utterance":{"described_entities":["entity@1098815403"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeConstraint :constraint (?= (EndOfWorkDay)) :date (Today)) :subject (?= #(String \"office dinner party\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"good","tokens":["good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Friday)) (EndOfWorkDay)) (Event.subject_? (?~= \"Team Dinner\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (EndOfWorkDay)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Team Dinner\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Where is the Team Dinner happening on Friday at the end of the day?","tokens":["Where","is","the","Team","Dinner","happening","on","Friday","at","the","end","of","the","day","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"Team Dinner\" on Friday at 5:00 PM is located at Olive Garden.","tokens":["The","event","matching","\"","Team","Dinner","\"","on","Friday","at","5",":","00","PM","is","located","at","Olive","Garden","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (EndOfWorkDay)) :event (Constraint[Event] :subject (?~= #(String \"Team Dinner\")))))))))"}}],"tags":{}}
{"dialogue_id":"28b6e776-d221-470b-a02a-36f41c9b580b","turns":[{"lispress":"(GenericPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (GenericPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"yes ,sir","tokens":["yes",",","sir"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you with your calendar.","tokens":["I","can","help","you","with","your","calendar","."]},"tags":{"original_lispress":"(GenericPleasantry)"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes,update my calendar evets","tokens":["yes",",","update","my","calendar","evets"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch\")) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Julia\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Juiles\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Julie\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Julia\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Juiles\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Julie\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Can you add a lunch with Julia, Juiles and Julie?","tokens":["Can","you","add","a","lunch","with","Julia",",","Juiles","and","Julie","?"]},"agent_utterance":{"described_entities":["entity@627201531"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Julia\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Juiles\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Julie\"))))))) :subject (?= #(String \"lunch\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"JULIA\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"JULIA\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"REMOVE JULIA AND ADD JULY","tokens":["REMOVE","JULIA","AND","ADD","JULY"]},"agent_utterance":{"described_entities":["entity@286697690"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"JULIA\")))))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"The first one is the best","tokens":["The","first","one","is","the","best"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}}],"tags":{}}
{"dialogue_id":"80775ce7-66cd-4f2b-b9b3-ab6830aa42de","turns":[{"lispress":"(GenericPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (GenericPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi","tokens":["Hi"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you with your calendar.","tokens":["I","can","help","you","with","your","calendar","."]},"tags":{"original_lispress":"(GenericPleasantry)"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Los Angeles\"))) (DateTime.date_? (LastWeekNew))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Los Angeles\"))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (LastWeekNew))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"can you give me the last week weather report in Los Angeles.","tokens":["can","you","give","me","the","last","week","weather","report","in","Los","Angeles","."]},"agent_utterance":{"described_entities":[],"original_text":"It was clear with a temperature of 0.00 °F.","tokens":["It","was","clear","with","a","temperature","of","0",".","00","°","F","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Los Angeles\"))) :time (Constraint[DateTime] :date (LastWeekNew))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"thank you","tokens":["thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"4e2dc5fc-0b2e-491e-ad65-73aac90d904b","turns":[{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Today)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hello what i the weather like today?","tokens":["Hello","what","i","the","weather","like","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a high of 0.00 °F and a low of 0.00 °F today.","tokens":["It","is","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","today","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Today)))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Tomorrow)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What is the weather forecast for tomorrow?","tokens":["What","is","the","weather","forecast","for","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F tomorrow.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Tomorrow)))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Las Vegas\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Las Vegas\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What is the weather like in Las Vegas?","tokens":["What","is","the","weather","like","in","Las","Vegas","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Las Vegas\"))) :time (?= (Now))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"Binghamton NY\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Binghamton NY\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What is the weather like in Binghamton NY","tokens":["What","is","the","weather","like","in","Binghamton","NY"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"Binghamton NY\"))) :time (?= (Now))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (NextPeriod (toDays 5)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextPeriod :period ^Period (toDays :days ^Number 5)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"What is the 5 day forecast?","tokens":["What","is","the","5","day","forecast","?"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a high of 0.00 °F and a low of 0.00 °F in Washington between Mon, October 29 and Sat, November 3.","tokens":["It","will","be","clear","with","a","high","of","0",".","00","°","F","and","a","low","of","0",".","00","°","F","in","Washington","between","Mon",",","October","29","and","Sat",",","November","3","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (NextPeriod :period (toDays #(Number 5))))))"}},{"lispress":"(Yield (WeatherAggregate (WeatherQuantifier.Summarize) (sunsetTime) (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Today))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (^(DateTime) WeatherAggregate :quantifier ^WeatherQuantifier (WeatherQuantifier.Summarize) :property ^(Lambda WeatherTable DateTime) (sunsetTime) :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"When is sunset?","tokens":["When","is","sunset","?"]},"agent_utterance":{"described_entities":[],"original_text":"Sunset will be at 12:00 PM today.","tokens":["Sunset","will","be","at","12",":","00","PM","today","."]},"tags":{"original_lispress":"(Yield :output (WeatherAggregate :property #(WeatherProp \"sunsetTime\") :quantifier #(WeatherQuantifier \"Summarize\") :table (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Today))))))"}},{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":6,"user_utterance":{"original_text":"Add to my calendar tonight 8pm meet Ron for dinner","tokens":["Add","to","my","calendar","tonight","8","pm","meet","Ron","for","dinner"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"42a9a6e8-a487-41fe-9106-bd7cbf4fcce4","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (SeasonFall)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (SeasonFall)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Delete my fall event","tokens":["Delete","my","fall","event"]},"agent_utterance":{"described_entities":["entity@614897164"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (SeasonFall)))))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually don't delete that","tokens":["Actually","do","n't","delete","that"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}}],"tags":{}}
{"dialogue_id":"ce94a986-4572-419f-a947-a992f988f70a","turns":[{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Can you tell me what the weather is like right now?","tokens":["Can","you","tell","me","what","the","weather","is","like","right","now","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (?= (Now))))","do-not-train":""}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (NextWeekend))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekend))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"How is this weekends weather looking like","tokens":["How","is","this","weekends","weather","looking","like"]},"agent_utterance":{"described_entities":[],"original_text":"It will be clear with a temperature of 0.00 °F.","tokens":["It","will","be","clear","with","a","temperature","of","0",".","00","°","F","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (NextWeekend))))"}},{"lispress":"(Yield (WillRain (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Today))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Today))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Will it rain today?","tokens":["Will","it","rain","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% today.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","today","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Today))))))","do-not-train":""}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^((Constraint DateTime)) roleConstraint (Path.apply \"time\")) (intension (DateTime.date_? (ThisWeekend))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint DateTime)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint DateTime))) (^((Constraint DateTime)) roleConstraint :path ^Path (Path.apply :inner ^String \"time\")) :value ^(CalflowIntension (Constraint DateTime)) (^((Constraint DateTime)) intension :extension ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (ThisWeekend))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"How about this weekend?","tokens":["How","about","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% in Montrose between Saturday and Sunday the 14th.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","in","Montrose","between","Saturday","and","Sunday","the","14","th","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (roleConstraint (append #(List[Path] []) #(Path \"time\"))) :value (intension (Constraint[DateTime] :date (ThisWeekend))))))"}},{"lispress":"(Yield (WillRain (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (ThisWeekend)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (ThisWeekend)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Will it rain this weekend?","tokens":["Will","it","rain","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% in Montrose between Saturday and Sunday the 14th.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","in","Montrose","between","Saturday","and","Sunday","the","14","th","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (ThisWeekend)))))"}},{"lispress":"(Yield (Execute (NewClobber (refer (^(Dynamic) ActionIntensionConstraint)) (^((Constraint DateTime)) roleConstraint (Path.apply \"time\")) (intension (DateTime.date_? (NextWeekList))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic (Constraint DateTime)) NewClobber :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)) :slotConstraint ^(Constraint (CalflowIntension (Constraint DateTime))) (^((Constraint DateTime)) roleConstraint :path ^Path (Path.apply :inner ^String \"time\")) :value ^(CalflowIntension (Constraint DateTime)) (^((Constraint DateTime)) intension :extension ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"How about next week?","tokens":["How","about","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% in Montrose between Sunday the 14th and Saturday the 20th.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","in","Montrose","between","Sunday","the","14","th","and","Saturday","the","20","th","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (NewClobber :intension (refer (ActionIntensionConstraint)) :slotConstraint (roleConstraint (append #(List[Path] []) #(Path \"time\"))) :value (intension (Constraint[DateTime] :date (NextWeekList))))))"}},{"lispress":"(Yield (WillRain (WeatherQueryApi (AtPlace (Here)) (DateTime.date_? (?= (Tomorrow))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (WillRain :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (Here)) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":6,"user_utterance":{"original_text":"Will it rain tomorrow?","tokens":["Will","it","rain","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The chance of rain is 0.00% tomorrow.","tokens":["Yes",".","The","chance","of","rain","is","0",".","00","%","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (WillRain :table (WeatherQueryApi :place (AtPlace :place (Here)) :time (Constraint[DateTime] :date (?= (Tomorrow))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"c3674ae1-3f70-4f73-8696-2226539a6582","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"dinner date\")) (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 6L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alicia\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner date\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 6L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alicia\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule a dinner date with Alicia for 6 pm this evening","tokens":["Schedule","a","dinner","date","with","Alicia","for","6","pm","this","evening"]},"agent_utterance":{"described_entities":["entity@1062527087"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alicia\")))))) :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"dinner date\"))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Cork lift street.","tokens":["Cork","lift","street","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"nice","tokens":["nice"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"that's it","tokens":["that","'s","it"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"cancel this event and all today","tokens":["cancel","this","event","and","all","today"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}}],"tags":{}}
{"dialogue_id":"32fa0a06-2a71-4158-8503-47bf13718630","turns":[{"lispress":"(let (x0 (Now)) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (EndOfWorkDay))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (Now)) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (EndOfWorkDay))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Update my schedule that I will have meetings with Abby for the rest of the day.","tokens":["Update","my","schedule","that","I","will","have","meetings","with","Abby","for","the","rest","of","the","day","."]},"agent_utterance":{"described_entities":["entity@1172939479"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (Now)) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))) :end (?= (TimeAfterDateTime :dateTime x0 :time (EndOfWorkDay))) :start (?= x0))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"It's really good","tokens":["It","'s","really","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Outstanding, thank you so much!","tokens":["Outstanding",",","thank","you","so","much","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(let (x0 (HourMinutePm 3L 30L) x1 (NextTime x0)) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"phone conference\")) (Event.start_? (?= x1))) (Event.end_? (?= (DateAtTimeWithDefaults (adjustByPeriod (DateTime.date x1) (toDays 1)) x0))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 30L) x1 ^DateTime (NextTime :time x0)) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"phone conference\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x1))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (adjustByPeriod :date ^Date (DateTime.date :obj x1) :period ^Period (toDays :days ^Number 1)) :time x0))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Create an event called phone conference from 3:30 PM until the end of the day.","tokens":["Create","an","event","called","phone","conference","from","3",":","30","PM","until","the","end","of","the","day","."]},"agent_utterance":{"described_entities":["entity@1120736348"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(let (x0 (HourMinutePm :hours #(Number 3) :minutes #(Number 30.0)) x1 (NextTime :time x0)) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (DateAtTimeWithDefaults :date (adjustByPeriod (:date x1) (toDays #(Number 1))) :time x0)) :start (?= x1) :subject (?= #(String \"phone conference\")))))))"}},{"lispress":"(let (x0 (Monday) x1 (NextDOW x0)) (do (Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (EventAllDayForDateRange (Event.subject_? (?= \"conference\")) (DateAndConstraint x1 (nextDayOfWeek x1 x0))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DayOfWeek (Monday) x1 ^Date (NextDOW :dow x0)) ^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"conference\")) :dateRange ^(Constraint Date) (DateAndConstraint :date1 x1 :date2 ^Date (nextDayOfWeek :date x1 :day x0))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":4,"user_utterance":{"original_text":"The first option would work the best for me. add conference from 10 am monday until end of the work day","tokens":["The","first","option","would","work","the","best","for","me",".","add","conference","from","10","am","monday","until","end","of","the","work","day"]},"agent_utterance":{"described_entities":["entity@574025436"],"original_text":"Sorry, I'm not sure what you're referring to.","tokens":["Sorry",",","I","'m","not","sure","what","you","'re","referring","to","."]},"tags":{"original_lispress":"(let (x0 #(DayOfWeek \"MONDAY\") x1 (NextDOW :dow x0)) (do (Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (EventAllDayForDateRange :dateRange (DateAndConstraint :date1 x1 :date2 (nextDayOfWeek x1 x0)) :event (Constraint[Event] :subject (?= #(String \"conference\")))))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"f7bd5566-1df0-4eb9-bcfb-111d3afd1a57","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"go to picnic\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Friday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"go to picnic\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Friday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Make an event to go to picnic on Friday","tokens":["Make","an","event","to","go","to","picnic","on","Friday"]},"agent_utterance":{"described_entities":["entity@825591134"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"FRIDAY\")))) :subject (?= #(String \"go to picnic\"))))))","do-not-train":""}}],"tags":{}}
{"dialogue_id":"534f3640-5a43-4488-86bc-b92d29052fab","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (DateTime.date_? (?= (NextDOW (Wednesday))))) (Event.duration_? (?= (toHours 2)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Polly\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Wednesday))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Polly\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule a 2 hour meeting on Wednesday with Polly","tokens":["Schedule","a","2","hour","meeting","on","Wednesday","with","Polly"]},"agent_utterance":{"described_entities":["entity@1722845988"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Polly\")))))) :duration (?= (toHours #(Number 2))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"WEDNESDAY\"))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 1L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 1L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"First one is look good","tokens":["First","one","is","look","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 1) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"team meeting\")) (Event.start_? (DateTimeAndConstraint (DateAtTimeWithDefaults (Tomorrow) (NumberPM 1L)) (DateAtTimeWithDefaults (Tomorrow) (NumberPM 4L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"team meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeAndConstraint :dateTime1 ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 1L)) :dateTime2 ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 4L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I'd like to have a team meeting tomorrow between 1:00 PM and 4:00 PM.","tokens":["I","'d","like","to","have","a","team","meeting","tomorrow","between","1",":","00","PM","and","4",":","00","PM","."]},"agent_utterance":{"described_entities":["entity@1527986145"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (DateTimeAndConstraint :dateTime1 (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 1))) :dateTime2 (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 4)))) :subject (?= #(String \"team meeting\"))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.time_? (?= (NumberPM 1L)))) (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.duration_? (?= (toMinutes 45)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L)))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 45)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"we need 45 minutes, start it at 1","tokens":["we","need","45","minutes",",","start","it","at","1"]},"agent_utterance":{"described_entities":["entity@1275814040"],"original_text":"I've put that on your calendar. __BREAK How is this?","tokens":["I","'ve","put","that","on","your","calendar",".","How","is","this","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1))))) :intension (refer (ActionIntensionConstraint))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :duration (?= (toMinutes #(Number 45))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"No it should be an hour","tokens":["No","it","should","be","an","hour"]},"agent_utterance":{"described_entities":["entity@1082077899"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :duration (?= (toHours #(Number 1)))))))"}}],"tags":{}}
{"dialogue_id":"6ff2a883-5f41-4697-bf45-de0166c841c8","turns":[{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I would like to have a room booked for tomorrow.","tokens":["I","would","like","to","have","a","room","booked","for","tomorrow","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"lunch meeting\")) (Event.start_? (DateTime.date_? (?= (NextDOW (Monday)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Monday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you set up a lunch meeting on Monday for me?","tokens":["Can","you","set","up","a","lunch","meeting","on","Monday","for","me","?"]},"agent_utterance":{"described_entities":["entity@571368035"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"MONDAY\")))) :subject (?= #(String \"lunch meeting\"))))))"}},{"lispress":"(DoNotConfirm)","expansion_lispress":null,"fully_typed_lispress":"^Unit (DoNotConfirm)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Just forget about it","tokens":["Just","forget","about","it"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Ok, I won't do anything for now. Let me know what else I can help you with.","tokens":["Ok",",","I","wo","n't","do","anything","for","now",".","Let","me","know","what","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(DoNotConfirm)"}},{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"Dinner\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Dinner\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Where do I go for Dinner tomorrow?","tokens":["Where","do","I","go","for","Dinner","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"Dinner\" tomorrow is located at Chilli's.","tokens":["The","event","matching","\"","Dinner","\"","tomorrow","is","located","at","Chilli","'s","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"Dinner\")))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"No, I need to cancel that.","tokens":["No",",","I","need","to","cancel","that","."]},"agent_utterance":{"described_entities":["entity@1358483261"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))))"}}],"tags":{}}
{"dialogue_id":"616053f8-5a51-475c-b944-02e16937b3aa","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"games\")) (SeasonSpring))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"games\")) :range ^(Constraint Date) (SeasonSpring))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Are any games scheduled in the spring","tokens":["Are","any","games","scheduled","in","the","spring"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 1 event named \"games\" between March 1, 2020 and May 31, 2020. It's \"Spring Games\" on March 4, 2020 from 11:00 to 11:30 AM.","tokens":["Yes",",","I","found","1","event","named","\"","games","\"","between","March","1",",","2020","and","May","31",",","2020",".","It","'s","\"","Spring","Games","\"","on","March","4",",","2020","from","11",":","00","to","11",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"games\"))) :range (SeasonSpring))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTime.date_? (SeasonSummer))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (SeasonSummer))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Please add an event for summer.","tokens":["Please","add","an","event","for","summer","."]},"agent_utterance":{"described_entities":["entity@1242277723"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (SeasonSummer))))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"No, are there any other times?","tokens":["No",",","are","there","any","other","times","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I want the 2nd appointment.","tokens":["I","want","the","2","nd","appointment","."]},"agent_utterance":{"described_entities":["entity@2051272746"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"singing competition\")) (Event.start_? (DateTime.date_? (SeasonFall)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"singing competition\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (SeasonFall)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Schedule a singing competition this fall.","tokens":["Schedule","a","singing","competition","this","fall","."]},"agent_utterance":{"described_entities":["entity@400531300"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (SeasonFall)) :subject (?= #(String \"singing competition\"))))))"}}],"tags":{}}
{"dialogue_id":"2923e3b0-4867-47a5-ab79-5cebcf3596b7","turns":[{"lispress":"(Yield (EventAttendance (RespondComment.apply \"invitation accepted\") :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"accept the invitation\"))))) :response (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :comment ^RespondComment (RespondComment.apply :inner ^String \"invitation accepted\") :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"accept the invitation\"))))) :response ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Please accept the invitation to accept the invitation and say invitation accepted.","tokens":["Please","accept","the","invitation","to","accept","the","invitation","and","say","invitation","accepted","."]},"agent_utterance":{"described_entities":["entity@1392760093"],"original_text":"I will accept \"Accept the invitation\" and send a response to the organizer with the following comment: \"invitation accepted\". Is that ok?","tokens":["I","will","accept","\"","Accept","the","invitation","\"","and","send","a","response","to","the","organizer","with","the","following","comment",":","\"","invitation","accepted","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :comment #(RespondComment \"invitation accepted\") :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"accept the invitation\")))))) :response #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"yes that is great thank you","tokens":["yes","that","is","great","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I have accepted it.","tokens":["I","have","accepted","it","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (EventAttendance :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Party at Elton John's house\"))))) :response (ResponseStatusType.Accepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Party at Elton John's house\"))))) :response ^ResponseStatusType (ResponseStatusType.Accepted)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Please accept the Party at Elton John's house.","tokens":["Please","accept","the","Party","at","Elton","John","'s","house","."]},"agent_utterance":{"described_entities":["entity@519770836"],"original_text":"I will accept \"Party at Elton John's House\". Is that ok?","tokens":["I","will","accept","\"","Party","at","Elton","John","'s","House","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(Yield :output (EventAttendance :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Party at Elton John's house\")))))) :response #(ResponseStatusType \"Accepted\")))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (EventAttendance :event (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Office monthly meeting\"))))) :response (ResponseStatusType.Accepted))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(AttendanceResponse) Yield :output ^AttendanceResponse (EventAttendance :event ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Office monthly meeting\"))))) :response ^ResponseStatusType (ResponseStatusType.Accepted))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes you are right, Can you also accept the Office monthly meeting","tokens":["Yes","you","are","right",",","Can","you","also","accept","the","Office","monthly","meeting"]},"agent_utterance":{"described_entities":["entity@1399060893"],"original_text":"I have accepted it. __BREAK I will accept \"Office monthly meeting\". Is that ok?","tokens":["I","have","accepted","it",".","I","will","accept","\"","Office","monthly","meeting","\"",".","Is","that","ok","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (EventAttendance :event (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Office monthly meeting\")))))) :response #(ResponseStatusType \"Accepted\"))))"}}],"tags":{}}
{"dialogue_id":"e3fa2f2b-dd80-45dd-883d-ed92dd73943c","turns":[{"lispress":"(GenericPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (GenericPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"hii","tokens":["hii"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you with your calendar.","tokens":["I","can","help","you","with","your","calendar","."]},"tags":{"original_lispress":"(GenericPleasantry)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"32b5ee65-b7fc-425d-8d27-6da6652e1a0b","turns":[{"lispress":"(FenceScope)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceScope)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"where is the survey","tokens":["where","is","the","survey"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can only help with your calendar.","tokens":["Sorry",",","I","can","only","help","with","your","calendar","."]},"tags":{"original_lispress":"(FenceScope)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"27a22502-38bb-4525-b451-33b05f6ecd47","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"lunch meeting\")))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (?= (adjustByPeriodDuration (Event.start x0) (PeriodDuration.apply :duration (toHours 1)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch meeting\")))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.start :obj x0) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 1)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I need to move my lunch meeting back an hour.","tokens":["I","need","to","move","my","lunch","meeting","back","an","hour","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events matching \"lunch meeting\" on your calendar.","tokens":["I","did","n't","find","any","events","matching","\"","lunch","meeting","\"","on","your","calendar","."]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"lunch meeting\"))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (?= (adjustByPeriodDuration (:start x0) (PeriodDuration :duration (toHours #(Number 1))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Press Conference\")) (Event.start_? (OnDateAfterTime (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (NumberPM 5L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Press Conference\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (OnDateAfterTime :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :time ^Time (NumberPM :number ^Long 5L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make a Press Conference later than 5 pm","tokens":["Make","a","Press","Conference","later","than","5","pm"]},"agent_utterance":{"described_entities":["entity@1023168411"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (OnDateAfterTime :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :time (NumberPM :number #(Number 5))) :subject (?= #(String \"Press Conference\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"fix the second one","tokens":["fix","the","second","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (?= (PeriodDurationBeforeDateTime (Event.start x0) (PeriodDuration.apply :duration (toHours 1)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (PeriodDurationBeforeDateTime :dateTime ^DateTime (Event.start :obj x0) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 1)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Make it an hour earlier","tokens":["Make","it","an","hour","earlier"]},"agent_utterance":{"described_entities":["entity@434929108"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (?= (PeriodDurationBeforeDateTime :dateTime (:start x0) :periodDuration (PeriodDuration :duration (toHours #(Number 1))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.start_? (DateTime.time_? (?> (Execute (refer (& (^(Time) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Time) EmptyStructConstraint)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?> :reference ^Time (^(Time) Execute :intension ^(CalflowIntension Time) (^(Time) refer :constraint ^(Constraint (CalflowIntension Time)) (^((CalflowIntension Time)) & :c1 ^(Constraint (CalflowIntension Time)) (^(Time) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Time)) (^(Time) extensionConstraint :constraint ^(Constraint Time) (^(Time) EmptyStructConstraint)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Make that later actually","tokens":["Make","that","later","actually"]},"agent_utterance":{"described_entities":["entity@471215151"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :start (Constraint[DateTime] :time (?> (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Time])))))))))))"}}],"tags":{}}
{"dialogue_id":"bbd6146b-fba3-45f6-99a0-78825aed0047","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (Today) (HourMinutePm 2L 30L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 3L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jane\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (HourMinutePm :hours ^Long 2L :minutes ^Long 30L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jane\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Put a meeting with Jane on my calendar today from 2:30 to 3.","tokens":["Put","a","meeting","with","Jane","on","my","calendar","today","from","2",":","30","to","3","."]},"agent_utterance":{"described_entities":["entity@1113313742"],"original_text":"I didn't find anyone named Jane in your address book.","tokens":["I","did","n't","find","anyone","named","Jane","in","your","address","book","."]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Today) :time (HourMinutePm :hours #(Number 2) :minutes #(Number 30.0)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jane\")))))) :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 3)))) :start (?= x0))))))"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jane\"))))))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.duration_? (?= (addDurations (Event.duration x0) (toMinutes 15))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jane\"))))))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (Event.duration :obj x0) :y ^Duration (toMinutes :minutes ^Number 15))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually can can you modify my meeting with Jane today to add a extra 15 minutes?","tokens":["Actually","can","can","you","modify","my","meeting","with","Jane","today","to","add","a","extra","15","minutes","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events.","tokens":["I","did","n't","find","any","events","."]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jane\"))))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :duration (?= (addDurations (:duration x0) (toMinutes #(Number 15)))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"appointment to review my emails\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberAM 8L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"appointment to review my emails\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberAM :number ^Long 8L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I need to make an appointment to review my emails at 8 am on Monday.","tokens":["I","need","to","make","an","appointment","to","review","my","emails","at","8","am","on","Monday","."]},"agent_utterance":{"described_entities":["entity@2010968815"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberAM :number #(Number 8)))) :subject (?= #(String \"appointment to review my emails\"))))))"}}],"tags":{}}
{"dialogue_id":"111a7770-f42c-411a-b2b4-dd9cffe98b0b","turns":[{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"See if you can book a table at Ruth's Chris.","tokens":["See","if","you","can","book","a","table","at","Ruth","'s","Chris","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}}],"tags":{}}
{"dialogue_id":"5cd61f97-b0a2-4da2-8abf-5b935b607fd2","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"movies\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 3L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"movies\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 3L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hey, put movies on friday at 3 pm?","tokens":["Hey",",","put","movies","on","friday","at","3","pm","?"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"movies\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.subject_? (?= \"lunch and a movie\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch and a movie\")))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"wait put lunch and a movie instead.","tokens":["wait","put","lunch","and","a","movie","instead","."]},"agent_utterance":{"described_entities":[],"original_text":"I’ve changed the subject of your event to lunch and a movie.","tokens":["I","’ve","changed","the","subject","of","your","event","to","lunch","and","a","movie","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :subject (?= #(String \"lunch and a movie\"))))))"}}],"tags":{}}
{"dialogue_id":"5ab2e5a3-423f-40ad-bc88-a2d42ff65417","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofPreviousMonth (February)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofPreviousMonth :month ^Month (February)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you find all my meetings during last february?","tokens":["Can","you","find","all","my","meetings","during","last","february","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events last February.","tokens":["No",",","I","did","n't","find","any","events","last","February","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (FullMonthofPreviousMonth :month #(Month \"FEBRUARY\")))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofPreviousMonth (March)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofPreviousMonth :month ^Month (March)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Did I do anything last March?","tokens":["Did","I","do","anything","last","March","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events last March.","tokens":["No",",","I","did","n't","find","any","events","last","March","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (FullMonthofPreviousMonth :month #(Month \"MARCH\")))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofPreviousMonth (January)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofPreviousMonth :month ^Month (January)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Did I have anything in the last Jan?","tokens":["Did","I","have","anything","in","the","last","Jan","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events last January.","tokens":["No",",","I","did","n't","find","any","events","last","January","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (FullMonthofPreviousMonth :month #(Month \"JANUARY\")))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"0f6cb48a-a367-46ee-a86c-8b690f6ef5bd","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"oil change\")) (Event.start_? (DateTime.date_? (ThisWeekend)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"oil change\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (ThisWeekend)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Schedule an oil change that isn't during the weekend.","tokens":["Schedule","an","oil","change","that","is","n't","during","the","weekend","."]},"agent_utterance":{"described_entities":["entity@327037061"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (ThisWeekend)) :subject (?= #(String \"oil change\"))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"tire rotation\")) (Event.start_? (& (DateTime.date_? (NextWeekList)) (DateTime.date_? (Date.dayOfWeek_? (negate (Weekend)))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"tire rotation\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) & :c1 ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (NextWeekList)) :c2 ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) negate :constraint ^(Constraint DayOfWeek) (Weekend)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Either works for me! Could you also put me down for a tire rotation sometime next week that isn't on the weekend","tokens":["Either","works","for","me","!","Could","you","also","put","me","down","for","a","tire","rotation","sometime","next","week","that","is","n't","on","the","weekend"]},"agent_utterance":{"described_entities":["entity@1150565110"],"original_text":"I've put that on your calendar on Sunday the 26th from 10:00 to 10:30 AM. __BREAK Does one of these work?","tokens":["I","'ve","put","that","on","your","calendar","on","Sunday","the","26","th","from","10",":","00","to","10",":","30","AM",".","Does","one","of","these","work","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (andConstraint (Constraint[DateTime] :date (NextWeekList)) (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (negate (Weekend))))) :subject (?= #(String \"tire rotation\")))))))"}},{"lispress":"(do (Yield (Execute (ChooseCreateEventFromConstraint (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (?= (Tuesday))))) (refer (^(Dynamic) ActionIntensionConstraint))))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"House Jams\")) (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (negate (Weekend))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) ?= :reference ^DayOfWeek (Tuesday))))) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint))))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"House Jams\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) negate :constraint ^(Constraint DayOfWeek) (Weekend))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Tuesday works, also i need to add an event not during the weekend called House Jams","tokens":["Tuesday","works",",","also","i","need","to","add","an","event","not","during","the","weekend","called","House","Jams"]},"agent_utterance":{"described_entities":["entity@679182611"],"original_text":"I've put that on your calendar. __BREAK Does one of these work?","tokens":["I","'ve","put","that","on","your","calendar",".","Does","one","of","these","work","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (?= #(DayOfWeek \"TUESDAY\"))))) :intension (refer (ActionIntensionConstraint))))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (negate (Weekend)))) :subject (?= #(String \"House Jams\")))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Spa Day\")) (Event.start_? (DateTime.date_? (Date.dayOfWeek_? (negate (Weekend)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Spa Day\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (Date.dayOfWeek_? :date ^(Constraint DayOfWeek) (^(DayOfWeek) negate :constraint ^(Constraint DayOfWeek) (Weekend)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"i need to also have a Spa Day but not over the weekend","tokens":["i","need","to","also","have","a","Spa","Day","but","not","over","the","weekend"]},"agent_utterance":{"described_entities":["entity@425134300"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (Constraint[Date] :dayOfWeek (negate (Weekend)))) :subject (?= #(String \"Spa Day\"))))))"}}],"tags":{}}
{"dialogue_id":"008db40d-e9fd-4d15-99de-f396ca7b8137","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Yamato\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Yamato\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"Can you find any upcoming events with Yamato?","tokens":["Can","you","find","any","upcoming","events","with","Yamato","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have one event on your calendar. Your \"read Harry Potter\" is tomorrow from 12:00 to 12:30 PM.","tokens":["You","have","one","event","on","your","calendar",".","Your","\"","read","Harry","Potter","\"","is","tomorrow","from","12",":","00","to","12",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Yamato\"))))))","do-not-train":""}},{"lispress":"(UserPauseResponse)","expansion_lispress":null,"fully_typed_lispress":"^Unit (UserPauseResponse)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Hold on a moment while I figure out what else I need from you.","tokens":["Hold","on","a","moment","while","I","figure","out","what","else","I","need","from","you","."]},"agent_utterance":{"described_entities":[],"original_text":"No problem.","tokens":["No","problem","."]},"tags":{"original_lispress":"(UserPauseResponse)"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Ok, I think I'm done for now. Bye!","tokens":["Ok",",","I","think","I","'m","done","for","now",".","Bye","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"bdcebd32-fa42-474a-90e3-dd3e72b42398","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (NextDOW (Friday)) (^(Event) EmptyStructConstraint)) (Evening))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Evening))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Find out if I have any appointment this Friday evening","tokens":["Find","out","if","I","have","any","appointment","this","Friday","evening"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events tomorrow evening.","tokens":["I","did","n't","find","any","events","tomorrow","evening","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event])) :timeRange (Evening))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Anything for Saturday?","tokens":["Anything","for","Saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"You have one event on your calendar. Your \"Family Lunch\" is on Saturday the 9th from 12:00 to 2:00 PM.","tokens":["You","have","one","event","on","your","calendar",".","Your","\"","Family","Lunch","\"","is","on","Saturday","the","9","th","from","12",":","00","to","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event]))))"}},{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"lunch\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Where is my lunch on Saturday?","tokens":["Where","is","my","lunch","on","Saturday","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"lunch\" on Saturday is located at In-N-Out.","tokens":["The","event","matching","\"","lunch","\"","on","Saturday","is","located","at","In","-","N","-","Out","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"lunch\")))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"lunch\"))))))) (Event.location_? (?= (LocationKeyphrase.apply \"mom's\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"mom's\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Set the lunch on Saturday to be at mom's","tokens":["Set","the","lunch","on","Saturday","to","be","at","mom","'s"]},"agent_utterance":{"described_entities":["entity@735632136"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"lunch\")))))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"mom's\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes.","tokens":["Yes","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"lunch with family\" to be at mom's.","tokens":["I","'ve","changed","\"","lunch","with","family","\"","to","be","at","mom","'s","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"b21b0edc-f09a-4944-94b8-bebc896073af","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"Family Road Trip\")) (Event.location_? (?= (LocationKeyphrase.apply \"Phoenix\")))))))) (Event.location_? (?= (LocationKeyphrase.apply \"Chicago\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Family Road Trip\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Phoenix\")))))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Chicago\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Change the location of the Family Road Trip from Phoenix to Chicago.","tokens":["Change","the","location","of","the","Family","Road","Trip","from","Phoenix","to","Chicago","."]},"agent_utterance":{"described_entities":["entity@531405966"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Phoenix\")) :subject (?~= #(String \"Family Road Trip\"))))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"Chicago\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"Family Game Night\")) (Event.location_? (?= (LocationKeyphrase.apply \"Chicago\")))))))) (Event.location_? (?= (LocationKeyphrase.apply \"South Bend\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Family Game Night\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Chicago\")))))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"South Bend\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you change it shows that the Family Game Night is Chicago but it should be South Bend?","tokens":["Can","you","change","it","shows","that","the","Family","Game","Night","is","Chicago","but","it","should","be","South","Bend","?"]},"agent_utterance":{"described_entities":["entity@1532302520"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Chicago\")) :subject (?~= #(String \"Family Game Night\"))))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"South Bend\"))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"trivia\")))))) (Event.location_? (?= (LocationKeyphrase.apply \"Mills Creek Brewery\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"trivia\")))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Mills Creek Brewery\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Change trivia location to Mills Creek Brewery.","tokens":["Change","trivia","location","to","Mills","Creek","Brewery","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events matching \"trivia\".","tokens":["I","did","n't","find","any","events","matching","\"","trivia","\"","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"trivia\"))))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"Mills Creek Brewery\"))))))"}}],"tags":{}}
{"dialogue_id":"138d224d-3545-434e-9f63-7219f8694258","turns":[{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.GoodforGroups) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Blue Hill in New York\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.GoodforGroups) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Blue Hill in New York\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do you know if Blue Hill in New York is good for groups?","tokens":["Do","you","know","if","Blue","Hill","in","New","York","is","good","for","groups","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"GoodforGroups\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Blue Hill in New York\"))))))"}},{"lispress":"(Yield (FindPlaceMultiResults (LocationKeyphrase.apply \"Panda Express in Truckee\")))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(PlaceSearchResponse) Yield :output ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Panda Express in Truckee\")))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Find me a Panda Express in Truckee","tokens":["Find","me","a","Panda","Express","in","Truckee"]},"agent_utterance":{"described_entities":[],"original_text":"I found one option.","tokens":["I","found","one","option","."]},"tags":{"original_lispress":"(Yield :output (FindPlaceMultiResults :place #(LocationKeyphrase \"Panda Express in Truckee\")))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.GoodforGroups) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.GoodforGroups) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Is it good for groups?","tokens":["Is","it","good","for","groups","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Panda Express is good for groups.","tokens":["Yes",",","Panda","Express","is","good","for","groups","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"GoodforGroups\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}}],"tags":{}}
{"dialogue_id":"dc9613dc-5687-4c33-994e-cd4b1ff6705c","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 5L)))) (Event.location_? (?= (LocationKeyphrase.apply \"Stanford University\")))) (Event.attendees_? (AttendeeListHasRecipient (FindManager (toRecipient (CurrentUser)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 5L)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Stanford University\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (FindManager :recipient ^Recipient (toRecipient :person ^Person (CurrentUser)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make a meeting at Stanford University with my boss at 5PM today.","tokens":["Make","a","meeting","at","Stanford","University","with","my","boss","at","5","PM","today","."]},"agent_utterance":{"described_entities":["entity@1239352361"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (FindManager :recipient (toRecipient (CurrentUser)))) :location (?= #(LocationKeyphrase \"Stanford University\")) :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 5))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"it's right good thanks","tokens":["it","'s","right","good","thanks"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (IsHot (WeatherForEvent (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (IsHot :table ^WeatherTable (WeatherForEvent :event ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Will it be hot that day?","tokens":["Will","it","be","hot","that","day","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The high temperature was 0.00 °F for \"Meeting with Dan Schoffel and Damon Straeter\" on Monday from 5:00 to 5:30.","tokens":["Yes",".","The","high","temperature","was","0",".","00","°","F","for","\"","Meeting","with","Dan","Schoffel","and","Damon","Straeter","\"","on","Monday","from","5",":","00","to","5",":","30","."]},"tags":{"original_lispress":"(Yield :output (IsHot :table (WeatherForEvent :event (Execute :intension (refer (extensionConstraint (Constraint[Event])))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Thanks","tokens":["Thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (IsWindy (WeatherQueryApi (AtPlace (FindPlace (Event.location x0))) (DateTime.date_? (?= (DateTime.date (Event.start x0))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(Boolean) Yield :output ^Boolean (IsWindy :table ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (Event.location :obj x0))) :time ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Will we see wind that day?","tokens":["Will","we","see","wind","that","day","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes. The average wind speed was 0.00 mph on Monday.","tokens":["Yes",".","The","average","wind","speed","was","0",".","00","mph","on","Monday","."]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (IsWindy :table (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase (:location x0))) :time (Constraint[DateTime] :date (?= (:date (:start x0))))))))"}}],"tags":{}}
{"dialogue_id":"884396a4-d119-4524-b6e3-193312d39df8","turns":[{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Today) (Event.subject_? (?~= \"lunch\"))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Where is the lunch today?","tokens":["Where","is","the","lunch","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"lunch\" is located at Mod Pizza.","tokens":["The","event","matching","\"","lunch","\"","is","located","at","Mod","Pizza","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Today) :event (Constraint[Event] :subject (?~= #(String \"lunch\")))))))))"}},{"lispress":"(Yield (Event.end (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.end :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What time does it end?","tokens":["What","time","does","it","end","?"]},"agent_utterance":{"described_entities":[],"original_text":"The \"Lunch\" ended today at 3:30 PM.","tokens":["The","\"","Lunch","\"","ended","today","at","3",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (:end (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))"}},{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Ok what about the meeting with Lisa?","tokens":["Ok","what","about","the","meeting","with","Lisa","?"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"PowerPoint Presentation\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Thursday)) (NumberPM 4L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"PowerPoint Presentation\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :time ^Time (NumberPM :number ^Long 4L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Schedule a 4 pm PowerPoint Presentation on Thursday.","tokens":["Schedule","a","4","pm","PowerPoint","Presentation","on","Thursday","."]},"agent_utterance":{"described_entities":["entity@1906840574"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :time (NumberPM :number #(Number 4)))) :subject (?= #(String \"PowerPoint Presentation\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes it does.","tokens":["Yes","it","does","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"f9c873d0-abe5-4d1c-8461-75921d62bf1a","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 7L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tyler\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 7L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tyler\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Open calendar and add \"Dinner tomorrow @ 7pm with Tyler\"","tokens":["Open","calendar","and","add","\"","Dinner","tomorrow","@","7","pm","with","Tyler","\""]},"agent_utterance":{"described_entities":["entity@1981074413"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tyler\")))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 7)))) :subject (?= #(String \"Dinner\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"it's all very well continuous to determine","tokens":["it","'s","all","very","well","continuous","to","determine"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"43fc3fce-29b9-444e-a835-5c55b9d1b4f5","turns":[{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.Casual) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Blue Coyote in Truckee\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.Casual) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Blue Coyote in Truckee\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Is Blue Coyote in Truckee casual?","tokens":["Is","Blue","Coyote","in","Truckee","casual","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"Casual\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Blue Coyote in Truckee\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.Casual) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Wild River Grille in Reno\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.Casual) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Wild River Grille in Reno\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Does Wild River Grille in Reno a casual dress code?","tokens":["Does","Wild","River","Grille","in","Reno","a","casual","dress","code","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"Casual\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Wild River Grille in Reno\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.Casual) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Ceol in Reno\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.Casual) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Ceol in Reno\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Ok is the dress code in Ceol in Reno casual?","tokens":["Ok","is","the","dress","code","in","Ceol","in","Reno","casual","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"Casual\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Ceol in Reno\"))))))"}}],"tags":{}}
{"dialogue_id":"d892bc26-7aa9-4d54-9508-fab894c54a7c","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 11L)))) (Event.showAs_? (?= (ShowAsStatus.WorkingElsewhere)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 11L)))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.WorkingElsewhere)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set a meeting tomorrow at 11 am as Working Elsewhere.","tokens":["Set","a","meeting","tomorrow","at","11","am","as","Working","Elsewhere","."]},"agent_utterance":{"described_entities":["entity@610926967"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :showAs (?= #(ShowAsStatus \"WorkingElsewhere\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 11))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTimeConstraint (Afternoon) (Today))) (Event.duration_? (?= (toHours 2)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTimeConstraint :constraint ^(Constraint Time) (Afternoon) :date ^Date (Today))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make a 2 hour meeting this afternoon.","tokens":["Make","a","2","hour","meeting","this","afternoon","."]},"agent_utterance":{"described_entities":["entity@240142587"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toHours #(Number 2))) :start (DateTimeConstraint :constraint (Afternoon) :date (Today))))))"}}],"tags":{}}
{"dialogue_id":"7665eb59-55fa-4fed-9170-3bc42b509bf9","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"There is going to be a parade this weekend. I want to go with the family.","tokens":["There","is","going","to","be","a","parade","this","weekend",".","I","want","to","go","with","the","family","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"looks great and iam metting next week set remainder","tokens":["looks","great","and","iam","metting","next","week","set","remainder"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}},{"lispress":"(FenceOther)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceOther)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"10 am is is exactly correct","tokens":["10","am","is","is","exactly","correct"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't handle that yet.","tokens":["Sorry",",","I","ca","n't","handle","that","yet","."]},"tags":{"original_lispress":"(FenceOther)"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"appointment\")) (Event.start_? (DateTime.time_? (?= (NumberAM 10L))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"appointment\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 10L))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Which day did that 10 Am appointment get marked down as?","tokens":["Which","day","did","that","10","Am","appointment","get","marked","down","as","?"]},"agent_utterance":{"described_entities":[],"original_text":"It starts on Monday the 8th at 10:00 AM.","tokens":["It","starts","on","Monday","the","8","th","at","10",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 10.0)))) :subject (?~= #(String \"appointment\"))))))))"}}],"tags":{}}
{"dialogue_id":"4294113e-0ecb-4f25-b916-04cf96014a8f","turns":[{"lispress":"(WeatherPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (WeatherPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"So I have a question about the weather?","tokens":["So","I","have","a","question","about","the","weather","?"]},"agent_utterance":{"described_entities":[],"original_text":"Hello. I can help you with weather questions. What would you like to know?","tokens":["Hello",".","I","can","help","you","with","weather","questions",".","What","would","you","like","to","know","?"]},"tags":{"original_lispress":"(WeatherPleasantry)"}},{"lispress":"(WeatherPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (WeatherPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Please help me with the weather","tokens":["Please","help","me","with","the","weather"]},"agent_utterance":{"described_entities":[],"original_text":"Hello. I can help you with weather questions. What would you like to know?","tokens":["Hello",".","I","can","help","you","with","weather","questions",".","What","would","you","like","to","know","?"]},"tags":{"original_lispress":"(WeatherPleasantry)"}},{"lispress":"(WeatherPleasantry)","expansion_lispress":null,"fully_typed_lispress":"^Unit (WeatherPleasantry)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"What different weather patterns are there?","tokens":["What","different","weather","patterns","are","there","?"]},"agent_utterance":{"described_entities":[],"original_text":"Hello. I can help you with weather questions. What would you like to know?","tokens":["Hello",".","I","can","help","you","with","weather","questions",".","What","would","you","like","to","know","?"]},"tags":{"original_lispress":"(WeatherPleasantry)"}}],"tags":{}}
{"dialogue_id":"f23e2a4a-6b11-49ce-9b18-ff11dd4be7ce","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 4L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 4L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Make me an event tomorrow at 4 am","tokens":["Make","me","an","event","tomorrow","at","4","am"]},"agent_utterance":{"described_entities":["entity@324149451"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 4))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (ConvertTimeToPM (Execute (refer (& (^(Time) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Time) EmptyStructConstraint))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (ConvertTimeToPM :time ^Time (^(Time) Execute :intension ^(CalflowIntension Time) (^(Time) refer :constraint ^(Constraint (CalflowIntension Time)) (^((CalflowIntension Time)) & :c1 ^(Constraint (CalflowIntension Time)) (^(Time) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Time)) (^(Time) extensionConstraint :constraint ^(Constraint Time) (^(Time) EmptyStructConstraint))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I meant PM.","tokens":["I","meant","PM","."]},"agent_utterance":{"described_entities":["entity@1291037792"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (ConvertTimeToPM :time (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Time]))))))))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dinner party\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 6L)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner party\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 6L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"looks great! I also need to schedule a dinner party for 6 tomorrow","tokens":["looks","great","!","I","also","need","to","schedule","a","dinner","party","for","6","tomorrow"]},"agent_utterance":{"described_entities":["entity@374292618"],"original_text":"I've put that on your calendar. __BREAK Is this what you're looking for?","tokens":["I","'ve","put","that","on","your","calendar",".","Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"dinner party\")))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (ConvertTimeToAM (Execute (refer (& (^(Time) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Time) EmptyStructConstraint))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (ConvertTimeToAM :time ^Time (^(Time) Execute :intension ^(CalflowIntension Time) (^(Time) refer :constraint ^(Constraint (CalflowIntension Time)) (^((CalflowIntension Time)) & :c1 ^(Constraint (CalflowIntension Time)) (^(Time) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Time)) (^(Time) extensionConstraint :constraint ^(Constraint Time) (^(Time) EmptyStructConstraint))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"oh i meant AM, because I have dinner in the morning","tokens":["oh","i","meant","AM",",","because","I","have","dinner","in","the","morning"]},"agent_utterance":{"described_entities":["entity@491716404"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (ConvertTimeToAM :time (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Time]))))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yes, thank you","tokens":["Yes",",","thank","you"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"business lunch\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"business lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":5,"user_utterance":{"original_text":"Make me a business lunch tomorrow at 3 PM.","tokens":["Make","me","a","business","lunch","tomorrow","at","3","PM","."]},"agent_utterance":{"described_entities":["entity@103609843"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"business lunch\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (ConvertTimeToAM (Execute (refer (& (^(Time) roleConstraint (Path.apply \"start\")) (extensionConstraint (^(Time) EmptyStructConstraint))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (ConvertTimeToAM :time ^Time (^(Time) Execute :intension ^(CalflowIntension Time) (^(Time) refer :constraint ^(Constraint (CalflowIntension Time)) (^((CalflowIntension Time)) & :c1 ^(Constraint (CalflowIntension Time)) (^(Time) roleConstraint :path ^Path (Path.apply :inner ^String \"start\")) :c2 ^(Constraint (CalflowIntension Time)) (^(Time) extensionConstraint :constraint ^(Constraint Time) (^(Time) EmptyStructConstraint))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":6,"user_utterance":{"original_text":"Can we actually change that to be AM?","tokens":["Can","we","actually","change","that","to","be","AM","?"]},"agent_utterance":{"described_entities":["entity@1541934146"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (ConvertTimeToAM :time (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) #(Path \"start\"))) (extensionConstraint (Constraint[Time]))))))))))))"}}],"tags":{}}
{"dialogue_id":"92a836ba-94a0-4b99-813f-24457d163745","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateTime (Now) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (Now) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What event is happening right now?","tokens":["What","event","is","happening","right","now","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 event right now. It's the \"Dinner\" today from 7:00 to 8:30 PM.","tokens":["I","found","1","event","right","now",".","It","'s","the","\"","Dinner","\"","today","from","7",":","00","to","8",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (Now) :event (Constraint[Event]))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (Now) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (Now) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Cancel the event right now","tokens":["Cancel","the","event","right","now"]},"agent_utterance":{"described_entities":["entity@269433043"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (Now) :event (Constraint[Event])))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yes thats the right one","tokens":["yes","that","s","the","right","one"]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event today at 10:58.","tokens":["I","'ve","deleted","your","event","today","at","10",":","58","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (EventOnDateTime (adjustByPeriodDuration (Now) (PeriodDuration.apply :duration (toHours 44))) (^(Event) EmptyStructConstraint))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Now) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 44))) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What do I have in 44 hours?","tokens":["What","do","I","have","in","44","hours","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found 1 event on your calendar at 7:26 PM. It's \"Dinner\" from 7:00 to 9:00 PM.","tokens":["I","found","1","event","on","your","calendar","at","7",":","26","PM",".","It","'s","\"","Dinner","\"","from","7",":","00","to","9",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (adjustByPeriodDuration (Now) (PeriodDuration :duration (toHours #(Number 44)))) :event (Constraint[Event]))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (Execute (refer (& (^(Event) roleConstraint (numberToIndexPath 1L)) (extensionConstraint (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^((CalflowIntension Event)) & :c1 ^(Constraint (CalflowIntension Event)) (^(Event) roleConstraint :path ^Path (numberToIndexPath :number ^Long 1L)) :c2 ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Cancel the first event","tokens":["Cancel","the","first","event"]},"agent_utterance":{"described_entities":["entity@253326449"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (Execute :intension (refer (andConstraint (roleConstraint (append #(List[Path] []) (numberToIndexPath #(Number 1)))) (extensionConstraint (Constraint[Event])))))))))"}}],"tags":{}}
{"dialogue_id":"4acff939-7b8b-496d-a20a-dcb17cdd4093","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (^(Event) EmptyStructConstraint) (FullMonthofMonth (Date.month (Today))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (Date.month :obj ^Date (Today))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"How many events do I have this month?","tokens":["How","many","events","do","I","have","this","month","?"]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any matching events on your calendar.","tokens":["I","did","n't","find","any","matching","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event]) :range (FullMonthofMonth :month (:month (Today))))))"}}],"tags":{}}
{"dialogue_id":"e027a203-8c68-4cb5-ba56-eaeaefc7cafa","turns":[{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (NextDOW (Wednesday)) (NumberPM 12L)) (Event.subject_? (?~= \"lunch\"))))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (?= (DateAtTimeWithDefaults (ClosestDayOfWeek (DateTime.date (Event.start x0)) (Thursday)) (NumberPM 12L))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (NumberPM :number ^Long 12L)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\"))))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (ClosestDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :dow ^DayOfWeek (Thursday)) :time ^Time (NumberPM :number ^Long 12L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"change my lunch on Wednesday at 12pm to Thursday at 12pm please.","tokens":["change","my","lunch","on","Wednesday","at","12","pm","to","Thursday","at","12","pm","please","."]},"agent_utterance":{"described_entities":["entity@1698575207"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (NumberPM :number #(Number 12))) :event (Constraint[Event] :subject (?~= #(String \"lunch\")))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (ClosestDayOfWeek :date (:date (:start x0)) :dow #(DayOfWeek \"THURSDAY\")) :time (NumberPM :number #(Number 12)))))))))","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.id_? (negate (?= (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))) (Event.subject_? (?~= \"lunch\")))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))) :c2 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"Do I have any other lunch appointments scheduled?","tokens":["Do","I","have","any","other","lunch","appointments","scheduled","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one other event. It's a \"lunch\" on Friday from 11:30 to 12:00 PM.","tokens":["Yes",",","I","found","one","other","event",".","It","'s","a","\"","lunch","\"","on","Friday","from","11",":","30","to","12",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :id (negate (?= (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))) :subject (?~= #(String \"lunch\")))))) #(Number 0)))","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"ok thank you very much","tokens":["ok","thank","you","very","much"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"lunch\")) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alyce\"))))))))) (Event.duration_? (?= (toHours 1))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alyce\"))))))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 1))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Can you set the duration of lunch with Alyce to only one hour please.","tokens":["Can","you","set","the","duration","of","lunch","with","Alyce","to","only","one","hour","please","."]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events matching \"lunch\" on your calendar.","tokens":["I","did","n't","find","any","events","matching","\"","lunch","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alyce\"))) :subject (?~= #(String \"lunch\"))))))) :update (Constraint[Event] :duration (?= (toHours #(Number 1)))))))","do-not-train":""}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":4,"user_utterance":{"original_text":"it sounds very good what you have done","tokens":["it","sounds","very","good","what","you","have","done"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"73e17346-ff19-41c1-af83-e753c3483929","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"sleeping\")) (Event.start_? (DateTime.date_? (?= (Tomorrow))))) (Event.location_? (& (?= (LocationKeyphrase.apply \"NERD\")) (roomRequest)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"sleeping\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) & :c1 ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"NERD\")) :c2 ^(Constraint LocationKeyphrase) (roomRequest)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"I will be sleeping in a NERD tomorrow, can you get me a room?","tokens":["I","will","be","sleeping","in","a","NERD","tomorrow",",","can","you","get","me","a","room","?"]},"agent_utterance":{"described_entities":["entity@1327926710"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (andConstraint (?= #(LocationKeyphrase \"NERD\")) (roomRequest)) :start (Constraint[DateTime] :date (?= (Tomorrow))) :subject (?= #(String \"sleeping\"))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Looks legit","tokens":["Looks","legit"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar on Friday the 18th from 1:00 PM to 1:30 PM.","tokens":["I","'ve","put","that","on","your","calendar","on","Friday","the","18","th","from","1",":","00","PM","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"work on production presentation\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L))))) (Event.location_? (& (?= (LocationKeyphrase.apply \"Bellevue\")) (roomRequest)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"work on production presentation\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) & :c1 ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Bellevue\")) :c2 ^(Constraint LocationKeyphrase) (roomRequest)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I want to get a room at Bellevue to work on production presentation at 3 tomorrow.","tokens":["I","want","to","get","a","room","at","Bellevue","to","work","on","production","presentation","at","3","tomorrow","."]},"agent_utterance":{"described_entities":["entity@1511891267"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (andConstraint (?= #(LocationKeyphrase \"Bellevue\")) (roomRequest)) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"work on production presentation\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"That is amazing","tokens":["That","is","amazing"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Dentist Exams\")) (Event.start_? (DateTime.date_? (?= (Tomorrow))))) (Event.location_? (& (?= (LocationKeyphrase.apply \"Seattle\")) (roomRequest)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Dentist Exams\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) & :c1 ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Seattle\")) :c2 ^(Constraint LocationKeyphrase) (roomRequest)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"I also need a room in Seattle for my Dentist Exams tomorrow","tokens":["I","also","need","a","room","in","Seattle","for","my","Dentist","Exams","tomorrow"]},"agent_utterance":{"described_entities":["entity@196026836"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (andConstraint (?= #(LocationKeyphrase \"Seattle\")) (roomRequest)) :start (Constraint[DateTime] :date (?= (Tomorrow))) :subject (?= #(String \"Dentist Exams\"))))))"}}],"tags":{}}
{"dialogue_id":"327a2491-827c-4ef2-bac0-b64a121fcfd2","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Monday)) (NumberAM 9L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 12L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :time ^Time (NumberAM :number ^Long 9L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 12L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add a meeting for Monday between 9-12","tokens":["Add","a","meeting","for","Monday","between","9","-","12"]},"agent_utterance":{"described_entities":["entity@1461589051"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :time (NumberAM :number #(Number 9)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 12)))) :start (?= x0))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (& (Event.start_? (DateTime.time_? (?= (NumberAM 8L)))) (Event.end_? (DateTime.time_? (?= (NumberPM 1L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 8L)))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 1L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Make the time 8AM-1PM","tokens":["Make","the","time","8","AM-1","PM"]},"agent_utterance":{"described_entities":["entity@1063405127"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 1)))) :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 8))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Schedule that","tokens":["Schedule","that"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (NextDOW (Wednesday)) (NumberPM 2L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"stop by my realtor's office\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 4L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (NumberPM :number ^Long 2L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"stop by my realtor's office\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 4L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Great, and can you also add that I need to stop at my realtor's office between 2 and 4 pm on next Wednesday?","tokens":["Great",",","and","can","you","also","add","that","I","need","to","stop","at","my","realtor","'s","office","between","2","and","4","pm","on","next","Wednesday","?"]},"agent_utterance":{"described_entities":["entity@929339937"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (NumberPM :number #(Number 2)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 4)))) :start (?= x0) :subject (?= #(String \"stop by my realtor's office\")))))))"}},{"lispress":"(let (x0 (Execute (^(Dynamic) ConfirmAndReturnAction))) (do (Yield x0) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"stop by Trader Joe's\")) (Event.start_? (?= (adjustByPeriodDuration (Event.end (^(Dynamic) item x0)) (PeriodDuration.apply :duration (toHours 1)))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) ^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output x0) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"stop by Trader Joe's\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (adjustByPeriodDuration :datetime ^DateTime (Event.end :obj ^Event (^(Dynamic) item :t x0)) :periodDuration ^PeriodDuration (PeriodDuration.apply :duration ^Duration (toHours :hours ^Number 1)))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Yeah, and can you add stop by Trader Joe's an hour after that as well?","tokens":["Yeah",",","and","can","you","add","stop","by","Trader","Joe","'s","an","hour","after","that","as","well","?"]},"agent_utterance":{"described_entities":["entity@1972538360"],"original_text":"I've put that on your calendar. __BREAK Is this good?","tokens":["I","'ve","put","that","on","your","calendar",".","Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (ConfirmAndReturnAction))) (do (Yield :output x0) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (adjustByPeriodDuration (:end (:item x0)) (PeriodDuration :duration (toHours #(Number 1))))) :subject (?= #(String \"stop by Trader Joe's\"))))))))"}}],"tags":{}}
{"dialogue_id":"2753df63-ec18-41fe-b4cc-09d805fee9cb","turns":[{"lispress":"(Yield (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"graduation party\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"graduation party\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Who's invited to my graduation party next year?","tokens":["Who","'s","invited","to","my","graduation","party","next","year","?"]},"agent_utterance":{"described_entities":[],"original_text":"The attendees for the event matching \"graduation party\" are: Abby Gonano, Kim Possible and 7 more.","tokens":["The","attendees","for","the","event","matching","\"","graduation","party","\"","are",":","Abby","Gonano",",","Kim","Possible","and","7","more","."]},"tags":{"original_lispress":"(Yield :output (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"graduation party\"))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"team meeting\")) (Event.start_? (DateTime.date_? (?= (MDY 14L (June) (NextYear)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"team meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MDY :day ^Long 14L :month ^Month (June) :year ^Year (NextYear)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"I want to have a team meeting on June 14th next year.","tokens":["I","want","to","have","a","team","meeting","on","June","14","th","next","year","."]},"agent_utterance":{"described_entities":["entity@1851106648"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (MDY :day #(Number 14) :month #(Month \"JUNE\") :year (NextYear)))) :subject (?= #(String \"team meeting\"))))))"}}],"tags":{}}
{"dialogue_id":"1fcd226f-13d7-4c7b-a5ba-01d8b778795e","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Tuesday)) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Tuesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"cancel my meeting on Tuesday please","tokens":["cancel","my","meeting","on","Tuesday","please"]},"agent_utterance":{"described_entities":["entity@1947830108"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"TUESDAY\")) :event (Constraint[Event])))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventOnDate (ClosestDayOfWeek (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (Wednesday)) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventOnDate :date ^Date (ClosestDayOfWeek :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :dow ^DayOfWeek (Wednesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually cancel the meeting on Wednesday","tokens":["Actually","cancel","the","meeting","on","Wednesday"]},"agent_utterance":{"described_entities":["entity@1069340113"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventOnDate :date (ClosestDayOfWeek :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :dow #(DayOfWeek \"WEDNESDAY\")) :event (Constraint[Event])))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That's the one! Yes cancel it, please.","tokens":["That","'s","the","one","!","Yes","cancel","it",",","please","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event on October 2nd.","tokens":["I","'ve","deleted","your","event","on","October","2","nd","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"business dinner\")))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"williams\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"business dinner\")))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"williams\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"please put the business dinner with williams","tokens":["please","put","the","business","dinner","with","williams"]},"agent_utterance":{"described_entities":["entity@444361473"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"business dinner\"))))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"williams\"))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Meg\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Meg\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Can you change it to be with Meg?","tokens":["Can","you","change","it","to","be","with","Meg","?"]},"agent_utterance":{"described_entities":["entity@21028102"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Meg\"))))))))))"}}],"tags":{}}
{"dialogue_id":"590aff7c-b607-4f8a-a351-39975a751745","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (Event.location_? (negate (?= (LocationKeyphrase.apply \"Las Vegas\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) negate :constraint ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Las Vegas\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What events do I have on my calendar that is not in Las Vegas?","tokens":["What","events","do","I","have","on","my","calendar","that","is","not","in","Las","Vegas","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one matching event on your calendar. It's \"Appointment\" on Saturday from 6:00 to 6:30 PM.","tokens":["I","found","one","matching","event","on","your","calendar",".","It","'s","\"","Appointment","\"","on","Saturday","from","6",":","00","to","6",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (negate (?= #(LocationKeyphrase \"Las Vegas\"))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.location_? (negate (?= (LocationKeyphrase.apply \"Tokyo\"))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) negate :constraint ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Tokyo\"))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do you have any other events that are not in Tokyo?","tokens":["Do","you","have","any","other","events","that","are","not","in","Tokyo","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one matching event on your calendar. It's \"Appointment\" on Thursday the 23rd from 5:00 to 5:30 PM.","tokens":["Yes",",","I","found","one","matching","event","on","your","calendar",".","It","'s","\"","Appointment","\"","on","Thursday","the","23","rd","from","5",":","00","to","5",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (negate (?= #(LocationKeyphrase \"Tokyo\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.location_? (negate (?= (LocationKeyphrase.apply \"Reno\"))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) negate :constraint ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Reno\"))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Do I have any Events that aren't in Reno today?","tokens":["Do","I","have","any","Events","that","are","n't","in","Reno","today","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found 2 matching events on your calendar. The first is \"Appointment\" tomorrow from 6:00 to 6:30 PM.","tokens":["Yes",",","I","found","2","matching","events","on","your","calendar",".","The","first","is","\"","Appointment","\"","tomorrow","from","6",":","00","to","6",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :location (negate (?= #(LocationKeyphrase \"Reno\"))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"f3a13a53-0ebe-4ad0-9294-2bb725674b70","turns":[{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Sunday)) (Event.subject_? (?~= \"Brunch\"))))))) (ResponseStatusType.TentativelyAccepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Sunday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Brunch\"))))))) :response ^ResponseStatusType (ResponseStatusType.TentativelyAccepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you tell me who said maybe to the Brunch on Sunday?","tokens":["Can","you","tell","me","who","said","maybe","to","the","Brunch","on","Sunday","?"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have tentatively accepted \"Brunch\": Kim Possible.","tokens":["Here","is","the","list","of","attendees","who","have","tentatively","accepted","\"","Brunch","\"",":","Kim","Possible","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SUNDAY\")) :event (Constraint[Event] :subject (?~= #(String \"Brunch\")))))))) :response #(ResponseStatusType \"TentativelyAccepted\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Beach Day\")))))) (ResponseStatusType.TentativelyAccepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Beach Day\")))))) :response ^ResponseStatusType (ResponseStatusType.TentativelyAccepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"who have tentatively accepted Beach Day","tokens":["who","have","tentatively","accepted","Beach","Day"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have tentatively accepted \"Beach Day\": Kim.","tokens":["Here","is","the","list","of","attendees","who","have","tentatively","accepted","\"","Beach","Day","\"",":","Kim","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Beach Day\"))))))) :response #(ResponseStatusType \"TentativelyAccepted\")))"}},{"lispress":"(Yield (AttendeesWithResponse (Event.attendees (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Happy Hour\")))))) (ResponseStatusType.TentativelyAccepted)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^((List Attendee)) Yield :output ^(List Attendee) (AttendeesWithResponse :attendees ^(List Attendee) (Event.attendees :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Happy Hour\")))))) :response ^ResponseStatusType (ResponseStatusType.TentativelyAccepted)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Who may come to Happy Hour","tokens":["Who","may","come","to","Happy","Hour"]},"agent_utterance":{"described_entities":[],"original_text":"Here is the list of attendees who have tentatively accepted \"Happy Hour\": Jake Cobb.","tokens":["Here","is","the","list","of","attendees","who","have","tentatively","accepted","\"","Happy","Hour","\"",":","Jake","Cobb","."]},"tags":{"original_lispress":"(Yield :output (AttendeesWithResponse :attendees (:attendees (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Happy Hour\"))))))) :response #(ResponseStatusType \"TentativelyAccepted\")))"}}],"tags":{}}
{"dialogue_id":"8b1b1dd5-f1c5-40c2-9ec0-169437d3f9ea","turns":[{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Set an alert to check on Becca tomorrow at 4.","tokens":["Set","an","alert","to","check","on","Becca","tomorrow","at","4","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Check on becca\")) (Event.start_? (?= (DateAtTimeWithDefaults (Today) (NumberPM 4L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Check on becca\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (NumberPM :number ^Long 4L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Check on becca today at 4PM","tokens":["Check","on","becca","today","at","4","PM"]},"agent_utterance":{"described_entities":["entity@303734553"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Today) :time (NumberPM :number #(Number 4)))) :subject (?= #(String \"Check on becca\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yep","tokens":["Yep"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alex\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alex\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add Alex to that meeting.","tokens":["Add","Alex","to","that","meeting","."]},"agent_utterance":{"described_entities":["entity@730797946"],"original_text":"Is this the change you want to make?","tokens":["Is","this","the","change","you","want","to","make","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alex\"))))))))))"}},{"lispress":"(let (x0 (Event.end (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"check on Becca\"))))))) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventAfterDateTime (EventOnDate (DateTime.date x0) (^(Event) EmptyStructConstraint)) x0)))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (Event.end :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"check on Becca\"))))))) ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventAfterDateTime :event ^(Constraint Event) (EventOnDate :date ^Date (DateTime.date :obj x0) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :dateTime x0)))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have any events after check on Becca?","tokens":["Do","I","have","any","events","after","check","on","Becca","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"check on Becca\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","check","on","Becca","\"","on","your","calendar","."]},"tags":{"original_lispress":"(let (x0 (:end (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"check on Becca\")))))))) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventAfterDateTime :dateTime x0 :event (EventOnDate :date (:date x0) :event (Constraint[Event])))))) #(Number 0))))"}}],"tags":{}}
{"dialogue_id":"4adeced1-28ea-436f-b046-f4ad156f3e3a","turns":[{"lispress":"(let (x0 (DateAtTimeWithDefaults (Tomorrow) (NumberPM 1L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (EndOfWorkDay))))) (Event.attendees_? (AttendeeListHasPeople (FindTeamOf (toRecipient (CurrentUser))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 1L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (EndOfWorkDay))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasPeople :people ^(List Person) (FindTeamOf :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hey lets make a meeting with my team tomorrow from 1 till end of work day.","tokens":["Hey","lets","make","a","meeting","with","my","team","tomorrow","from","1","till","end","of","work","day","."]},"agent_utterance":{"described_entities":["entity@1476502676"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 1)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasPeople :people (FindTeamOf :recipient (toRecipient (CurrentUser)))) :end (?= (TimeAfterDateTime :dateTime x0 :time (EndOfWorkDay))) :start (?= x0))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"run\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Wednesday)) (NumberPM 3L))))) (Event.end_? (DateTime.time_? (?= (EndOfWorkDay)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"run\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (EndOfWorkDay)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes, then Wednesday, I have a meeting that will run from 3 thought the end of the work day.","tokens":["Yes",",","then","Wednesday",",","I","have","a","meeting","that","will","run","from","3","thought","the","end","of","the","work","day","."]},"agent_utterance":{"described_entities":["entity@1551413197"],"original_text":"I've put that on your calendar. __BREAK How's this?","tokens":["I","'ve","put","that","on","your","calendar",".","How","'s","this","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (Constraint[DateTime] :time (?= (EndOfWorkDay))) :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :time (NumberPM :number #(Number 3)))) :subject (?= #(String \"run\")))))))"}},{"lispress":"(do (Yield (Execute (^(Dynamic) ConfirmAndReturnAction))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Movie Night\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Thursday)) (EndOfWorkDay)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Unit Unit) do :arg1 ^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction))) :arg2 ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Movie Night\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Thursday)) :time ^Time (EndOfWorkDay)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That looks correct. Add in a Movie Night on Thursday at the end of the day","tokens":["That","looks","correct",".","Add","in","a","Movie","Night","on","Thursday","at","the","end","of","the","day"]},"agent_utterance":{"described_entities":["entity@379651161"],"original_text":"I've put that on your calendar. __BREAK Is this what you're looking for?","tokens":["I","'ve","put","that","on","your","calendar",".","Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(do (Yield :output (Execute :intension (ConfirmAndReturnAction))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"THURSDAY\")) :time (EndOfWorkDay))) :subject (?= #(String \"Movie Night\")))))))"}}],"tags":{}}
{"dialogue_id":"6ae7a2f6-f047-4dde-b5ba-160e9cf1751d","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (NextDOW (Saturday))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"kristen clifford\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Saturday))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"kristen clifford\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"set up a meeting with kristen clifford saturday","tokens":["set","up","a","meeting","with","kristen","clifford","saturday"]},"agent_utterance":{"described_entities":["entity@577232663"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"kristen clifford\")))))) :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"SATURDAY\"))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.time_? (?= (NumberAM 1L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberAM :number ^Long 1L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"no can you change it to 1 am","tokens":["no","can","you","change","it","to","1","am"]},"agent_utterance":{"described_entities":["entity@1523297642"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberAM :number #(Number 1))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yes than kyou","tokens":["yes","than","kyou"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"2b3bf3ef-5e1a-4008-b5b2-86619708ef19","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Saturday)) (Event.subject_? (?~= \"evening party\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Saturday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"evening party\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"delete the evening party on saturday","tokens":["delete","the","evening","party","on","saturday"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events matching \"evening party\" on Saturday.","tokens":["I","did","n't","find","any","events","matching","\"","evening","party","\"","on","Saturday","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"SATURDAY\")) :event (Constraint[Event] :subject (?~= #(String \"evening party\")))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) (Event.subject_? (?~= \"party\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"party\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Oh, then, look for party.","tokens":["Oh",",","then",",","look","for","party","."]},"agent_utterance":{"described_entities":["entity@1987845679"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (QueryEventIntensionConstraint) :new (Constraint[Event] :subject (?~= #(String \"party\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) (Event.subject_? (?~= \"late dinner\")))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^((CalflowIntension (Constraint Event))) QueryEventIntensionConstraint) :new ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"late dinner\")))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"On second thought, it should be the late dinner.","tokens":["On","second","thought",",","it","should","be","the","late","dinner","."]},"agent_utterance":{"described_entities":["entity@865903489"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (QueryEventIntensionConstraint) :new (Constraint[Event] :subject (?~= #(String \"late dinner\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yeah, that's the one.","tokens":["Yeah",",","that","'s","the","one","."]},"agent_utterance":{"described_entities":[],"original_text":"I've deleted your event matching \"late dinner\" tomorrow.","tokens":["I","'ve","deleted","your","event","matching","\"","late","dinner","\"","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jesse\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jesse\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Cancel my meeting with Jesse tomorrow","tokens":["Cancel","my","meeting","with","Jesse","tomorrow"]},"agent_utterance":{"described_entities":["entity@881254440"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jesse\"))))))))))))"}}],"tags":{}}
{"dialogue_id":"b09e2ce0-8566-44b6-bf64-350c1ce34383","turns":[{"lispress":"(let (x0 (NextTime (NumberPM 2L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"lunch\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 3L))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Alex\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 2L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"lunch\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Alex\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Mark 2-3 as lunch with Alex","tokens":["Mark","2","-","3","as","lunch","with","Alex"]},"agent_utterance":{"described_entities":["entity@164701340"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (NextTime :time (NumberPM :number #(Number 2)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Alex\")))))) :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 3)))) :start (?= x0) :subject (?= #(String \"lunch\")))))))"}},{"lispress":"(Yield (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"foot appointment\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Event) Yield :output ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"foot appointment\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"When is my foot appointment?","tokens":["When","is","my","foot","appointment","?"]},"agent_utterance":{"described_entities":[],"original_text":"Your foot appointment is on Friday from 9:00 to 9:30 AM.","tokens":["Your","foot","appointment","is","on","Friday","from","9",":","00","to","9",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"foot appointment\")))))))"}},{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Schedule an appointment with the podiatrist on March 2.","tokens":["Schedule","an","appointment","with","the","podiatrist","on","March","2","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(FenceMultiAction)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceMultiAction)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I think on, second thought, that I need it to be an hour instead and then can you also add, Go to Insurance Demo with Kim on Sunday the 3rd at 7pm.","tokens":["I","think","on",",","second","thought",",","that","I","need","it","to","be","an","hour","instead","and","then","can","you","also","add",",","Go","to","Insurance","Demo","with","Kim","on","Sunday","the","3","rd","at","7","pm","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only do one action at a time. If you separate your requests, I can help you.","tokens":["I","can","only","do","one","action","at","a","time",".","If","you","separate","your","requests",",","I","can","help","you","."]},"tags":{"original_lispress":"(FenceMultiAction)"}}],"tags":{}}
{"dialogue_id":"ba61843e-977b-46f1-bbd8-1f67e7bd5cd7","turns":[{"lispress":"(let (x0 (NextDOW (Thursday))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"funeral\")) (EventAllDayForDateRange (^(Event) EmptyStructConstraint) (DateAndConstraint x0 (nextDayOfWeek x0 (Sunday)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Date (NextDOW :dow ^DayOfWeek (Thursday))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"funeral\")) :c2 ^(Constraint Event) (EventAllDayForDateRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :dateRange ^(Constraint Date) (DateAndConstraint :date1 x0 :date2 ^Date (nextDayOfWeek :date x0 :day ^DayOfWeek (Sunday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Need Thursday to Sunday blocked off on my calendar for a funeral I am traveling to.","tokens":["Need","Thursday","to","Sunday","blocked","off","on","my","calendar","for","a","funeral","I","am","traveling","to","."]},"agent_utterance":{"described_entities":["entity@1172970523"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (NextDOW :dow #(DayOfWeek \"THURSDAY\"))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :nonEmptyBase (EventAllDayForDateRange :dateRange (DateAndConstraint :date1 x0 :date2 (nextDayOfWeek x0 #(DayOfWeek \"SUNDAY\"))) :event (Constraint[Event])) :subject (?= #(String \"funeral\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes please add.","tokens":["Yes","please","add","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"wake\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 23L (October)) (HourMinutePm 4L 30L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"wake\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 23L :month ^Month (October)) :time ^Time (HourMinutePm :hours ^Long 4L :minutes ^Long 30L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Please add an event to my calendar titled wake on October 23rd at 4:30pm.","tokens":["Please","add","an","event","to","my","calendar","titled","wake","on","October","23","rd","at","4",":","30","pm","."]},"agent_utterance":{"described_entities":["entity@990352647"],"original_text":"Is this what you're looking for?","tokens":["Is","this","what","you","'re","looking","for","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 23) :month #(Month \"OCTOBER\")) :time (HourMinutePm :hours #(Number 4) :minutes #(Number 30.0)))) :subject (?= #(String \"wake\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Yes, sadly I must go.","tokens":["Yes",",","sadly","I","must","go","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Looks great thank you","tokens":["Looks","great","thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"c5ae6217-36f2-4d43-b578-c2403434f190","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"coffee shop meeting\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 10L))))) (Event.duration_? (?= (toMinutes 45)))) (Event.location_? (?= (LocationKeyphrase.apply \"Starbucks\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"coffee shop meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 10L))))) :c2 ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toMinutes :minutes ^Number 45)))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Starbucks\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you add coffee shop meeting to my calendar tomorrow at 10 am lasting for 45 minutes at Starbucks","tokens":["Can","you","add","coffee","shop","meeting","to","my","calendar","tomorrow","at","10","am","lasting","for","45","minutes","at","Starbucks"]},"agent_utterance":{"described_entities":["entity@287633232"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :duration (?= (toMinutes #(Number 45))) :location (?= #(LocationKeyphrase \"Starbucks\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 10.0)))) :subject (?= #(String \"coffee shop meeting\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"980dcfbe-eb60-4e54-aab3-bf67ad47c191","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Today) (HourMinutePm 3L 30L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Tim\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Today) :time ^Time (HourMinutePm :hours ^Long 3L :minutes ^Long 30L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Tim\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Add a meeting with Tim at 330pm today","tokens":["Add","a","meeting","with","Tim","at","330","pm","today"]},"agent_utterance":{"described_entities":["entity@1335788210"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Tim\")))))) :start (?= (DateAtTimeWithDefaults :date (Today) :time (HourMinutePm :hours #(Number 3) :minutes #(Number 30.0))))))))"}}],"tags":{}}
{"dialogue_id":"b1b0b1e9-79d7-495e-adea-cc10807241fa","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"get wasted on OJ\")) (Event.start_? (DateTime.date_? (SeasonWinter)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"get wasted on OJ\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (SeasonWinter)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"In the winter, Jake and I wanted to get wasted on OJ","tokens":["In","the","winter",",","Jake","and","I","wanted","to","get","wasted","on","OJ"]},"agent_utterance":{"described_entities":["entity@420166915"],"original_text":"Here are some times when you and Jake Cobb are free.","tokens":["Here","are","some","times","when","you","and","Jake","Cobb","are","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\")))))) :start (Constraint[DateTime] :date (SeasonWinter)) :subject (?= #(String \"get wasted on OJ\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.start_? (DateTime.date_? (SeasonSummer))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (SeasonSummer))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Jake broke his leg, let's do it in summer instead","tokens":["Jake","broke","his","leg",",","let","'s","do","it","in","summer","instead"]},"agent_utterance":{"described_entities":["entity@836190799"],"original_text":"Here are some times when you and Jake are free.","tokens":["Here","are","some","times","when","you","and","Jake","are","free","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :start (Constraint[DateTime] :date (SeasonSummer))))))"}}],"tags":{}}
{"dialogue_id":"d8e8210f-144a-4f4f-b5a9-de8c8bb2e935","turns":[{"lispress":"(Yield (Event.duration (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Wednesday)) (^(Event) EmptyStructConstraint)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Duration) Yield :output ^Duration (Event.duration :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Wednesday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"how long is wednesdays meeting","tokens":["how","long","is","wednesdays","meeting"]},"agent_utterance":{"described_entities":[],"original_text":"The event on Wednesday the 30th is for 45 minutes.","tokens":["The","event","on","Wednesday","the","30","th","is","for","45","minutes","."]},"tags":{"original_lispress":"(Yield :output (:duration (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"WEDNESDAY\")) :event (Constraint[Event])))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (EventOnDate (NextDOW (Monday)) (Event.subject_? (?~= \"dentist appointment\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dentist appointment\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"What about my dentist appointment next Monday?","tokens":["What","about","my","dentist","appointment","next","Monday","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event \"dentist appointment\" on November 4th is for 46 minutes.","tokens":["The","event","\"","dentist","appointment","\"","on","November","4","th","is","for","46","minutes","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event] :subject (?~= #(String \"dentist appointment\")))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Great, thanks!","tokens":["Great",",","thanks","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.id_? (negate (?= (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))))) (EventOnDate (NextDOW (Monday)) (^(Event) EmptyStructConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.id_? :obj ^(Constraint EventId) (^(EventId) negate :constraint ^(Constraint EventId) (^(EventId) ?= :reference ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))) :c2 ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Monday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"What else do I have on Monday?","tokens":["What","else","do","I","have","on","Monday","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event on Monday the 11th. It's \"Appointment\" from 11:00 to 11:30 PM.","tokens":["I","found","one","event","on","Monday","the","11","th",".","It","'s","\"","Appointment","\"","from","11",":","00","to","11",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :id (negate (?= (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))))) :nonEmptyBase (EventOnDate :date (NextDOW :dow #(DayOfWeek \"MONDAY\")) :event (Constraint[Event])))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yes , i am also found","tokens":["yes",",","i","am","also","found"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnyth